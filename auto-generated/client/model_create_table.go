/*
OpenMetadata Apis

# Overview  OpenMetadata supports REST APIs for getting metadata in and out of metadata store. The API resources are grouped under following categories: - **Data assets** - includes resources for data entities, such as `databases`, `tables`, and `topics`. Resources for data assets created from data, such as `dashboards`, `reports`, `metrics`, and `ML Features` are part of this collection. `pipelines`, `notebooks`, etc. that are used for creating data assets are also available as resources as of this collection. - **Teams and Users** - includes `users`, `teams`, a special type of user called `bots` that performs many automated tasks such as ingestion. - **Services** - are services that OpenMetadata integrates with. Currently `databaseService` is the only service under this collection that represents data sources. In the future, services related to Dashboards, Reports, ETL pipelines will be added under this collection. - **Glossary** - OpenMetadata supports hierarchical tags that can be used to build business vocabulary to describe and classify data available under `tags` resource.

API version: 0.11.0
Contact: openmetadata-dev@googlegroups.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// CreateTable struct for CreateTable
type CreateTable struct {
	Columns          []Column               `json:"columns"`
	DatabaseSchema   EntityReference        `json:"databaseSchema"`
	Description      *string                `json:"description,omitempty"`
	DisplayName      *string                `json:"displayName,omitempty"`
	Extension        map[string]interface{} `json:"extension,omitempty"`
	Name             string                 `json:"name"`
	Owner            *EntityReference       `json:"owner,omitempty"`
	ProfileQuery     *string                `json:"profileQuery,omitempty"`
	ProfileSample    *float64               `json:"profileSample,omitempty"`
	TableConstraints []TableConstraint      `json:"tableConstraints,omitempty"`
	TablePartition   *TablePartition        `json:"tablePartition,omitempty"`
	TableType        *string                `json:"tableType,omitempty"`
	Tags             []TagLabel             `json:"tags,omitempty"`
	ViewDefinition   *string                `json:"viewDefinition,omitempty"`
}

// NewCreateTable instantiates a new CreateTable object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateTable(columns []Column, databaseSchema EntityReference, name string) *CreateTable {
	this := CreateTable{}
	this.Columns = columns
	this.DatabaseSchema = databaseSchema
	this.Name = name
	return &this
}

// NewCreateTableWithDefaults instantiates a new CreateTable object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateTableWithDefaults() *CreateTable {
	this := CreateTable{}
	return &this
}

// GetColumns returns the Columns field value
func (o *CreateTable) GetColumns() []Column {
	if o == nil {
		var ret []Column
		return ret
	}

	return o.Columns
}

// GetColumnsOk returns a tuple with the Columns field value
// and a boolean to check if the value has been set.
func (o *CreateTable) GetColumnsOk() ([]Column, bool) {
	if o == nil {
		return nil, false
	}
	return o.Columns, true
}

// SetColumns sets field value
func (o *CreateTable) SetColumns(v []Column) {
	o.Columns = v
}

// GetDatabaseSchema returns the DatabaseSchema field value
func (o *CreateTable) GetDatabaseSchema() EntityReference {
	if o == nil {
		var ret EntityReference
		return ret
	}

	return o.DatabaseSchema
}

// GetDatabaseSchemaOk returns a tuple with the DatabaseSchema field value
// and a boolean to check if the value has been set.
func (o *CreateTable) GetDatabaseSchemaOk() (*EntityReference, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DatabaseSchema, true
}

// SetDatabaseSchema sets field value
func (o *CreateTable) SetDatabaseSchema(v EntityReference) {
	o.DatabaseSchema = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *CreateTable) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateTable) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *CreateTable) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *CreateTable) SetDescription(v string) {
	o.Description = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *CreateTable) GetDisplayName() string {
	if o == nil || o.DisplayName == nil {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateTable) GetDisplayNameOk() (*string, bool) {
	if o == nil || o.DisplayName == nil {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *CreateTable) HasDisplayName() bool {
	if o != nil && o.DisplayName != nil {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *CreateTable) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetExtension returns the Extension field value if set, zero value otherwise.
func (o *CreateTable) GetExtension() map[string]interface{} {
	if o == nil || o.Extension == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateTable) GetExtensionOk() (map[string]interface{}, bool) {
	if o == nil || o.Extension == nil {
		return nil, false
	}
	return o.Extension, true
}

// HasExtension returns a boolean if a field has been set.
func (o *CreateTable) HasExtension() bool {
	if o != nil && o.Extension != nil {
		return true
	}

	return false
}

// SetExtension gets a reference to the given map[string]interface{} and assigns it to the Extension field.
func (o *CreateTable) SetExtension(v map[string]interface{}) {
	o.Extension = v
}

// GetName returns the Name field value
func (o *CreateTable) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CreateTable) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *CreateTable) SetName(v string) {
	o.Name = v
}

// GetOwner returns the Owner field value if set, zero value otherwise.
func (o *CreateTable) GetOwner() EntityReference {
	if o == nil || o.Owner == nil {
		var ret EntityReference
		return ret
	}
	return *o.Owner
}

// GetOwnerOk returns a tuple with the Owner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateTable) GetOwnerOk() (*EntityReference, bool) {
	if o == nil || o.Owner == nil {
		return nil, false
	}
	return o.Owner, true
}

// HasOwner returns a boolean if a field has been set.
func (o *CreateTable) HasOwner() bool {
	if o != nil && o.Owner != nil {
		return true
	}

	return false
}

// SetOwner gets a reference to the given EntityReference and assigns it to the Owner field.
func (o *CreateTable) SetOwner(v EntityReference) {
	o.Owner = &v
}

// GetProfileQuery returns the ProfileQuery field value if set, zero value otherwise.
func (o *CreateTable) GetProfileQuery() string {
	if o == nil || o.ProfileQuery == nil {
		var ret string
		return ret
	}
	return *o.ProfileQuery
}

// GetProfileQueryOk returns a tuple with the ProfileQuery field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateTable) GetProfileQueryOk() (*string, bool) {
	if o == nil || o.ProfileQuery == nil {
		return nil, false
	}
	return o.ProfileQuery, true
}

// HasProfileQuery returns a boolean if a field has been set.
func (o *CreateTable) HasProfileQuery() bool {
	if o != nil && o.ProfileQuery != nil {
		return true
	}

	return false
}

// SetProfileQuery gets a reference to the given string and assigns it to the ProfileQuery field.
func (o *CreateTable) SetProfileQuery(v string) {
	o.ProfileQuery = &v
}

// GetProfileSample returns the ProfileSample field value if set, zero value otherwise.
func (o *CreateTable) GetProfileSample() float64 {
	if o == nil || o.ProfileSample == nil {
		var ret float64
		return ret
	}
	return *o.ProfileSample
}

// GetProfileSampleOk returns a tuple with the ProfileSample field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateTable) GetProfileSampleOk() (*float64, bool) {
	if o == nil || o.ProfileSample == nil {
		return nil, false
	}
	return o.ProfileSample, true
}

// HasProfileSample returns a boolean if a field has been set.
func (o *CreateTable) HasProfileSample() bool {
	if o != nil && o.ProfileSample != nil {
		return true
	}

	return false
}

// SetProfileSample gets a reference to the given float64 and assigns it to the ProfileSample field.
func (o *CreateTable) SetProfileSample(v float64) {
	o.ProfileSample = &v
}

// GetTableConstraints returns the TableConstraints field value if set, zero value otherwise.
func (o *CreateTable) GetTableConstraints() []TableConstraint {
	if o == nil || o.TableConstraints == nil {
		var ret []TableConstraint
		return ret
	}
	return o.TableConstraints
}

// GetTableConstraintsOk returns a tuple with the TableConstraints field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateTable) GetTableConstraintsOk() ([]TableConstraint, bool) {
	if o == nil || o.TableConstraints == nil {
		return nil, false
	}
	return o.TableConstraints, true
}

// HasTableConstraints returns a boolean if a field has been set.
func (o *CreateTable) HasTableConstraints() bool {
	if o != nil && o.TableConstraints != nil {
		return true
	}

	return false
}

// SetTableConstraints gets a reference to the given []TableConstraint and assigns it to the TableConstraints field.
func (o *CreateTable) SetTableConstraints(v []TableConstraint) {
	o.TableConstraints = v
}

// GetTablePartition returns the TablePartition field value if set, zero value otherwise.
func (o *CreateTable) GetTablePartition() TablePartition {
	if o == nil || o.TablePartition == nil {
		var ret TablePartition
		return ret
	}
	return *o.TablePartition
}

// GetTablePartitionOk returns a tuple with the TablePartition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateTable) GetTablePartitionOk() (*TablePartition, bool) {
	if o == nil || o.TablePartition == nil {
		return nil, false
	}
	return o.TablePartition, true
}

// HasTablePartition returns a boolean if a field has been set.
func (o *CreateTable) HasTablePartition() bool {
	if o != nil && o.TablePartition != nil {
		return true
	}

	return false
}

// SetTablePartition gets a reference to the given TablePartition and assigns it to the TablePartition field.
func (o *CreateTable) SetTablePartition(v TablePartition) {
	o.TablePartition = &v
}

// GetTableType returns the TableType field value if set, zero value otherwise.
func (o *CreateTable) GetTableType() string {
	if o == nil || o.TableType == nil {
		var ret string
		return ret
	}
	return *o.TableType
}

// GetTableTypeOk returns a tuple with the TableType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateTable) GetTableTypeOk() (*string, bool) {
	if o == nil || o.TableType == nil {
		return nil, false
	}
	return o.TableType, true
}

// HasTableType returns a boolean if a field has been set.
func (o *CreateTable) HasTableType() bool {
	if o != nil && o.TableType != nil {
		return true
	}

	return false
}

// SetTableType gets a reference to the given string and assigns it to the TableType field.
func (o *CreateTable) SetTableType(v string) {
	o.TableType = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *CreateTable) GetTags() []TagLabel {
	if o == nil || o.Tags == nil {
		var ret []TagLabel
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateTable) GetTagsOk() ([]TagLabel, bool) {
	if o == nil || o.Tags == nil {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *CreateTable) HasTags() bool {
	if o != nil && o.Tags != nil {
		return true
	}

	return false
}

// SetTags gets a reference to the given []TagLabel and assigns it to the Tags field.
func (o *CreateTable) SetTags(v []TagLabel) {
	o.Tags = v
}

// GetViewDefinition returns the ViewDefinition field value if set, zero value otherwise.
func (o *CreateTable) GetViewDefinition() string {
	if o == nil || o.ViewDefinition == nil {
		var ret string
		return ret
	}
	return *o.ViewDefinition
}

// GetViewDefinitionOk returns a tuple with the ViewDefinition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateTable) GetViewDefinitionOk() (*string, bool) {
	if o == nil || o.ViewDefinition == nil {
		return nil, false
	}
	return o.ViewDefinition, true
}

// HasViewDefinition returns a boolean if a field has been set.
func (o *CreateTable) HasViewDefinition() bool {
	if o != nil && o.ViewDefinition != nil {
		return true
	}

	return false
}

// SetViewDefinition gets a reference to the given string and assigns it to the ViewDefinition field.
func (o *CreateTable) SetViewDefinition(v string) {
	o.ViewDefinition = &v
}

func (o CreateTable) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["columns"] = o.Columns
	}
	if true {
		toSerialize["databaseSchema"] = o.DatabaseSchema
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.DisplayName != nil {
		toSerialize["displayName"] = o.DisplayName
	}
	if o.Extension != nil {
		toSerialize["extension"] = o.Extension
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if o.Owner != nil {
		toSerialize["owner"] = o.Owner
	}
	if o.ProfileQuery != nil {
		toSerialize["profileQuery"] = o.ProfileQuery
	}
	if o.ProfileSample != nil {
		toSerialize["profileSample"] = o.ProfileSample
	}
	if o.TableConstraints != nil {
		toSerialize["tableConstraints"] = o.TableConstraints
	}
	if o.TablePartition != nil {
		toSerialize["tablePartition"] = o.TablePartition
	}
	if o.TableType != nil {
		toSerialize["tableType"] = o.TableType
	}
	if o.Tags != nil {
		toSerialize["tags"] = o.Tags
	}
	if o.ViewDefinition != nil {
		toSerialize["viewDefinition"] = o.ViewDefinition
	}
	return json.Marshal(toSerialize)
}

type NullableCreateTable struct {
	value *CreateTable
	isSet bool
}

func (v NullableCreateTable) Get() *CreateTable {
	return v.value
}

func (v *NullableCreateTable) Set(val *CreateTable) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateTable) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateTable) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateTable(val *CreateTable) *NullableCreateTable {
	return &NullableCreateTable{value: val, isSet: true}
}

func (v NullableCreateTable) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateTable) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
