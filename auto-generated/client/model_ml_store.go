/*
OpenMetadata Apis

# Overview  OpenMetadata supports REST APIs for getting metadata in and out of metadata store. The API resources are grouped under following categories: - **Data assets** - includes resources for data entities, such as `databases`, `tables`, and `topics`. Resources for data assets created from data, such as `dashboards`, `reports`, `metrics`, and `ML Features` are part of this collection. `pipelines`, `notebooks`, etc. that are used for creating data assets are also available as resources as of this collection. - **Teams and Users** - includes `users`, `teams`, a special type of user called `bots` that performs many automated tasks such as ingestion. - **Services** - are services that OpenMetadata integrates with. Currently `databaseService` is the only service under this collection that represents data sources. In the future, services related to Dashboards, Reports, ETL pipelines will be added under this collection. - **Glossary** - OpenMetadata supports hierarchical tags that can be used to build business vocabulary to describe and classify data available under `tags` resource.

API version: 0.11.0
Contact: openmetadata-dev@googlegroups.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// MlStore struct for MlStore
type MlStore struct {
	ImageRepository *string `json:"imageRepository,omitempty"`
	Storage         *string `json:"storage,omitempty"`
}

// NewMlStore instantiates a new MlStore object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMlStore() *MlStore {
	this := MlStore{}
	return &this
}

// NewMlStoreWithDefaults instantiates a new MlStore object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMlStoreWithDefaults() *MlStore {
	this := MlStore{}
	return &this
}

// GetImageRepository returns the ImageRepository field value if set, zero value otherwise.
func (o *MlStore) GetImageRepository() string {
	if o == nil || o.ImageRepository == nil {
		var ret string
		return ret
	}
	return *o.ImageRepository
}

// GetImageRepositoryOk returns a tuple with the ImageRepository field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MlStore) GetImageRepositoryOk() (*string, bool) {
	if o == nil || o.ImageRepository == nil {
		return nil, false
	}
	return o.ImageRepository, true
}

// HasImageRepository returns a boolean if a field has been set.
func (o *MlStore) HasImageRepository() bool {
	if o != nil && o.ImageRepository != nil {
		return true
	}

	return false
}

// SetImageRepository gets a reference to the given string and assigns it to the ImageRepository field.
func (o *MlStore) SetImageRepository(v string) {
	o.ImageRepository = &v
}

// GetStorage returns the Storage field value if set, zero value otherwise.
func (o *MlStore) GetStorage() string {
	if o == nil || o.Storage == nil {
		var ret string
		return ret
	}
	return *o.Storage
}

// GetStorageOk returns a tuple with the Storage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MlStore) GetStorageOk() (*string, bool) {
	if o == nil || o.Storage == nil {
		return nil, false
	}
	return o.Storage, true
}

// HasStorage returns a boolean if a field has been set.
func (o *MlStore) HasStorage() bool {
	if o != nil && o.Storage != nil {
		return true
	}

	return false
}

// SetStorage gets a reference to the given string and assigns it to the Storage field.
func (o *MlStore) SetStorage(v string) {
	o.Storage = &v
}

func (o MlStore) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ImageRepository != nil {
		toSerialize["imageRepository"] = o.ImageRepository
	}
	if o.Storage != nil {
		toSerialize["storage"] = o.Storage
	}
	return json.Marshal(toSerialize)
}

type NullableMlStore struct {
	value *MlStore
	isSet bool
}

func (v NullableMlStore) Get() *MlStore {
	return v.value
}

func (v *NullableMlStore) Set(val *MlStore) {
	v.value = val
	v.isSet = true
}

func (v NullableMlStore) IsSet() bool {
	return v.isSet
}

func (v *NullableMlStore) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMlStore(val *MlStore) *NullableMlStore {
	return &NullableMlStore{value: val, isSet: true}
}

func (v NullableMlStore) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMlStore) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
