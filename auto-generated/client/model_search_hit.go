/*
OpenMetadata Apis

# Overview  OpenMetadata supports REST APIs for getting metadata in and out of metadata store. The API resources are grouped under following categories: - **Data assets** - includes resources for data entities, such as `databases`, `tables`, and `topics`. Resources for data assets created from data, such as `dashboards`, `reports`, `metrics`, and `ML Features` are part of this collection. `pipelines`, `notebooks`, etc. that are used for creating data assets are also available as resources as of this collection. - **Teams and Users** - includes `users`, `teams`, a special type of user called `bots` that performs many automated tasks such as ingestion. - **Services** - are services that OpenMetadata integrates with. Currently `databaseService` is the only service under this collection that represents data sources. In the future, services related to Dashboards, Reports, ETL pipelines will be added under this collection. - **Glossary** - OpenMetadata supports hierarchical tags that can be used to build business vocabulary to describe and classify data available under `tags` resource.

API version: 0.11.0
Contact: openmetadata-dev@googlegroups.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// SearchHit struct for SearchHit
type SearchHit struct {
	ClusterAlias    *string                           `json:"clusterAlias,omitempty"`
	Explanation     *Explanation                      `json:"explanation,omitempty"`
	Fields          *map[string]DocumentField         `json:"fields,omitempty"`
	Fragment        *bool                             `json:"fragment,omitempty"`
	HighlightFields *map[string]HighlightField        `json:"highlightFields,omitempty"`
	Id              *string                           `json:"id,omitempty"`
	Index           *string                           `json:"index,omitempty"`
	InnerHits       *map[string]SearchHits            `json:"innerHits,omitempty"`
	MatchedQueries  []string                          `json:"matchedQueries,omitempty"`
	NestedIdentity  *NestedIdentity                   `json:"nestedIdentity,omitempty"`
	PrimaryTerm     *int64                            `json:"primaryTerm,omitempty"`
	RawSortValues   []map[string]interface{}          `json:"rawSortValues,omitempty"`
	Score           *float32                          `json:"score,omitempty"`
	SeqNo           *int64                            `json:"seqNo,omitempty"`
	Shard           *SearchShardTarget                `json:"shard,omitempty"`
	SortValues      []map[string]interface{}          `json:"sortValues,omitempty"`
	SourceAsMap     map[string]map[string]interface{} `json:"sourceAsMap,omitempty"`
	SourceAsString  *string                           `json:"sourceAsString,omitempty"`
	SourceRef       *BytesReference                   `json:"sourceRef,omitempty"`
	Type            *string                           `json:"type,omitempty"`
	Version         *int64                            `json:"version,omitempty"`
}

// NewSearchHit instantiates a new SearchHit object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSearchHit() *SearchHit {
	this := SearchHit{}
	return &this
}

// NewSearchHitWithDefaults instantiates a new SearchHit object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSearchHitWithDefaults() *SearchHit {
	this := SearchHit{}
	return &this
}

// GetClusterAlias returns the ClusterAlias field value if set, zero value otherwise.
func (o *SearchHit) GetClusterAlias() string {
	if o == nil || o.ClusterAlias == nil {
		var ret string
		return ret
	}
	return *o.ClusterAlias
}

// GetClusterAliasOk returns a tuple with the ClusterAlias field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchHit) GetClusterAliasOk() (*string, bool) {
	if o == nil || o.ClusterAlias == nil {
		return nil, false
	}
	return o.ClusterAlias, true
}

// HasClusterAlias returns a boolean if a field has been set.
func (o *SearchHit) HasClusterAlias() bool {
	if o != nil && o.ClusterAlias != nil {
		return true
	}

	return false
}

// SetClusterAlias gets a reference to the given string and assigns it to the ClusterAlias field.
func (o *SearchHit) SetClusterAlias(v string) {
	o.ClusterAlias = &v
}

// GetExplanation returns the Explanation field value if set, zero value otherwise.
func (o *SearchHit) GetExplanation() Explanation {
	if o == nil || o.Explanation == nil {
		var ret Explanation
		return ret
	}
	return *o.Explanation
}

// GetExplanationOk returns a tuple with the Explanation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchHit) GetExplanationOk() (*Explanation, bool) {
	if o == nil || o.Explanation == nil {
		return nil, false
	}
	return o.Explanation, true
}

// HasExplanation returns a boolean if a field has been set.
func (o *SearchHit) HasExplanation() bool {
	if o != nil && o.Explanation != nil {
		return true
	}

	return false
}

// SetExplanation gets a reference to the given Explanation and assigns it to the Explanation field.
func (o *SearchHit) SetExplanation(v Explanation) {
	o.Explanation = &v
}

// GetFields returns the Fields field value if set, zero value otherwise.
func (o *SearchHit) GetFields() map[string]DocumentField {
	if o == nil || o.Fields == nil {
		var ret map[string]DocumentField
		return ret
	}
	return *o.Fields
}

// GetFieldsOk returns a tuple with the Fields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchHit) GetFieldsOk() (*map[string]DocumentField, bool) {
	if o == nil || o.Fields == nil {
		return nil, false
	}
	return o.Fields, true
}

// HasFields returns a boolean if a field has been set.
func (o *SearchHit) HasFields() bool {
	if o != nil && o.Fields != nil {
		return true
	}

	return false
}

// SetFields gets a reference to the given map[string]DocumentField and assigns it to the Fields field.
func (o *SearchHit) SetFields(v map[string]DocumentField) {
	o.Fields = &v
}

// GetFragment returns the Fragment field value if set, zero value otherwise.
func (o *SearchHit) GetFragment() bool {
	if o == nil || o.Fragment == nil {
		var ret bool
		return ret
	}
	return *o.Fragment
}

// GetFragmentOk returns a tuple with the Fragment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchHit) GetFragmentOk() (*bool, bool) {
	if o == nil || o.Fragment == nil {
		return nil, false
	}
	return o.Fragment, true
}

// HasFragment returns a boolean if a field has been set.
func (o *SearchHit) HasFragment() bool {
	if o != nil && o.Fragment != nil {
		return true
	}

	return false
}

// SetFragment gets a reference to the given bool and assigns it to the Fragment field.
func (o *SearchHit) SetFragment(v bool) {
	o.Fragment = &v
}

// GetHighlightFields returns the HighlightFields field value if set, zero value otherwise.
func (o *SearchHit) GetHighlightFields() map[string]HighlightField {
	if o == nil || o.HighlightFields == nil {
		var ret map[string]HighlightField
		return ret
	}
	return *o.HighlightFields
}

// GetHighlightFieldsOk returns a tuple with the HighlightFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchHit) GetHighlightFieldsOk() (*map[string]HighlightField, bool) {
	if o == nil || o.HighlightFields == nil {
		return nil, false
	}
	return o.HighlightFields, true
}

// HasHighlightFields returns a boolean if a field has been set.
func (o *SearchHit) HasHighlightFields() bool {
	if o != nil && o.HighlightFields != nil {
		return true
	}

	return false
}

// SetHighlightFields gets a reference to the given map[string]HighlightField and assigns it to the HighlightFields field.
func (o *SearchHit) SetHighlightFields(v map[string]HighlightField) {
	o.HighlightFields = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *SearchHit) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchHit) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *SearchHit) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *SearchHit) SetId(v string) {
	o.Id = &v
}

// GetIndex returns the Index field value if set, zero value otherwise.
func (o *SearchHit) GetIndex() string {
	if o == nil || o.Index == nil {
		var ret string
		return ret
	}
	return *o.Index
}

// GetIndexOk returns a tuple with the Index field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchHit) GetIndexOk() (*string, bool) {
	if o == nil || o.Index == nil {
		return nil, false
	}
	return o.Index, true
}

// HasIndex returns a boolean if a field has been set.
func (o *SearchHit) HasIndex() bool {
	if o != nil && o.Index != nil {
		return true
	}

	return false
}

// SetIndex gets a reference to the given string and assigns it to the Index field.
func (o *SearchHit) SetIndex(v string) {
	o.Index = &v
}

// GetInnerHits returns the InnerHits field value if set, zero value otherwise.
func (o *SearchHit) GetInnerHits() map[string]SearchHits {
	if o == nil || o.InnerHits == nil {
		var ret map[string]SearchHits
		return ret
	}
	return *o.InnerHits
}

// GetInnerHitsOk returns a tuple with the InnerHits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchHit) GetInnerHitsOk() (*map[string]SearchHits, bool) {
	if o == nil || o.InnerHits == nil {
		return nil, false
	}
	return o.InnerHits, true
}

// HasInnerHits returns a boolean if a field has been set.
func (o *SearchHit) HasInnerHits() bool {
	if o != nil && o.InnerHits != nil {
		return true
	}

	return false
}

// SetInnerHits gets a reference to the given map[string]SearchHits and assigns it to the InnerHits field.
func (o *SearchHit) SetInnerHits(v map[string]SearchHits) {
	o.InnerHits = &v
}

// GetMatchedQueries returns the MatchedQueries field value if set, zero value otherwise.
func (o *SearchHit) GetMatchedQueries() []string {
	if o == nil || o.MatchedQueries == nil {
		var ret []string
		return ret
	}
	return o.MatchedQueries
}

// GetMatchedQueriesOk returns a tuple with the MatchedQueries field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchHit) GetMatchedQueriesOk() ([]string, bool) {
	if o == nil || o.MatchedQueries == nil {
		return nil, false
	}
	return o.MatchedQueries, true
}

// HasMatchedQueries returns a boolean if a field has been set.
func (o *SearchHit) HasMatchedQueries() bool {
	if o != nil && o.MatchedQueries != nil {
		return true
	}

	return false
}

// SetMatchedQueries gets a reference to the given []string and assigns it to the MatchedQueries field.
func (o *SearchHit) SetMatchedQueries(v []string) {
	o.MatchedQueries = v
}

// GetNestedIdentity returns the NestedIdentity field value if set, zero value otherwise.
func (o *SearchHit) GetNestedIdentity() NestedIdentity {
	if o == nil || o.NestedIdentity == nil {
		var ret NestedIdentity
		return ret
	}
	return *o.NestedIdentity
}

// GetNestedIdentityOk returns a tuple with the NestedIdentity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchHit) GetNestedIdentityOk() (*NestedIdentity, bool) {
	if o == nil || o.NestedIdentity == nil {
		return nil, false
	}
	return o.NestedIdentity, true
}

// HasNestedIdentity returns a boolean if a field has been set.
func (o *SearchHit) HasNestedIdentity() bool {
	if o != nil && o.NestedIdentity != nil {
		return true
	}

	return false
}

// SetNestedIdentity gets a reference to the given NestedIdentity and assigns it to the NestedIdentity field.
func (o *SearchHit) SetNestedIdentity(v NestedIdentity) {
	o.NestedIdentity = &v
}

// GetPrimaryTerm returns the PrimaryTerm field value if set, zero value otherwise.
func (o *SearchHit) GetPrimaryTerm() int64 {
	if o == nil || o.PrimaryTerm == nil {
		var ret int64
		return ret
	}
	return *o.PrimaryTerm
}

// GetPrimaryTermOk returns a tuple with the PrimaryTerm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchHit) GetPrimaryTermOk() (*int64, bool) {
	if o == nil || o.PrimaryTerm == nil {
		return nil, false
	}
	return o.PrimaryTerm, true
}

// HasPrimaryTerm returns a boolean if a field has been set.
func (o *SearchHit) HasPrimaryTerm() bool {
	if o != nil && o.PrimaryTerm != nil {
		return true
	}

	return false
}

// SetPrimaryTerm gets a reference to the given int64 and assigns it to the PrimaryTerm field.
func (o *SearchHit) SetPrimaryTerm(v int64) {
	o.PrimaryTerm = &v
}

// GetRawSortValues returns the RawSortValues field value if set, zero value otherwise.
func (o *SearchHit) GetRawSortValues() []map[string]interface{} {
	if o == nil || o.RawSortValues == nil {
		var ret []map[string]interface{}
		return ret
	}
	return o.RawSortValues
}

// GetRawSortValuesOk returns a tuple with the RawSortValues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchHit) GetRawSortValuesOk() ([]map[string]interface{}, bool) {
	if o == nil || o.RawSortValues == nil {
		return nil, false
	}
	return o.RawSortValues, true
}

// HasRawSortValues returns a boolean if a field has been set.
func (o *SearchHit) HasRawSortValues() bool {
	if o != nil && o.RawSortValues != nil {
		return true
	}

	return false
}

// SetRawSortValues gets a reference to the given []map[string]interface{} and assigns it to the RawSortValues field.
func (o *SearchHit) SetRawSortValues(v []map[string]interface{}) {
	o.RawSortValues = v
}

// GetScore returns the Score field value if set, zero value otherwise.
func (o *SearchHit) GetScore() float32 {
	if o == nil || o.Score == nil {
		var ret float32
		return ret
	}
	return *o.Score
}

// GetScoreOk returns a tuple with the Score field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchHit) GetScoreOk() (*float32, bool) {
	if o == nil || o.Score == nil {
		return nil, false
	}
	return o.Score, true
}

// HasScore returns a boolean if a field has been set.
func (o *SearchHit) HasScore() bool {
	if o != nil && o.Score != nil {
		return true
	}

	return false
}

// SetScore gets a reference to the given float32 and assigns it to the Score field.
func (o *SearchHit) SetScore(v float32) {
	o.Score = &v
}

// GetSeqNo returns the SeqNo field value if set, zero value otherwise.
func (o *SearchHit) GetSeqNo() int64 {
	if o == nil || o.SeqNo == nil {
		var ret int64
		return ret
	}
	return *o.SeqNo
}

// GetSeqNoOk returns a tuple with the SeqNo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchHit) GetSeqNoOk() (*int64, bool) {
	if o == nil || o.SeqNo == nil {
		return nil, false
	}
	return o.SeqNo, true
}

// HasSeqNo returns a boolean if a field has been set.
func (o *SearchHit) HasSeqNo() bool {
	if o != nil && o.SeqNo != nil {
		return true
	}

	return false
}

// SetSeqNo gets a reference to the given int64 and assigns it to the SeqNo field.
func (o *SearchHit) SetSeqNo(v int64) {
	o.SeqNo = &v
}

// GetShard returns the Shard field value if set, zero value otherwise.
func (o *SearchHit) GetShard() SearchShardTarget {
	if o == nil || o.Shard == nil {
		var ret SearchShardTarget
		return ret
	}
	return *o.Shard
}

// GetShardOk returns a tuple with the Shard field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchHit) GetShardOk() (*SearchShardTarget, bool) {
	if o == nil || o.Shard == nil {
		return nil, false
	}
	return o.Shard, true
}

// HasShard returns a boolean if a field has been set.
func (o *SearchHit) HasShard() bool {
	if o != nil && o.Shard != nil {
		return true
	}

	return false
}

// SetShard gets a reference to the given SearchShardTarget and assigns it to the Shard field.
func (o *SearchHit) SetShard(v SearchShardTarget) {
	o.Shard = &v
}

// GetSortValues returns the SortValues field value if set, zero value otherwise.
func (o *SearchHit) GetSortValues() []map[string]interface{} {
	if o == nil || o.SortValues == nil {
		var ret []map[string]interface{}
		return ret
	}
	return o.SortValues
}

// GetSortValuesOk returns a tuple with the SortValues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchHit) GetSortValuesOk() ([]map[string]interface{}, bool) {
	if o == nil || o.SortValues == nil {
		return nil, false
	}
	return o.SortValues, true
}

// HasSortValues returns a boolean if a field has been set.
func (o *SearchHit) HasSortValues() bool {
	if o != nil && o.SortValues != nil {
		return true
	}

	return false
}

// SetSortValues gets a reference to the given []map[string]interface{} and assigns it to the SortValues field.
func (o *SearchHit) SetSortValues(v []map[string]interface{}) {
	o.SortValues = v
}

// GetSourceAsMap returns the SourceAsMap field value if set, zero value otherwise.
func (o *SearchHit) GetSourceAsMap() map[string]map[string]interface{} {
	if o == nil || o.SourceAsMap == nil {
		var ret map[string]map[string]interface{}
		return ret
	}
	return o.SourceAsMap
}

// GetSourceAsMapOk returns a tuple with the SourceAsMap field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchHit) GetSourceAsMapOk() (map[string]map[string]interface{}, bool) {
	if o == nil || o.SourceAsMap == nil {
		return nil, false
	}
	return o.SourceAsMap, true
}

// HasSourceAsMap returns a boolean if a field has been set.
func (o *SearchHit) HasSourceAsMap() bool {
	if o != nil && o.SourceAsMap != nil {
		return true
	}

	return false
}

// SetSourceAsMap gets a reference to the given map[string]map[string]interface{} and assigns it to the SourceAsMap field.
func (o *SearchHit) SetSourceAsMap(v map[string]map[string]interface{}) {
	o.SourceAsMap = v
}

// GetSourceAsString returns the SourceAsString field value if set, zero value otherwise.
func (o *SearchHit) GetSourceAsString() string {
	if o == nil || o.SourceAsString == nil {
		var ret string
		return ret
	}
	return *o.SourceAsString
}

// GetSourceAsStringOk returns a tuple with the SourceAsString field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchHit) GetSourceAsStringOk() (*string, bool) {
	if o == nil || o.SourceAsString == nil {
		return nil, false
	}
	return o.SourceAsString, true
}

// HasSourceAsString returns a boolean if a field has been set.
func (o *SearchHit) HasSourceAsString() bool {
	if o != nil && o.SourceAsString != nil {
		return true
	}

	return false
}

// SetSourceAsString gets a reference to the given string and assigns it to the SourceAsString field.
func (o *SearchHit) SetSourceAsString(v string) {
	o.SourceAsString = &v
}

// GetSourceRef returns the SourceRef field value if set, zero value otherwise.
func (o *SearchHit) GetSourceRef() BytesReference {
	if o == nil || o.SourceRef == nil {
		var ret BytesReference
		return ret
	}
	return *o.SourceRef
}

// GetSourceRefOk returns a tuple with the SourceRef field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchHit) GetSourceRefOk() (*BytesReference, bool) {
	if o == nil || o.SourceRef == nil {
		return nil, false
	}
	return o.SourceRef, true
}

// HasSourceRef returns a boolean if a field has been set.
func (o *SearchHit) HasSourceRef() bool {
	if o != nil && o.SourceRef != nil {
		return true
	}

	return false
}

// SetSourceRef gets a reference to the given BytesReference and assigns it to the SourceRef field.
func (o *SearchHit) SetSourceRef(v BytesReference) {
	o.SourceRef = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *SearchHit) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchHit) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *SearchHit) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *SearchHit) SetType(v string) {
	o.Type = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *SearchHit) GetVersion() int64 {
	if o == nil || o.Version == nil {
		var ret int64
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchHit) GetVersionOk() (*int64, bool) {
	if o == nil || o.Version == nil {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *SearchHit) HasVersion() bool {
	if o != nil && o.Version != nil {
		return true
	}

	return false
}

// SetVersion gets a reference to the given int64 and assigns it to the Version field.
func (o *SearchHit) SetVersion(v int64) {
	o.Version = &v
}

func (o SearchHit) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ClusterAlias != nil {
		toSerialize["clusterAlias"] = o.ClusterAlias
	}
	if o.Explanation != nil {
		toSerialize["explanation"] = o.Explanation
	}
	if o.Fields != nil {
		toSerialize["fields"] = o.Fields
	}
	if o.Fragment != nil {
		toSerialize["fragment"] = o.Fragment
	}
	if o.HighlightFields != nil {
		toSerialize["highlightFields"] = o.HighlightFields
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Index != nil {
		toSerialize["index"] = o.Index
	}
	if o.InnerHits != nil {
		toSerialize["innerHits"] = o.InnerHits
	}
	if o.MatchedQueries != nil {
		toSerialize["matchedQueries"] = o.MatchedQueries
	}
	if o.NestedIdentity != nil {
		toSerialize["nestedIdentity"] = o.NestedIdentity
	}
	if o.PrimaryTerm != nil {
		toSerialize["primaryTerm"] = o.PrimaryTerm
	}
	if o.RawSortValues != nil {
		toSerialize["rawSortValues"] = o.RawSortValues
	}
	if o.Score != nil {
		toSerialize["score"] = o.Score
	}
	if o.SeqNo != nil {
		toSerialize["seqNo"] = o.SeqNo
	}
	if o.Shard != nil {
		toSerialize["shard"] = o.Shard
	}
	if o.SortValues != nil {
		toSerialize["sortValues"] = o.SortValues
	}
	if o.SourceAsMap != nil {
		toSerialize["sourceAsMap"] = o.SourceAsMap
	}
	if o.SourceAsString != nil {
		toSerialize["sourceAsString"] = o.SourceAsString
	}
	if o.SourceRef != nil {
		toSerialize["sourceRef"] = o.SourceRef
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.Version != nil {
		toSerialize["version"] = o.Version
	}
	return json.Marshal(toSerialize)
}

type NullableSearchHit struct {
	value *SearchHit
	isSet bool
}

func (v NullableSearchHit) Get() *SearchHit {
	return v.value
}

func (v *NullableSearchHit) Set(val *SearchHit) {
	v.value = val
	v.isSet = true
}

func (v NullableSearchHit) IsSet() bool {
	return v.isSet
}

func (v *NullableSearchHit) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearchHit(val *SearchHit) *NullableSearchHit {
	return &NullableSearchHit{value: val, isSet: true}
}

func (v NullableSearchHit) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSearchHit) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
