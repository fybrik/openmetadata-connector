/*
OpenMetadata Apis

# Overview  OpenMetadata supports REST APIs for getting metadata in and out of metadata store. The API resources are grouped under following categories: - **Data assets** - includes resources for data entities, such as `databases`, `tables`, and `topics`. Resources for data assets created from data, such as `dashboards`, `reports`, `metrics`, and `ML Features` are part of this collection. `pipelines`, `notebooks`, etc. that are used for creating data assets are also available as resources as of this collection. - **Teams and Users** - includes `users`, `teams`, a special type of user called `bots` that performs many automated tasks such as ingestion. - **Services** - are services that OpenMetadata integrates with. Currently `databaseService` is the only service under this collection that represents data sources. In the future, services related to Dashboards, Reports, ETL pipelines will be added under this collection. - **Glossary** - OpenMetadata supports hierarchical tags that can be used to build business vocabulary to describe and classify data available under `tags` resource.

API version: 0.11.0
Contact: openmetadata-dev@googlegroups.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// CreateIngestionPipeline struct for CreateIngestionPipeline
type CreateIngestionPipeline struct {
	AirflowConfig AirflowConfig          `json:"airflowConfig"`
	Description   *string                `json:"description,omitempty"`
	DisplayName   *string                `json:"displayName,omitempty"`
	Extension     map[string]interface{} `json:"extension,omitempty"`
	LoggerLevel   *string                `json:"loggerLevel,omitempty"`
	Name          string                 `json:"name"`
	Owner         *EntityReference       `json:"owner,omitempty"`
	PipelineType  string                 `json:"pipelineType"`
	Service       EntityReference        `json:"service"`
	SourceConfig  SourceConfig           `json:"sourceConfig"`
}

// NewCreateIngestionPipeline instantiates a new CreateIngestionPipeline object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateIngestionPipeline(airflowConfig AirflowConfig, name string, pipelineType string, service EntityReference, sourceConfig SourceConfig) *CreateIngestionPipeline {
	this := CreateIngestionPipeline{}
	this.AirflowConfig = airflowConfig
	this.Name = name
	this.PipelineType = pipelineType
	this.Service = service
	this.SourceConfig = sourceConfig
	return &this
}

// NewCreateIngestionPipelineWithDefaults instantiates a new CreateIngestionPipeline object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateIngestionPipelineWithDefaults() *CreateIngestionPipeline {
	this := CreateIngestionPipeline{}
	return &this
}

// GetAirflowConfig returns the AirflowConfig field value
func (o *CreateIngestionPipeline) GetAirflowConfig() AirflowConfig {
	if o == nil {
		var ret AirflowConfig
		return ret
	}

	return o.AirflowConfig
}

// GetAirflowConfigOk returns a tuple with the AirflowConfig field value
// and a boolean to check if the value has been set.
func (o *CreateIngestionPipeline) GetAirflowConfigOk() (*AirflowConfig, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AirflowConfig, true
}

// SetAirflowConfig sets field value
func (o *CreateIngestionPipeline) SetAirflowConfig(v AirflowConfig) {
	o.AirflowConfig = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *CreateIngestionPipeline) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateIngestionPipeline) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *CreateIngestionPipeline) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *CreateIngestionPipeline) SetDescription(v string) {
	o.Description = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *CreateIngestionPipeline) GetDisplayName() string {
	if o == nil || o.DisplayName == nil {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateIngestionPipeline) GetDisplayNameOk() (*string, bool) {
	if o == nil || o.DisplayName == nil {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *CreateIngestionPipeline) HasDisplayName() bool {
	if o != nil && o.DisplayName != nil {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *CreateIngestionPipeline) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetExtension returns the Extension field value if set, zero value otherwise.
func (o *CreateIngestionPipeline) GetExtension() map[string]interface{} {
	if o == nil || o.Extension == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateIngestionPipeline) GetExtensionOk() (map[string]interface{}, bool) {
	if o == nil || o.Extension == nil {
		return nil, false
	}
	return o.Extension, true
}

// HasExtension returns a boolean if a field has been set.
func (o *CreateIngestionPipeline) HasExtension() bool {
	if o != nil && o.Extension != nil {
		return true
	}

	return false
}

// SetExtension gets a reference to the given map[string]interface{} and assigns it to the Extension field.
func (o *CreateIngestionPipeline) SetExtension(v map[string]interface{}) {
	o.Extension = v
}

// GetLoggerLevel returns the LoggerLevel field value if set, zero value otherwise.
func (o *CreateIngestionPipeline) GetLoggerLevel() string {
	if o == nil || o.LoggerLevel == nil {
		var ret string
		return ret
	}
	return *o.LoggerLevel
}

// GetLoggerLevelOk returns a tuple with the LoggerLevel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateIngestionPipeline) GetLoggerLevelOk() (*string, bool) {
	if o == nil || o.LoggerLevel == nil {
		return nil, false
	}
	return o.LoggerLevel, true
}

// HasLoggerLevel returns a boolean if a field has been set.
func (o *CreateIngestionPipeline) HasLoggerLevel() bool {
	if o != nil && o.LoggerLevel != nil {
		return true
	}

	return false
}

// SetLoggerLevel gets a reference to the given string and assigns it to the LoggerLevel field.
func (o *CreateIngestionPipeline) SetLoggerLevel(v string) {
	o.LoggerLevel = &v
}

// GetName returns the Name field value
func (o *CreateIngestionPipeline) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CreateIngestionPipeline) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *CreateIngestionPipeline) SetName(v string) {
	o.Name = v
}

// GetOwner returns the Owner field value if set, zero value otherwise.
func (o *CreateIngestionPipeline) GetOwner() EntityReference {
	if o == nil || o.Owner == nil {
		var ret EntityReference
		return ret
	}
	return *o.Owner
}

// GetOwnerOk returns a tuple with the Owner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateIngestionPipeline) GetOwnerOk() (*EntityReference, bool) {
	if o == nil || o.Owner == nil {
		return nil, false
	}
	return o.Owner, true
}

// HasOwner returns a boolean if a field has been set.
func (o *CreateIngestionPipeline) HasOwner() bool {
	if o != nil && o.Owner != nil {
		return true
	}

	return false
}

// SetOwner gets a reference to the given EntityReference and assigns it to the Owner field.
func (o *CreateIngestionPipeline) SetOwner(v EntityReference) {
	o.Owner = &v
}

// GetPipelineType returns the PipelineType field value
func (o *CreateIngestionPipeline) GetPipelineType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PipelineType
}

// GetPipelineTypeOk returns a tuple with the PipelineType field value
// and a boolean to check if the value has been set.
func (o *CreateIngestionPipeline) GetPipelineTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PipelineType, true
}

// SetPipelineType sets field value
func (o *CreateIngestionPipeline) SetPipelineType(v string) {
	o.PipelineType = v
}

// GetService returns the Service field value
func (o *CreateIngestionPipeline) GetService() EntityReference {
	if o == nil {
		var ret EntityReference
		return ret
	}

	return o.Service
}

// GetServiceOk returns a tuple with the Service field value
// and a boolean to check if the value has been set.
func (o *CreateIngestionPipeline) GetServiceOk() (*EntityReference, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Service, true
}

// SetService sets field value
func (o *CreateIngestionPipeline) SetService(v EntityReference) {
	o.Service = v
}

// GetSourceConfig returns the SourceConfig field value
func (o *CreateIngestionPipeline) GetSourceConfig() SourceConfig {
	if o == nil {
		var ret SourceConfig
		return ret
	}

	return o.SourceConfig
}

// GetSourceConfigOk returns a tuple with the SourceConfig field value
// and a boolean to check if the value has been set.
func (o *CreateIngestionPipeline) GetSourceConfigOk() (*SourceConfig, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SourceConfig, true
}

// SetSourceConfig sets field value
func (o *CreateIngestionPipeline) SetSourceConfig(v SourceConfig) {
	o.SourceConfig = v
}

func (o CreateIngestionPipeline) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["airflowConfig"] = o.AirflowConfig
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.DisplayName != nil {
		toSerialize["displayName"] = o.DisplayName
	}
	if o.Extension != nil {
		toSerialize["extension"] = o.Extension
	}
	if o.LoggerLevel != nil {
		toSerialize["loggerLevel"] = o.LoggerLevel
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if o.Owner != nil {
		toSerialize["owner"] = o.Owner
	}
	if true {
		toSerialize["pipelineType"] = o.PipelineType
	}
	if true {
		toSerialize["service"] = o.Service
	}
	if true {
		toSerialize["sourceConfig"] = o.SourceConfig
	}
	return json.Marshal(toSerialize)
}

type NullableCreateIngestionPipeline struct {
	value *CreateIngestionPipeline
	isSet bool
}

func (v NullableCreateIngestionPipeline) Get() *CreateIngestionPipeline {
	return v.value
}

func (v *NullableCreateIngestionPipeline) Set(val *CreateIngestionPipeline) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateIngestionPipeline) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateIngestionPipeline) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateIngestionPipeline(val *CreateIngestionPipeline) *NullableCreateIngestionPipeline {
	return &NullableCreateIngestionPipeline{value: val, isSet: true}
}

func (v NullableCreateIngestionPipeline) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateIngestionPipeline) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
