/*
OpenMetadata Apis

# Overview  OpenMetadata supports REST APIs for getting metadata in and out of metadata store. The API resources are grouped under following categories: - **Data assets** - includes resources for data entities, such as `databases`, `tables`, and `topics`. Resources for data assets created from data, such as `dashboards`, `reports`, `metrics`, and `ML Features` are part of this collection. `pipelines`, `notebooks`, etc. that are used for creating data assets are also available as resources as of this collection. - **Teams and Users** - includes `users`, `teams`, a special type of user called `bots` that performs many automated tasks such as ingestion. - **Services** - are services that OpenMetadata integrates with. Currently `databaseService` is the only service under this collection that represents data sources. In the future, services related to Dashboards, Reports, ETL pipelines will be added under this collection. - **Glossary** - OpenMetadata supports hierarchical tags that can be used to build business vocabulary to describe and classify data available under `tags` resource.

API version: 0.11.0
Contact: openmetadata-dev@googlegroups.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// UsageDetails struct for UsageDetails
type UsageDetails struct {
	DailyStats   UsageStats  `json:"dailyStats"`
	Date         string      `json:"date"`
	MonthlyStats *UsageStats `json:"monthlyStats,omitempty"`
	WeeklyStats  *UsageStats `json:"weeklyStats,omitempty"`
}

// NewUsageDetails instantiates a new UsageDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUsageDetails(dailyStats UsageStats, date string) *UsageDetails {
	this := UsageDetails{}
	this.DailyStats = dailyStats
	this.Date = date
	return &this
}

// NewUsageDetailsWithDefaults instantiates a new UsageDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUsageDetailsWithDefaults() *UsageDetails {
	this := UsageDetails{}
	return &this
}

// GetDailyStats returns the DailyStats field value
func (o *UsageDetails) GetDailyStats() UsageStats {
	if o == nil {
		var ret UsageStats
		return ret
	}

	return o.DailyStats
}

// GetDailyStatsOk returns a tuple with the DailyStats field value
// and a boolean to check if the value has been set.
func (o *UsageDetails) GetDailyStatsOk() (*UsageStats, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DailyStats, true
}

// SetDailyStats sets field value
func (o *UsageDetails) SetDailyStats(v UsageStats) {
	o.DailyStats = v
}

// GetDate returns the Date field value
func (o *UsageDetails) GetDate() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Date
}

// GetDateOk returns a tuple with the Date field value
// and a boolean to check if the value has been set.
func (o *UsageDetails) GetDateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Date, true
}

// SetDate sets field value
func (o *UsageDetails) SetDate(v string) {
	o.Date = v
}

// GetMonthlyStats returns the MonthlyStats field value if set, zero value otherwise.
func (o *UsageDetails) GetMonthlyStats() UsageStats {
	if o == nil || o.MonthlyStats == nil {
		var ret UsageStats
		return ret
	}
	return *o.MonthlyStats
}

// GetMonthlyStatsOk returns a tuple with the MonthlyStats field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsageDetails) GetMonthlyStatsOk() (*UsageStats, bool) {
	if o == nil || o.MonthlyStats == nil {
		return nil, false
	}
	return o.MonthlyStats, true
}

// HasMonthlyStats returns a boolean if a field has been set.
func (o *UsageDetails) HasMonthlyStats() bool {
	if o != nil && o.MonthlyStats != nil {
		return true
	}

	return false
}

// SetMonthlyStats gets a reference to the given UsageStats and assigns it to the MonthlyStats field.
func (o *UsageDetails) SetMonthlyStats(v UsageStats) {
	o.MonthlyStats = &v
}

// GetWeeklyStats returns the WeeklyStats field value if set, zero value otherwise.
func (o *UsageDetails) GetWeeklyStats() UsageStats {
	if o == nil || o.WeeklyStats == nil {
		var ret UsageStats
		return ret
	}
	return *o.WeeklyStats
}

// GetWeeklyStatsOk returns a tuple with the WeeklyStats field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsageDetails) GetWeeklyStatsOk() (*UsageStats, bool) {
	if o == nil || o.WeeklyStats == nil {
		return nil, false
	}
	return o.WeeklyStats, true
}

// HasWeeklyStats returns a boolean if a field has been set.
func (o *UsageDetails) HasWeeklyStats() bool {
	if o != nil && o.WeeklyStats != nil {
		return true
	}

	return false
}

// SetWeeklyStats gets a reference to the given UsageStats and assigns it to the WeeklyStats field.
func (o *UsageDetails) SetWeeklyStats(v UsageStats) {
	o.WeeklyStats = &v
}

func (o UsageDetails) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["dailyStats"] = o.DailyStats
	}
	if true {
		toSerialize["date"] = o.Date
	}
	if o.MonthlyStats != nil {
		toSerialize["monthlyStats"] = o.MonthlyStats
	}
	if o.WeeklyStats != nil {
		toSerialize["weeklyStats"] = o.WeeklyStats
	}
	return json.Marshal(toSerialize)
}

type NullableUsageDetails struct {
	value *UsageDetails
	isSet bool
}

func (v NullableUsageDetails) Get() *UsageDetails {
	return v.value
}

func (v *NullableUsageDetails) Set(val *UsageDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableUsageDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableUsageDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUsageDetails(val *UsageDetails) *NullableUsageDetails {
	return &NullableUsageDetails{value: val, isSet: true}
}

func (v NullableUsageDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUsageDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
