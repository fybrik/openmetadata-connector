/*
OpenMetadata Apis

# Overview  OpenMetadata supports REST APIs for getting metadata in and out of metadata store. The API resources are grouped under following categories: - **Data assets** - includes resources for data entities, such as `databases`, `tables`, and `topics`. Resources for data assets created from data, such as `dashboards`, `reports`, `metrics`, and `ML Features` are part of this collection. `pipelines`, `notebooks`, etc. that are used for creating data assets are also available as resources as of this collection. - **Teams and Users** - includes `users`, `teams`, a special type of user called `bots` that performs many automated tasks such as ingestion. - **Services** - are services that OpenMetadata integrates with. Currently `databaseService` is the only service under this collection that represents data sources. In the future, services related to Dashboards, Reports, ETL pipelines will be added under this collection. - **Glossary** - OpenMetadata supports hierarchical tags that can be used to build business vocabulary to describe and classify data available under `tags` resource.

API version: 0.11.0
Contact: openmetadata-dev@googlegroups.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// MlFeatureSource struct for MlFeatureSource
type MlFeatureSource struct {
	DataSource         *EntityReference `json:"dataSource,omitempty"`
	DataType           *string          `json:"dataType,omitempty"`
	Description        *string          `json:"description,omitempty"`
	FullyQualifiedName *string          `json:"fullyQualifiedName,omitempty"`
	Name               *string          `json:"name,omitempty"`
	Tags               []TagLabel       `json:"tags,omitempty"`
}

// NewMlFeatureSource instantiates a new MlFeatureSource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMlFeatureSource() *MlFeatureSource {
	this := MlFeatureSource{}
	return &this
}

// NewMlFeatureSourceWithDefaults instantiates a new MlFeatureSource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMlFeatureSourceWithDefaults() *MlFeatureSource {
	this := MlFeatureSource{}
	return &this
}

// GetDataSource returns the DataSource field value if set, zero value otherwise.
func (o *MlFeatureSource) GetDataSource() EntityReference {
	if o == nil || o.DataSource == nil {
		var ret EntityReference
		return ret
	}
	return *o.DataSource
}

// GetDataSourceOk returns a tuple with the DataSource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MlFeatureSource) GetDataSourceOk() (*EntityReference, bool) {
	if o == nil || o.DataSource == nil {
		return nil, false
	}
	return o.DataSource, true
}

// HasDataSource returns a boolean if a field has been set.
func (o *MlFeatureSource) HasDataSource() bool {
	if o != nil && o.DataSource != nil {
		return true
	}

	return false
}

// SetDataSource gets a reference to the given EntityReference and assigns it to the DataSource field.
func (o *MlFeatureSource) SetDataSource(v EntityReference) {
	o.DataSource = &v
}

// GetDataType returns the DataType field value if set, zero value otherwise.
func (o *MlFeatureSource) GetDataType() string {
	if o == nil || o.DataType == nil {
		var ret string
		return ret
	}
	return *o.DataType
}

// GetDataTypeOk returns a tuple with the DataType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MlFeatureSource) GetDataTypeOk() (*string, bool) {
	if o == nil || o.DataType == nil {
		return nil, false
	}
	return o.DataType, true
}

// HasDataType returns a boolean if a field has been set.
func (o *MlFeatureSource) HasDataType() bool {
	if o != nil && o.DataType != nil {
		return true
	}

	return false
}

// SetDataType gets a reference to the given string and assigns it to the DataType field.
func (o *MlFeatureSource) SetDataType(v string) {
	o.DataType = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *MlFeatureSource) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MlFeatureSource) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *MlFeatureSource) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *MlFeatureSource) SetDescription(v string) {
	o.Description = &v
}

// GetFullyQualifiedName returns the FullyQualifiedName field value if set, zero value otherwise.
func (o *MlFeatureSource) GetFullyQualifiedName() string {
	if o == nil || o.FullyQualifiedName == nil {
		var ret string
		return ret
	}
	return *o.FullyQualifiedName
}

// GetFullyQualifiedNameOk returns a tuple with the FullyQualifiedName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MlFeatureSource) GetFullyQualifiedNameOk() (*string, bool) {
	if o == nil || o.FullyQualifiedName == nil {
		return nil, false
	}
	return o.FullyQualifiedName, true
}

// HasFullyQualifiedName returns a boolean if a field has been set.
func (o *MlFeatureSource) HasFullyQualifiedName() bool {
	if o != nil && o.FullyQualifiedName != nil {
		return true
	}

	return false
}

// SetFullyQualifiedName gets a reference to the given string and assigns it to the FullyQualifiedName field.
func (o *MlFeatureSource) SetFullyQualifiedName(v string) {
	o.FullyQualifiedName = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *MlFeatureSource) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MlFeatureSource) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *MlFeatureSource) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *MlFeatureSource) SetName(v string) {
	o.Name = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *MlFeatureSource) GetTags() []TagLabel {
	if o == nil || o.Tags == nil {
		var ret []TagLabel
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MlFeatureSource) GetTagsOk() ([]TagLabel, bool) {
	if o == nil || o.Tags == nil {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *MlFeatureSource) HasTags() bool {
	if o != nil && o.Tags != nil {
		return true
	}

	return false
}

// SetTags gets a reference to the given []TagLabel and assigns it to the Tags field.
func (o *MlFeatureSource) SetTags(v []TagLabel) {
	o.Tags = v
}

func (o MlFeatureSource) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DataSource != nil {
		toSerialize["dataSource"] = o.DataSource
	}
	if o.DataType != nil {
		toSerialize["dataType"] = o.DataType
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.FullyQualifiedName != nil {
		toSerialize["fullyQualifiedName"] = o.FullyQualifiedName
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Tags != nil {
		toSerialize["tags"] = o.Tags
	}
	return json.Marshal(toSerialize)
}

type NullableMlFeatureSource struct {
	value *MlFeatureSource
	isSet bool
}

func (v NullableMlFeatureSource) Get() *MlFeatureSource {
	return v.value
}

func (v *NullableMlFeatureSource) Set(val *MlFeatureSource) {
	v.value = val
	v.isSet = true
}

func (v NullableMlFeatureSource) IsSet() bool {
	return v.isSet
}

func (v *NullableMlFeatureSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMlFeatureSource(val *MlFeatureSource) *NullableMlFeatureSource {
	return &NullableMlFeatureSource{value: val, isSet: true}
}

func (v NullableMlFeatureSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMlFeatureSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
