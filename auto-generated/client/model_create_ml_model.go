/*
OpenMetadata Apis

# Overview  OpenMetadata supports REST APIs for getting metadata in and out of metadata store. The API resources are grouped under following categories: - **Data assets** - includes resources for data entities, such as `databases`, `tables`, and `topics`. Resources for data assets created from data, such as `dashboards`, `reports`, `metrics`, and `ML Features` are part of this collection. `pipelines`, `notebooks`, etc. that are used for creating data assets are also available as resources as of this collection. - **Teams and Users** - includes `users`, `teams`, a special type of user called `bots` that performs many automated tasks such as ingestion. - **Services** - are services that OpenMetadata integrates with. Currently `databaseService` is the only service under this collection that represents data sources. In the future, services related to Dashboards, Reports, ETL pipelines will be added under this collection. - **Glossary** - OpenMetadata supports hierarchical tags that can be used to build business vocabulary to describe and classify data available under `tags` resource.

API version: 0.11.0
Contact: openmetadata-dev@googlegroups.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// CreateMlModel struct for CreateMlModel
type CreateMlModel struct {
	Algorithm         string                 `json:"algorithm"`
	Dashboard         *EntityReference       `json:"dashboard,omitempty"`
	Description       *string                `json:"description,omitempty"`
	DisplayName       *string                `json:"displayName,omitempty"`
	Extension         map[string]interface{} `json:"extension,omitempty"`
	MlFeatures        []MlFeature            `json:"mlFeatures,omitempty"`
	MlHyperParameters []MlHyperParameter     `json:"mlHyperParameters,omitempty"`
	MlStore           *MlStore               `json:"mlStore,omitempty"`
	Name              string                 `json:"name"`
	Owner             *EntityReference       `json:"owner,omitempty"`
	Server            *string                `json:"server,omitempty"`
	Service           EntityReference        `json:"service"`
	Tags              []TagLabel             `json:"tags,omitempty"`
	Target            *string                `json:"target,omitempty"`
}

// NewCreateMlModel instantiates a new CreateMlModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateMlModel(algorithm string, name string, service EntityReference) *CreateMlModel {
	this := CreateMlModel{}
	this.Algorithm = algorithm
	this.Name = name
	this.Service = service
	return &this
}

// NewCreateMlModelWithDefaults instantiates a new CreateMlModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateMlModelWithDefaults() *CreateMlModel {
	this := CreateMlModel{}
	return &this
}

// GetAlgorithm returns the Algorithm field value
func (o *CreateMlModel) GetAlgorithm() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Algorithm
}

// GetAlgorithmOk returns a tuple with the Algorithm field value
// and a boolean to check if the value has been set.
func (o *CreateMlModel) GetAlgorithmOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Algorithm, true
}

// SetAlgorithm sets field value
func (o *CreateMlModel) SetAlgorithm(v string) {
	o.Algorithm = v
}

// GetDashboard returns the Dashboard field value if set, zero value otherwise.
func (o *CreateMlModel) GetDashboard() EntityReference {
	if o == nil || o.Dashboard == nil {
		var ret EntityReference
		return ret
	}
	return *o.Dashboard
}

// GetDashboardOk returns a tuple with the Dashboard field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateMlModel) GetDashboardOk() (*EntityReference, bool) {
	if o == nil || o.Dashboard == nil {
		return nil, false
	}
	return o.Dashboard, true
}

// HasDashboard returns a boolean if a field has been set.
func (o *CreateMlModel) HasDashboard() bool {
	if o != nil && o.Dashboard != nil {
		return true
	}

	return false
}

// SetDashboard gets a reference to the given EntityReference and assigns it to the Dashboard field.
func (o *CreateMlModel) SetDashboard(v EntityReference) {
	o.Dashboard = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *CreateMlModel) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateMlModel) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *CreateMlModel) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *CreateMlModel) SetDescription(v string) {
	o.Description = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *CreateMlModel) GetDisplayName() string {
	if o == nil || o.DisplayName == nil {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateMlModel) GetDisplayNameOk() (*string, bool) {
	if o == nil || o.DisplayName == nil {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *CreateMlModel) HasDisplayName() bool {
	if o != nil && o.DisplayName != nil {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *CreateMlModel) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetExtension returns the Extension field value if set, zero value otherwise.
func (o *CreateMlModel) GetExtension() map[string]interface{} {
	if o == nil || o.Extension == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateMlModel) GetExtensionOk() (map[string]interface{}, bool) {
	if o == nil || o.Extension == nil {
		return nil, false
	}
	return o.Extension, true
}

// HasExtension returns a boolean if a field has been set.
func (o *CreateMlModel) HasExtension() bool {
	if o != nil && o.Extension != nil {
		return true
	}

	return false
}

// SetExtension gets a reference to the given map[string]interface{} and assigns it to the Extension field.
func (o *CreateMlModel) SetExtension(v map[string]interface{}) {
	o.Extension = v
}

// GetMlFeatures returns the MlFeatures field value if set, zero value otherwise.
func (o *CreateMlModel) GetMlFeatures() []MlFeature {
	if o == nil || o.MlFeatures == nil {
		var ret []MlFeature
		return ret
	}
	return o.MlFeatures
}

// GetMlFeaturesOk returns a tuple with the MlFeatures field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateMlModel) GetMlFeaturesOk() ([]MlFeature, bool) {
	if o == nil || o.MlFeatures == nil {
		return nil, false
	}
	return o.MlFeatures, true
}

// HasMlFeatures returns a boolean if a field has been set.
func (o *CreateMlModel) HasMlFeatures() bool {
	if o != nil && o.MlFeatures != nil {
		return true
	}

	return false
}

// SetMlFeatures gets a reference to the given []MlFeature and assigns it to the MlFeatures field.
func (o *CreateMlModel) SetMlFeatures(v []MlFeature) {
	o.MlFeatures = v
}

// GetMlHyperParameters returns the MlHyperParameters field value if set, zero value otherwise.
func (o *CreateMlModel) GetMlHyperParameters() []MlHyperParameter {
	if o == nil || o.MlHyperParameters == nil {
		var ret []MlHyperParameter
		return ret
	}
	return o.MlHyperParameters
}

// GetMlHyperParametersOk returns a tuple with the MlHyperParameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateMlModel) GetMlHyperParametersOk() ([]MlHyperParameter, bool) {
	if o == nil || o.MlHyperParameters == nil {
		return nil, false
	}
	return o.MlHyperParameters, true
}

// HasMlHyperParameters returns a boolean if a field has been set.
func (o *CreateMlModel) HasMlHyperParameters() bool {
	if o != nil && o.MlHyperParameters != nil {
		return true
	}

	return false
}

// SetMlHyperParameters gets a reference to the given []MlHyperParameter and assigns it to the MlHyperParameters field.
func (o *CreateMlModel) SetMlHyperParameters(v []MlHyperParameter) {
	o.MlHyperParameters = v
}

// GetMlStore returns the MlStore field value if set, zero value otherwise.
func (o *CreateMlModel) GetMlStore() MlStore {
	if o == nil || o.MlStore == nil {
		var ret MlStore
		return ret
	}
	return *o.MlStore
}

// GetMlStoreOk returns a tuple with the MlStore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateMlModel) GetMlStoreOk() (*MlStore, bool) {
	if o == nil || o.MlStore == nil {
		return nil, false
	}
	return o.MlStore, true
}

// HasMlStore returns a boolean if a field has been set.
func (o *CreateMlModel) HasMlStore() bool {
	if o != nil && o.MlStore != nil {
		return true
	}

	return false
}

// SetMlStore gets a reference to the given MlStore and assigns it to the MlStore field.
func (o *CreateMlModel) SetMlStore(v MlStore) {
	o.MlStore = &v
}

// GetName returns the Name field value
func (o *CreateMlModel) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CreateMlModel) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *CreateMlModel) SetName(v string) {
	o.Name = v
}

// GetOwner returns the Owner field value if set, zero value otherwise.
func (o *CreateMlModel) GetOwner() EntityReference {
	if o == nil || o.Owner == nil {
		var ret EntityReference
		return ret
	}
	return *o.Owner
}

// GetOwnerOk returns a tuple with the Owner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateMlModel) GetOwnerOk() (*EntityReference, bool) {
	if o == nil || o.Owner == nil {
		return nil, false
	}
	return o.Owner, true
}

// HasOwner returns a boolean if a field has been set.
func (o *CreateMlModel) HasOwner() bool {
	if o != nil && o.Owner != nil {
		return true
	}

	return false
}

// SetOwner gets a reference to the given EntityReference and assigns it to the Owner field.
func (o *CreateMlModel) SetOwner(v EntityReference) {
	o.Owner = &v
}

// GetServer returns the Server field value if set, zero value otherwise.
func (o *CreateMlModel) GetServer() string {
	if o == nil || o.Server == nil {
		var ret string
		return ret
	}
	return *o.Server
}

// GetServerOk returns a tuple with the Server field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateMlModel) GetServerOk() (*string, bool) {
	if o == nil || o.Server == nil {
		return nil, false
	}
	return o.Server, true
}

// HasServer returns a boolean if a field has been set.
func (o *CreateMlModel) HasServer() bool {
	if o != nil && o.Server != nil {
		return true
	}

	return false
}

// SetServer gets a reference to the given string and assigns it to the Server field.
func (o *CreateMlModel) SetServer(v string) {
	o.Server = &v
}

// GetService returns the Service field value
func (o *CreateMlModel) GetService() EntityReference {
	if o == nil {
		var ret EntityReference
		return ret
	}

	return o.Service
}

// GetServiceOk returns a tuple with the Service field value
// and a boolean to check if the value has been set.
func (o *CreateMlModel) GetServiceOk() (*EntityReference, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Service, true
}

// SetService sets field value
func (o *CreateMlModel) SetService(v EntityReference) {
	o.Service = v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *CreateMlModel) GetTags() []TagLabel {
	if o == nil || o.Tags == nil {
		var ret []TagLabel
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateMlModel) GetTagsOk() ([]TagLabel, bool) {
	if o == nil || o.Tags == nil {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *CreateMlModel) HasTags() bool {
	if o != nil && o.Tags != nil {
		return true
	}

	return false
}

// SetTags gets a reference to the given []TagLabel and assigns it to the Tags field.
func (o *CreateMlModel) SetTags(v []TagLabel) {
	o.Tags = v
}

// GetTarget returns the Target field value if set, zero value otherwise.
func (o *CreateMlModel) GetTarget() string {
	if o == nil || o.Target == nil {
		var ret string
		return ret
	}
	return *o.Target
}

// GetTargetOk returns a tuple with the Target field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateMlModel) GetTargetOk() (*string, bool) {
	if o == nil || o.Target == nil {
		return nil, false
	}
	return o.Target, true
}

// HasTarget returns a boolean if a field has been set.
func (o *CreateMlModel) HasTarget() bool {
	if o != nil && o.Target != nil {
		return true
	}

	return false
}

// SetTarget gets a reference to the given string and assigns it to the Target field.
func (o *CreateMlModel) SetTarget(v string) {
	o.Target = &v
}

func (o CreateMlModel) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["algorithm"] = o.Algorithm
	}
	if o.Dashboard != nil {
		toSerialize["dashboard"] = o.Dashboard
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.DisplayName != nil {
		toSerialize["displayName"] = o.DisplayName
	}
	if o.Extension != nil {
		toSerialize["extension"] = o.Extension
	}
	if o.MlFeatures != nil {
		toSerialize["mlFeatures"] = o.MlFeatures
	}
	if o.MlHyperParameters != nil {
		toSerialize["mlHyperParameters"] = o.MlHyperParameters
	}
	if o.MlStore != nil {
		toSerialize["mlStore"] = o.MlStore
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if o.Owner != nil {
		toSerialize["owner"] = o.Owner
	}
	if o.Server != nil {
		toSerialize["server"] = o.Server
	}
	if true {
		toSerialize["service"] = o.Service
	}
	if o.Tags != nil {
		toSerialize["tags"] = o.Tags
	}
	if o.Target != nil {
		toSerialize["target"] = o.Target
	}
	return json.Marshal(toSerialize)
}

type NullableCreateMlModel struct {
	value *CreateMlModel
	isSet bool
}

func (v NullableCreateMlModel) Get() *CreateMlModel {
	return v.value
}

func (v *NullableCreateMlModel) Set(val *CreateMlModel) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateMlModel) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateMlModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateMlModel(val *CreateMlModel) *NullableCreateMlModel {
	return &NullableCreateMlModel{value: val, isSet: true}
}

func (v NullableCreateMlModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateMlModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
