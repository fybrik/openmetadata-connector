/*
OpenMetadata Apis

# Overview  OpenMetadata supports REST APIs for getting metadata in and out of metadata store. The API resources are grouped under following categories: - **Data assets** - includes resources for data entities, such as `databases`, `tables`, and `topics`. Resources for data assets created from data, such as `dashboards`, `reports`, `metrics`, and `ML Features` are part of this collection. `pipelines`, `notebooks`, etc. that are used for creating data assets are also available as resources as of this collection. - **Teams and Users** - includes `users`, `teams`, a special type of user called `bots` that performs many automated tasks such as ingestion. - **Services** - are services that OpenMetadata integrates with. Currently `databaseService` is the only service under this collection that represents data sources. In the future, services related to Dashboards, Reports, ETL pipelines will be added under this collection. - **Glossary** - OpenMetadata supports hierarchical tags that can be used to build business vocabulary to describe and classify data available under `tags` resource.

API version: 0.11.0
Contact: openmetadata-dev@googlegroups.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// EntityHistory struct for EntityHistory
type EntityHistory struct {
	EntityType string                   `json:"entityType"`
	Versions   []map[string]interface{} `json:"versions"`
}

// NewEntityHistory instantiates a new EntityHistory object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEntityHistory(entityType string, versions []map[string]interface{}) *EntityHistory {
	this := EntityHistory{}
	this.EntityType = entityType
	this.Versions = versions
	return &this
}

// NewEntityHistoryWithDefaults instantiates a new EntityHistory object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEntityHistoryWithDefaults() *EntityHistory {
	this := EntityHistory{}
	return &this
}

// GetEntityType returns the EntityType field value
func (o *EntityHistory) GetEntityType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EntityType
}

// GetEntityTypeOk returns a tuple with the EntityType field value
// and a boolean to check if the value has been set.
func (o *EntityHistory) GetEntityTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EntityType, true
}

// SetEntityType sets field value
func (o *EntityHistory) SetEntityType(v string) {
	o.EntityType = v
}

// GetVersions returns the Versions field value
func (o *EntityHistory) GetVersions() []map[string]interface{} {
	if o == nil {
		var ret []map[string]interface{}
		return ret
	}

	return o.Versions
}

// GetVersionsOk returns a tuple with the Versions field value
// and a boolean to check if the value has been set.
func (o *EntityHistory) GetVersionsOk() ([]map[string]interface{}, bool) {
	if o == nil {
		return nil, false
	}
	return o.Versions, true
}

// SetVersions sets field value
func (o *EntityHistory) SetVersions(v []map[string]interface{}) {
	o.Versions = v
}

func (o EntityHistory) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["entityType"] = o.EntityType
	}
	if true {
		toSerialize["versions"] = o.Versions
	}
	return json.Marshal(toSerialize)
}

type NullableEntityHistory struct {
	value *EntityHistory
	isSet bool
}

func (v NullableEntityHistory) Get() *EntityHistory {
	return v.value
}

func (v *NullableEntityHistory) Set(val *EntityHistory) {
	v.value = val
	v.isSet = true
}

func (v NullableEntityHistory) IsSet() bool {
	return v.isSet
}

func (v *NullableEntityHistory) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEntityHistory(val *EntityHistory) *NullableEntityHistory {
	return &NullableEntityHistory{value: val, isSet: true}
}

func (v NullableEntityHistory) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEntityHistory) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
