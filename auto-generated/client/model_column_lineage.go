/*
OpenMetadata Apis

# Overview  OpenMetadata supports REST APIs for getting metadata in and out of metadata store. The API resources are grouped under following categories: - **Data assets** - includes resources for data entities, such as `databases`, `tables`, and `topics`. Resources for data assets created from data, such as `dashboards`, `reports`, `metrics`, and `ML Features` are part of this collection. `pipelines`, `notebooks`, etc. that are used for creating data assets are also available as resources as of this collection. - **Teams and Users** - includes `users`, `teams`, a special type of user called `bots` that performs many automated tasks such as ingestion. - **Services** - are services that OpenMetadata integrates with. Currently `databaseService` is the only service under this collection that represents data sources. In the future, services related to Dashboards, Reports, ETL pipelines will be added under this collection. - **Glossary** - OpenMetadata supports hierarchical tags that can be used to build business vocabulary to describe and classify data available under `tags` resource.

API version: 0.11.0
Contact: openmetadata-dev@googlegroups.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ColumnLineage struct for ColumnLineage
type ColumnLineage struct {
	FromColumns []string `json:"fromColumns,omitempty"`
	Function    *string  `json:"function,omitempty"`
	ToColumn    *string  `json:"toColumn,omitempty"`
}

// NewColumnLineage instantiates a new ColumnLineage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewColumnLineage() *ColumnLineage {
	this := ColumnLineage{}
	return &this
}

// NewColumnLineageWithDefaults instantiates a new ColumnLineage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewColumnLineageWithDefaults() *ColumnLineage {
	this := ColumnLineage{}
	return &this
}

// GetFromColumns returns the FromColumns field value if set, zero value otherwise.
func (o *ColumnLineage) GetFromColumns() []string {
	if o == nil || o.FromColumns == nil {
		var ret []string
		return ret
	}
	return o.FromColumns
}

// GetFromColumnsOk returns a tuple with the FromColumns field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ColumnLineage) GetFromColumnsOk() ([]string, bool) {
	if o == nil || o.FromColumns == nil {
		return nil, false
	}
	return o.FromColumns, true
}

// HasFromColumns returns a boolean if a field has been set.
func (o *ColumnLineage) HasFromColumns() bool {
	if o != nil && o.FromColumns != nil {
		return true
	}

	return false
}

// SetFromColumns gets a reference to the given []string and assigns it to the FromColumns field.
func (o *ColumnLineage) SetFromColumns(v []string) {
	o.FromColumns = v
}

// GetFunction returns the Function field value if set, zero value otherwise.
func (o *ColumnLineage) GetFunction() string {
	if o == nil || o.Function == nil {
		var ret string
		return ret
	}
	return *o.Function
}

// GetFunctionOk returns a tuple with the Function field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ColumnLineage) GetFunctionOk() (*string, bool) {
	if o == nil || o.Function == nil {
		return nil, false
	}
	return o.Function, true
}

// HasFunction returns a boolean if a field has been set.
func (o *ColumnLineage) HasFunction() bool {
	if o != nil && o.Function != nil {
		return true
	}

	return false
}

// SetFunction gets a reference to the given string and assigns it to the Function field.
func (o *ColumnLineage) SetFunction(v string) {
	o.Function = &v
}

// GetToColumn returns the ToColumn field value if set, zero value otherwise.
func (o *ColumnLineage) GetToColumn() string {
	if o == nil || o.ToColumn == nil {
		var ret string
		return ret
	}
	return *o.ToColumn
}

// GetToColumnOk returns a tuple with the ToColumn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ColumnLineage) GetToColumnOk() (*string, bool) {
	if o == nil || o.ToColumn == nil {
		return nil, false
	}
	return o.ToColumn, true
}

// HasToColumn returns a boolean if a field has been set.
func (o *ColumnLineage) HasToColumn() bool {
	if o != nil && o.ToColumn != nil {
		return true
	}

	return false
}

// SetToColumn gets a reference to the given string and assigns it to the ToColumn field.
func (o *ColumnLineage) SetToColumn(v string) {
	o.ToColumn = &v
}

func (o ColumnLineage) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.FromColumns != nil {
		toSerialize["fromColumns"] = o.FromColumns
	}
	if o.Function != nil {
		toSerialize["function"] = o.Function
	}
	if o.ToColumn != nil {
		toSerialize["toColumn"] = o.ToColumn
	}
	return json.Marshal(toSerialize)
}

type NullableColumnLineage struct {
	value *ColumnLineage
	isSet bool
}

func (v NullableColumnLineage) Get() *ColumnLineage {
	return v.value
}

func (v *NullableColumnLineage) Set(val *ColumnLineage) {
	v.value = val
	v.isSet = true
}

func (v NullableColumnLineage) IsSet() bool {
	return v.isSet
}

func (v *NullableColumnLineage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableColumnLineage(val *ColumnLineage) *NullableColumnLineage {
	return &NullableColumnLineage{value: val, isSet: true}
}

func (v NullableColumnLineage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableColumnLineage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
