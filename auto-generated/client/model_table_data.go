/*
OpenMetadata Apis

# Overview  OpenMetadata supports REST APIs for getting metadata in and out of metadata store. The API resources are grouped under following categories: - **Data assets** - includes resources for data entities, such as `databases`, `tables`, and `topics`. Resources for data assets created from data, such as `dashboards`, `reports`, `metrics`, and `ML Features` are part of this collection. `pipelines`, `notebooks`, etc. that are used for creating data assets are also available as resources as of this collection. - **Teams and Users** - includes `users`, `teams`, a special type of user called `bots` that performs many automated tasks such as ingestion. - **Services** - are services that OpenMetadata integrates with. Currently `databaseService` is the only service under this collection that represents data sources. In the future, services related to Dashboards, Reports, ETL pipelines will be added under this collection. - **Glossary** - OpenMetadata supports hierarchical tags that can be used to build business vocabulary to describe and classify data available under `tags` resource.

API version: 0.11.0
Contact: openmetadata-dev@googlegroups.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// TableData struct for TableData
type TableData struct {
	Columns []string                   `json:"columns,omitempty"`
	Rows    [][]map[string]interface{} `json:"rows,omitempty"`
}

// NewTableData instantiates a new TableData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTableData() *TableData {
	this := TableData{}
	return &this
}

// NewTableDataWithDefaults instantiates a new TableData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTableDataWithDefaults() *TableData {
	this := TableData{}
	return &this
}

// GetColumns returns the Columns field value if set, zero value otherwise.
func (o *TableData) GetColumns() []string {
	if o == nil || o.Columns == nil {
		var ret []string
		return ret
	}
	return o.Columns
}

// GetColumnsOk returns a tuple with the Columns field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TableData) GetColumnsOk() ([]string, bool) {
	if o == nil || o.Columns == nil {
		return nil, false
	}
	return o.Columns, true
}

// HasColumns returns a boolean if a field has been set.
func (o *TableData) HasColumns() bool {
	if o != nil && o.Columns != nil {
		return true
	}

	return false
}

// SetColumns gets a reference to the given []string and assigns it to the Columns field.
func (o *TableData) SetColumns(v []string) {
	o.Columns = v
}

// GetRows returns the Rows field value if set, zero value otherwise.
func (o *TableData) GetRows() [][]map[string]interface{} {
	if o == nil || o.Rows == nil {
		var ret [][]map[string]interface{}
		return ret
	}
	return o.Rows
}

// GetRowsOk returns a tuple with the Rows field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TableData) GetRowsOk() ([][]map[string]interface{}, bool) {
	if o == nil || o.Rows == nil {
		return nil, false
	}
	return o.Rows, true
}

// HasRows returns a boolean if a field has been set.
func (o *TableData) HasRows() bool {
	if o != nil && o.Rows != nil {
		return true
	}

	return false
}

// SetRows gets a reference to the given [][]map[string]interface{} and assigns it to the Rows field.
func (o *TableData) SetRows(v [][]map[string]interface{}) {
	o.Rows = v
}

func (o TableData) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Columns != nil {
		toSerialize["columns"] = o.Columns
	}
	if o.Rows != nil {
		toSerialize["rows"] = o.Rows
	}
	return json.Marshal(toSerialize)
}

type NullableTableData struct {
	value *TableData
	isSet bool
}

func (v NullableTableData) Get() *TableData {
	return v.value
}

func (v *NullableTableData) Set(val *TableData) {
	v.value = val
	v.isSet = true
}

func (v NullableTableData) IsSet() bool {
	return v.isSet
}

func (v *NullableTableData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTableData(val *TableData) *NullableTableData {
	return &NullableTableData{value: val, isSet: true}
}

func (v NullableTableData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTableData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
