/*
OpenMetadata Apis

# Overview  OpenMetadata supports REST APIs for getting metadata in and out of metadata store. The API resources are grouped under following categories: - **Data assets** - includes resources for data entities, such as `databases`, `tables`, and `topics`. Resources for data assets created from data, such as `dashboards`, `reports`, `metrics`, and `ML Features` are part of this collection. `pipelines`, `notebooks`, etc. that are used for creating data assets are also available as resources as of this collection. - **Teams and Users** - includes `users`, `teams`, a special type of user called `bots` that performs many automated tasks such as ingestion. - **Services** - are services that OpenMetadata integrates with. Currently `databaseService` is the only service under this collection that represents data sources. In the future, services related to Dashboards, Reports, ETL pipelines will be added under this collection. - **Glossary** - OpenMetadata supports hierarchical tags that can be used to build business vocabulary to describe and classify data available under `tags` resource.

API version: 0.11.0
Contact: openmetadata-dev@googlegroups.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Histogram struct for Histogram
type Histogram struct {
	Boundaries  []map[string]interface{} `json:"boundaries,omitempty"`
	Frequencies []map[string]interface{} `json:"frequencies,omitempty"`
}

// NewHistogram instantiates a new Histogram object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHistogram() *Histogram {
	this := Histogram{}
	return &this
}

// NewHistogramWithDefaults instantiates a new Histogram object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHistogramWithDefaults() *Histogram {
	this := Histogram{}
	return &this
}

// GetBoundaries returns the Boundaries field value if set, zero value otherwise.
func (o *Histogram) GetBoundaries() []map[string]interface{} {
	if o == nil || o.Boundaries == nil {
		var ret []map[string]interface{}
		return ret
	}
	return o.Boundaries
}

// GetBoundariesOk returns a tuple with the Boundaries field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Histogram) GetBoundariesOk() ([]map[string]interface{}, bool) {
	if o == nil || o.Boundaries == nil {
		return nil, false
	}
	return o.Boundaries, true
}

// HasBoundaries returns a boolean if a field has been set.
func (o *Histogram) HasBoundaries() bool {
	if o != nil && o.Boundaries != nil {
		return true
	}

	return false
}

// SetBoundaries gets a reference to the given []map[string]interface{} and assigns it to the Boundaries field.
func (o *Histogram) SetBoundaries(v []map[string]interface{}) {
	o.Boundaries = v
}

// GetFrequencies returns the Frequencies field value if set, zero value otherwise.
func (o *Histogram) GetFrequencies() []map[string]interface{} {
	if o == nil || o.Frequencies == nil {
		var ret []map[string]interface{}
		return ret
	}
	return o.Frequencies
}

// GetFrequenciesOk returns a tuple with the Frequencies field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Histogram) GetFrequenciesOk() ([]map[string]interface{}, bool) {
	if o == nil || o.Frequencies == nil {
		return nil, false
	}
	return o.Frequencies, true
}

// HasFrequencies returns a boolean if a field has been set.
func (o *Histogram) HasFrequencies() bool {
	if o != nil && o.Frequencies != nil {
		return true
	}

	return false
}

// SetFrequencies gets a reference to the given []map[string]interface{} and assigns it to the Frequencies field.
func (o *Histogram) SetFrequencies(v []map[string]interface{}) {
	o.Frequencies = v
}

func (o Histogram) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Boundaries != nil {
		toSerialize["boundaries"] = o.Boundaries
	}
	if o.Frequencies != nil {
		toSerialize["frequencies"] = o.Frequencies
	}
	return json.Marshal(toSerialize)
}

type NullableHistogram struct {
	value *Histogram
	isSet bool
}

func (v NullableHistogram) Get() *Histogram {
	return v.value
}

func (v *NullableHistogram) Set(val *Histogram) {
	v.value = val
	v.isSet = true
}

func (v NullableHistogram) IsSet() bool {
	return v.isSet
}

func (v *NullableHistogram) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHistogram(val *Histogram) *NullableHistogram {
	return &NullableHistogram{value: val, isSet: true}
}

func (v NullableHistogram) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHistogram) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
