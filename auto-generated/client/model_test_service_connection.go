/*
OpenMetadata Apis

# Overview  OpenMetadata supports REST APIs for getting metadata in and out of metadata store. The API resources are grouped under following categories: - **Data assets** - includes resources for data entities, such as `databases`, `tables`, and `topics`. Resources for data assets created from data, such as `dashboards`, `reports`, `metrics`, and `ML Features` are part of this collection. `pipelines`, `notebooks`, etc. that are used for creating data assets are also available as resources as of this collection. - **Teams and Users** - includes `users`, `teams`, a special type of user called `bots` that performs many automated tasks such as ingestion. - **Services** - are services that OpenMetadata integrates with. Currently `databaseService` is the only service under this collection that represents data sources. In the future, services related to Dashboards, Reports, ETL pipelines will be added under this collection. - **Glossary** - OpenMetadata supports hierarchical tags that can be used to build business vocabulary to describe and classify data available under `tags` resource.

API version: 0.11.0
Contact: openmetadata-dev@googlegroups.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// TestServiceConnection struct for TestServiceConnection
type TestServiceConnection struct {
	Connection     map[string]interface{} `json:"connection,omitempty"`
	ConnectionType *string                `json:"connectionType,omitempty"`
}

// NewTestServiceConnection instantiates a new TestServiceConnection object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTestServiceConnection() *TestServiceConnection {
	this := TestServiceConnection{}
	return &this
}

// NewTestServiceConnectionWithDefaults instantiates a new TestServiceConnection object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTestServiceConnectionWithDefaults() *TestServiceConnection {
	this := TestServiceConnection{}
	return &this
}

// GetConnection returns the Connection field value if set, zero value otherwise.
func (o *TestServiceConnection) GetConnection() map[string]interface{} {
	if o == nil || o.Connection == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.Connection
}

// GetConnectionOk returns a tuple with the Connection field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestServiceConnection) GetConnectionOk() (map[string]interface{}, bool) {
	if o == nil || o.Connection == nil {
		return nil, false
	}
	return o.Connection, true
}

// HasConnection returns a boolean if a field has been set.
func (o *TestServiceConnection) HasConnection() bool {
	if o != nil && o.Connection != nil {
		return true
	}

	return false
}

// SetConnection gets a reference to the given map[string]interface{} and assigns it to the Connection field.
func (o *TestServiceConnection) SetConnection(v map[string]interface{}) {
	o.Connection = v
}

// GetConnectionType returns the ConnectionType field value if set, zero value otherwise.
func (o *TestServiceConnection) GetConnectionType() string {
	if o == nil || o.ConnectionType == nil {
		var ret string
		return ret
	}
	return *o.ConnectionType
}

// GetConnectionTypeOk returns a tuple with the ConnectionType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestServiceConnection) GetConnectionTypeOk() (*string, bool) {
	if o == nil || o.ConnectionType == nil {
		return nil, false
	}
	return o.ConnectionType, true
}

// HasConnectionType returns a boolean if a field has been set.
func (o *TestServiceConnection) HasConnectionType() bool {
	if o != nil && o.ConnectionType != nil {
		return true
	}

	return false
}

// SetConnectionType gets a reference to the given string and assigns it to the ConnectionType field.
func (o *TestServiceConnection) SetConnectionType(v string) {
	o.ConnectionType = &v
}

func (o TestServiceConnection) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Connection != nil {
		toSerialize["connection"] = o.Connection
	}
	if o.ConnectionType != nil {
		toSerialize["connectionType"] = o.ConnectionType
	}
	return json.Marshal(toSerialize)
}

type NullableTestServiceConnection struct {
	value *TestServiceConnection
	isSet bool
}

func (v NullableTestServiceConnection) Get() *TestServiceConnection {
	return v.value
}

func (v *NullableTestServiceConnection) Set(val *TestServiceConnection) {
	v.value = val
	v.isSet = true
}

func (v NullableTestServiceConnection) IsSet() bool {
	return v.isSet
}

func (v *NullableTestServiceConnection) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTestServiceConnection(val *TestServiceConnection) *NullableTestServiceConnection {
	return &NullableTestServiceConnection{value: val, isSet: true}
}

func (v NullableTestServiceConnection) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTestServiceConnection) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
