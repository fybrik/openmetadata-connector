/*
OpenMetadata Apis

# Overview  OpenMetadata supports REST APIs for getting metadata in and out of metadata store. The API resources are grouped under following categories: - **Data assets** - includes resources for data entities, such as `databases`, `tables`, and `topics`. Resources for data assets created from data, such as `dashboards`, `reports`, `metrics`, and `ML Features` are part of this collection. `pipelines`, `notebooks`, etc. that are used for creating data assets are also available as resources as of this collection. - **Teams and Users** - includes `users`, `teams`, a special type of user called `bots` that performs many automated tasks such as ingestion. - **Services** - are services that OpenMetadata integrates with. Currently `databaseService` is the only service under this collection that represents data sources. In the future, services related to Dashboards, Reports, ETL pipelines will be added under this collection. - **Glossary** - OpenMetadata supports hierarchical tags that can be used to build business vocabulary to describe and classify data available under `tags` resource.

API version: 0.11.0
Contact: openmetadata-dev@googlegroups.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// CustomProperty struct for CustomProperty
type CustomProperty struct {
	Description  string          `json:"description"`
	Name         string          `json:"name"`
	PropertyType EntityReference `json:"propertyType"`
}

// NewCustomProperty instantiates a new CustomProperty object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCustomProperty(description string, name string, propertyType EntityReference) *CustomProperty {
	this := CustomProperty{}
	this.Description = description
	this.Name = name
	this.PropertyType = propertyType
	return &this
}

// NewCustomPropertyWithDefaults instantiates a new CustomProperty object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCustomPropertyWithDefaults() *CustomProperty {
	this := CustomProperty{}
	return &this
}

// GetDescription returns the Description field value
func (o *CustomProperty) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *CustomProperty) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *CustomProperty) SetDescription(v string) {
	o.Description = v
}

// GetName returns the Name field value
func (o *CustomProperty) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CustomProperty) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *CustomProperty) SetName(v string) {
	o.Name = v
}

// GetPropertyType returns the PropertyType field value
func (o *CustomProperty) GetPropertyType() EntityReference {
	if o == nil {
		var ret EntityReference
		return ret
	}

	return o.PropertyType
}

// GetPropertyTypeOk returns a tuple with the PropertyType field value
// and a boolean to check if the value has been set.
func (o *CustomProperty) GetPropertyTypeOk() (*EntityReference, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PropertyType, true
}

// SetPropertyType sets field value
func (o *CustomProperty) SetPropertyType(v EntityReference) {
	o.PropertyType = v
}

func (o CustomProperty) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["description"] = o.Description
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["propertyType"] = o.PropertyType
	}
	return json.Marshal(toSerialize)
}

type NullableCustomProperty struct {
	value *CustomProperty
	isSet bool
}

func (v NullableCustomProperty) Get() *CustomProperty {
	return v.value
}

func (v *NullableCustomProperty) Set(val *CustomProperty) {
	v.value = val
	v.isSet = true
}

func (v NullableCustomProperty) IsSet() bool {
	return v.isSet
}

func (v *NullableCustomProperty) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCustomProperty(val *CustomProperty) *NullableCustomProperty {
	return &NullableCustomProperty{value: val, isSet: true}
}

func (v NullableCustomProperty) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCustomProperty) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
