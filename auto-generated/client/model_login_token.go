/*
OpenMetadata Apis

# Overview  OpenMetadata supports REST APIs for getting metadata in and out of metadata store. The API resources are grouped under following categories: - **Data assets** - includes resources for data entities, such as `databases`, `tables`, and `topics`. Resources for data assets created from data, such as `dashboards`, `reports`, `metrics`, and `ML Features` are part of this collection. `pipelines`, `notebooks`, etc. that are used for creating data assets are also available as resources as of this collection. - **Teams and Users** - includes `users`, `teams`, a special type of user called `bots` that performs many automated tasks such as ingestion. - **Services** - are services that OpenMetadata integrates with. Currently `databaseService` is the only service under this collection that represents data sources. In the future, services related to Dashboards, Reports, ETL pipelines will be added under this collection. - **Glossary** - OpenMetadata supports hierarchical tags that can be used to build business vocabulary to describe and classify data available under `tags` resource. 

API version: 0.11.0
Contact: openmetadata-dev@googlegroups.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// LoginToken struct for LoginToken
type LoginToken struct {
	AccessToken string `json:"accessToken"`
	TokenType string `json:"tokenType"`
	RefreshToken *string `json:"refreshToken,omitempty"`
	ExpiryDuration *int64 `json:"expiryDuration,omitempty"`
}

// NewLoginToken instantiates a new LoginToken object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLoginToken(accessToken string, tokenType string) *LoginToken {
	this := LoginToken{}
	this.AccessToken = accessToken
	this.TokenType = tokenType
	return &this
}

// NewLoginTokenWithDefaults instantiates a new LoginToken object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLoginTokenWithDefaults() *LoginToken {
	this := LoginToken{}
	return &this
}

// GetAccessToken returns the AccessToken field value
func (o *LoginToken) GetAccessToken() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AccessToken
}

// GetAccessTokenOk returns a tuple with the AccessToken field value
// and a boolean to check if the value has been set.
func (o *LoginToken) GetAccessTokenOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccessToken, true
}

// SetAccessToken sets field value
func (o *LoginToken) SetAccessToken(v string) {
	o.AccessToken = v
}

// GetTokenType returns the TokenType field value
func (o *LoginToken) GetTokenType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TokenType
}

// GetTokenTypeOk returns a tuple with the TokenType field value
// and a boolean to check if the value has been set.
func (o *LoginToken) GetTokenTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TokenType, true
}

// SetTokenType sets field value
func (o *LoginToken) SetTokenType(v string) {
	o.TokenType = v
}

// GetRefreshToken returns the RefreshToken field value if set, zero value otherwise.
func (o *LoginToken) GetRefreshToken() string {
	if o == nil || o.RefreshToken == nil {
		var ret string
		return ret
	}
	return *o.RefreshToken
}

// GetRefreshTokenOk returns a tuple with the RefreshToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LoginToken) GetRefreshTokenOk() (*string, bool) {
	if o == nil || o.RefreshToken == nil {
		return nil, false
	}
	return o.RefreshToken, true
}

// HasRefreshToken returns a boolean if a field has been set.
func (o *LoginToken) HasRefreshToken() bool {
	if o != nil && o.RefreshToken != nil {
		return true
	}

	return false
}

// SetRefreshToken gets a reference to the given string and assigns it to the RefreshToken field.
func (o *LoginToken) SetRefreshToken(v string) {
	o.RefreshToken = &v
}

// GetExpiryDuration returns the ExpiryDuration field value if set, zero value otherwise.
func (o *LoginToken) GetExpiryDuration() int64 {
	if o == nil || o.ExpiryDuration == nil {
		var ret int64
		return ret
	}
	return *o.ExpiryDuration
}

// GetExpiryDurationOk returns a tuple with the ExpiryDuration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LoginToken) GetExpiryDurationOk() (*int64, bool) {
	if o == nil || o.ExpiryDuration == nil {
		return nil, false
	}
	return o.ExpiryDuration, true
}

// HasExpiryDuration returns a boolean if a field has been set.
func (o *LoginToken) HasExpiryDuration() bool {
	if o != nil && o.ExpiryDuration != nil {
		return true
	}

	return false
}

// SetExpiryDuration gets a reference to the given int64 and assigns it to the ExpiryDuration field.
func (o *LoginToken) SetExpiryDuration(v int64) {
	o.ExpiryDuration = &v
}

func (o LoginToken) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["accessToken"] = o.AccessToken
	}
	if true {
		toSerialize["tokenType"] = o.TokenType
	}
	if o.RefreshToken != nil {
		toSerialize["refreshToken"] = o.RefreshToken
	}
	if o.ExpiryDuration != nil {
		toSerialize["expiryDuration"] = o.ExpiryDuration
	}
	return json.Marshal(toSerialize)
}

type NullableLoginToken struct {
	value *LoginToken
	isSet bool
}

func (v NullableLoginToken) Get() *LoginToken {
	return v.value
}

func (v *NullableLoginToken) Set(val *LoginToken) {
	v.value = val
	v.isSet = true
}

func (v NullableLoginToken) IsSet() bool {
	return v.isSet
}

func (v *NullableLoginToken) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLoginToken(val *LoginToken) *NullableLoginToken {
	return &NullableLoginToken{value: val, isSet: true}
}

func (v NullableLoginToken) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLoginToken) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


