/*
OpenMetadata Apis

# Overview  OpenMetadata supports REST APIs for getting metadata in and out of metadata store. The API resources are grouped under following categories: - **Data assets** - includes resources for data entities, such as `databases`, `tables`, and `topics`. Resources for data assets created from data, such as `dashboards`, `reports`, `metrics`, and `ML Features` are part of this collection. `pipelines`, `notebooks`, etc. that are used for creating data assets are also available as resources as of this collection. - **Teams and Users** - includes `users`, `teams`, a special type of user called `bots` that performs many automated tasks such as ingestion. - **Services** - are services that OpenMetadata integrates with. Currently `databaseService` is the only service under this collection that represents data sources. In the future, services related to Dashboards, Reports, ETL pipelines will be added under this collection. - **Glossary** - OpenMetadata supports hierarchical tags that can be used to build business vocabulary to describe and classify data available under `tags` resource.

API version: 0.11.0
Contact: openmetadata-dev@googlegroups.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ShardId struct for ShardId
type ShardId struct {
	Fragment  *bool   `json:"fragment,omitempty"`
	Id        *int32  `json:"id,omitempty"`
	Index     *Index  `json:"index,omitempty"`
	IndexName *string `json:"indexName,omitempty"`
}

// NewShardId instantiates a new ShardId object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewShardId() *ShardId {
	this := ShardId{}
	return &this
}

// NewShardIdWithDefaults instantiates a new ShardId object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewShardIdWithDefaults() *ShardId {
	this := ShardId{}
	return &this
}

// GetFragment returns the Fragment field value if set, zero value otherwise.
func (o *ShardId) GetFragment() bool {
	if o == nil || o.Fragment == nil {
		var ret bool
		return ret
	}
	return *o.Fragment
}

// GetFragmentOk returns a tuple with the Fragment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShardId) GetFragmentOk() (*bool, bool) {
	if o == nil || o.Fragment == nil {
		return nil, false
	}
	return o.Fragment, true
}

// HasFragment returns a boolean if a field has been set.
func (o *ShardId) HasFragment() bool {
	if o != nil && o.Fragment != nil {
		return true
	}

	return false
}

// SetFragment gets a reference to the given bool and assigns it to the Fragment field.
func (o *ShardId) SetFragment(v bool) {
	o.Fragment = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ShardId) GetId() int32 {
	if o == nil || o.Id == nil {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShardId) GetIdOk() (*int32, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ShardId) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *ShardId) SetId(v int32) {
	o.Id = &v
}

// GetIndex returns the Index field value if set, zero value otherwise.
func (o *ShardId) GetIndex() Index {
	if o == nil || o.Index == nil {
		var ret Index
		return ret
	}
	return *o.Index
}

// GetIndexOk returns a tuple with the Index field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShardId) GetIndexOk() (*Index, bool) {
	if o == nil || o.Index == nil {
		return nil, false
	}
	return o.Index, true
}

// HasIndex returns a boolean if a field has been set.
func (o *ShardId) HasIndex() bool {
	if o != nil && o.Index != nil {
		return true
	}

	return false
}

// SetIndex gets a reference to the given Index and assigns it to the Index field.
func (o *ShardId) SetIndex(v Index) {
	o.Index = &v
}

// GetIndexName returns the IndexName field value if set, zero value otherwise.
func (o *ShardId) GetIndexName() string {
	if o == nil || o.IndexName == nil {
		var ret string
		return ret
	}
	return *o.IndexName
}

// GetIndexNameOk returns a tuple with the IndexName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShardId) GetIndexNameOk() (*string, bool) {
	if o == nil || o.IndexName == nil {
		return nil, false
	}
	return o.IndexName, true
}

// HasIndexName returns a boolean if a field has been set.
func (o *ShardId) HasIndexName() bool {
	if o != nil && o.IndexName != nil {
		return true
	}

	return false
}

// SetIndexName gets a reference to the given string and assigns it to the IndexName field.
func (o *ShardId) SetIndexName(v string) {
	o.IndexName = &v
}

func (o ShardId) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Fragment != nil {
		toSerialize["fragment"] = o.Fragment
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Index != nil {
		toSerialize["index"] = o.Index
	}
	if o.IndexName != nil {
		toSerialize["indexName"] = o.IndexName
	}
	return json.Marshal(toSerialize)
}

type NullableShardId struct {
	value *ShardId
	isSet bool
}

func (v NullableShardId) Get() *ShardId {
	return v.value
}

func (v *NullableShardId) Set(val *ShardId) {
	v.value = val
	v.isSet = true
}

func (v NullableShardId) IsSet() bool {
	return v.isSet
}

func (v *NullableShardId) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableShardId(val *ShardId) *NullableShardId {
	return &NullableShardId{value: val, isSet: true}
}

func (v NullableShardId) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableShardId) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
