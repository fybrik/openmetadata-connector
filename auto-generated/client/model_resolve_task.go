/*
OpenMetadata Apis

# Overview  OpenMetadata supports REST APIs for getting metadata in and out of metadata store. The API resources are grouped under following categories: - **Data assets** - includes resources for data entities, such as `databases`, `tables`, and `topics`. Resources for data assets created from data, such as `dashboards`, `reports`, `metrics`, and `ML Features` are part of this collection. `pipelines`, `notebooks`, etc. that are used for creating data assets are also available as resources as of this collection. - **Teams and Users** - includes `users`, `teams`, a special type of user called `bots` that performs many automated tasks such as ingestion. - **Services** - are services that OpenMetadata integrates with. Currently `databaseService` is the only service under this collection that represents data sources. In the future, services related to Dashboards, Reports, ETL pipelines will be added under this collection. - **Glossary** - OpenMetadata supports hierarchical tags that can be used to build business vocabulary to describe and classify data available under `tags` resource.

API version: 0.11.0
Contact: openmetadata-dev@googlegroups.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ResolveTask struct for ResolveTask
type ResolveTask struct {
	NewValue string `json:"newValue"`
}

// NewResolveTask instantiates a new ResolveTask object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResolveTask(newValue string) *ResolveTask {
	this := ResolveTask{}
	this.NewValue = newValue
	return &this
}

// NewResolveTaskWithDefaults instantiates a new ResolveTask object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResolveTaskWithDefaults() *ResolveTask {
	this := ResolveTask{}
	return &this
}

// GetNewValue returns the NewValue field value
func (o *ResolveTask) GetNewValue() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NewValue
}

// GetNewValueOk returns a tuple with the NewValue field value
// and a boolean to check if the value has been set.
func (o *ResolveTask) GetNewValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NewValue, true
}

// SetNewValue sets field value
func (o *ResolveTask) SetNewValue(v string) {
	o.NewValue = v
}

func (o ResolveTask) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["newValue"] = o.NewValue
	}
	return json.Marshal(toSerialize)
}

type NullableResolveTask struct {
	value *ResolveTask
	isSet bool
}

func (v NullableResolveTask) Get() *ResolveTask {
	return v.value
}

func (v *NullableResolveTask) Set(val *ResolveTask) {
	v.value = val
	v.isSet = true
}

func (v NullableResolveTask) IsSet() bool {
	return v.isSet
}

func (v *NullableResolveTask) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResolveTask(val *ResolveTask) *NullableResolveTask {
	return &NullableResolveTask{value: val, isSet: true}
}

func (v NullableResolveTask) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResolveTask) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
