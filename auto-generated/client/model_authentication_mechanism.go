/*
OpenMetadata Apis

# Overview  OpenMetadata supports REST APIs for getting metadata in and out of metadata store. The API resources are grouped under following categories: - **Data assets** - includes resources for data entities, such as `databases`, `tables`, and `topics`. Resources for data assets created from data, such as `dashboards`, `reports`, `metrics`, and `ML Features` are part of this collection. `pipelines`, `notebooks`, etc. that are used for creating data assets are also available as resources as of this collection. - **Teams and Users** - includes `users`, `teams`, a special type of user called `bots` that performs many automated tasks such as ingestion. - **Services** - are services that OpenMetadata integrates with. Currently `databaseService` is the only service under this collection that represents data sources. In the future, services related to Dashboards, Reports, ETL pipelines will be added under this collection. - **Glossary** - OpenMetadata supports hierarchical tags that can be used to build business vocabulary to describe and classify data available under `tags` resource.

API version: 0.11.0
Contact: openmetadata-dev@googlegroups.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// AuthenticationMechanism struct for AuthenticationMechanism
type AuthenticationMechanism struct {
	AuthType *string                `json:"authType,omitempty"`
	Config   map[string]interface{} `json:"config,omitempty"`
}

// NewAuthenticationMechanism instantiates a new AuthenticationMechanism object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuthenticationMechanism() *AuthenticationMechanism {
	this := AuthenticationMechanism{}
	return &this
}

// NewAuthenticationMechanismWithDefaults instantiates a new AuthenticationMechanism object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuthenticationMechanismWithDefaults() *AuthenticationMechanism {
	this := AuthenticationMechanism{}
	return &this
}

// GetAuthType returns the AuthType field value if set, zero value otherwise.
func (o *AuthenticationMechanism) GetAuthType() string {
	if o == nil || o.AuthType == nil {
		var ret string
		return ret
	}
	return *o.AuthType
}

// GetAuthTypeOk returns a tuple with the AuthType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthenticationMechanism) GetAuthTypeOk() (*string, bool) {
	if o == nil || o.AuthType == nil {
		return nil, false
	}
	return o.AuthType, true
}

// HasAuthType returns a boolean if a field has been set.
func (o *AuthenticationMechanism) HasAuthType() bool {
	if o != nil && o.AuthType != nil {
		return true
	}

	return false
}

// SetAuthType gets a reference to the given string and assigns it to the AuthType field.
func (o *AuthenticationMechanism) SetAuthType(v string) {
	o.AuthType = &v
}

// GetConfig returns the Config field value if set, zero value otherwise.
func (o *AuthenticationMechanism) GetConfig() map[string]interface{} {
	if o == nil || o.Config == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.Config
}

// GetConfigOk returns a tuple with the Config field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthenticationMechanism) GetConfigOk() (map[string]interface{}, bool) {
	if o == nil || o.Config == nil {
		return nil, false
	}
	return o.Config, true
}

// HasConfig returns a boolean if a field has been set.
func (o *AuthenticationMechanism) HasConfig() bool {
	if o != nil && o.Config != nil {
		return true
	}

	return false
}

// SetConfig gets a reference to the given map[string]interface{} and assigns it to the Config field.
func (o *AuthenticationMechanism) SetConfig(v map[string]interface{}) {
	o.Config = v
}

func (o AuthenticationMechanism) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AuthType != nil {
		toSerialize["authType"] = o.AuthType
	}
	if o.Config != nil {
		toSerialize["config"] = o.Config
	}
	return json.Marshal(toSerialize)
}

type NullableAuthenticationMechanism struct {
	value *AuthenticationMechanism
	isSet bool
}

func (v NullableAuthenticationMechanism) Get() *AuthenticationMechanism {
	return v.value
}

func (v *NullableAuthenticationMechanism) Set(val *AuthenticationMechanism) {
	v.value = val
	v.isSet = true
}

func (v NullableAuthenticationMechanism) IsSet() bool {
	return v.isSet
}

func (v *NullableAuthenticationMechanism) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuthenticationMechanism(val *AuthenticationMechanism) *NullableAuthenticationMechanism {
	return &NullableAuthenticationMechanism{value: val, isSet: true}
}

func (v NullableAuthenticationMechanism) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuthenticationMechanism) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
