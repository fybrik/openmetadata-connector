/*
OpenMetadata Apis

# Overview  OpenMetadata supports REST APIs for getting metadata in and out of metadata store. The API resources are grouped under following categories: - **Data assets** - includes resources for data entities, such as `databases`, `tables`, and `topics`. Resources for data assets created from data, such as `dashboards`, `reports`, `metrics`, and `ML Features` are part of this collection. `pipelines`, `notebooks`, etc. that are used for creating data assets are also available as resources as of this collection. - **Teams and Users** - includes `users`, `teams`, a special type of user called `bots` that performs many automated tasks such as ingestion. - **Services** - are services that OpenMetadata integrates with. Currently `databaseService` is the only service under this collection that represents data sources. In the future, services related to Dashboards, Reports, ETL pipelines will be added under this collection. - **Glossary** - OpenMetadata supports hierarchical tags that can be used to build business vocabulary to describe and classify data available under `tags` resource.

API version: 0.11.0
Contact: openmetadata-dev@googlegroups.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Clusters struct for Clusters
type Clusters struct {
	Fragment   *bool  `json:"fragment,omitempty"`
	Skipped    *int32 `json:"skipped,omitempty"`
	Successful *int32 `json:"successful,omitempty"`
	Total      *int32 `json:"total,omitempty"`
}

// NewClusters instantiates a new Clusters object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewClusters() *Clusters {
	this := Clusters{}
	return &this
}

// NewClustersWithDefaults instantiates a new Clusters object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewClustersWithDefaults() *Clusters {
	this := Clusters{}
	return &this
}

// GetFragment returns the Fragment field value if set, zero value otherwise.
func (o *Clusters) GetFragment() bool {
	if o == nil || o.Fragment == nil {
		var ret bool
		return ret
	}
	return *o.Fragment
}

// GetFragmentOk returns a tuple with the Fragment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Clusters) GetFragmentOk() (*bool, bool) {
	if o == nil || o.Fragment == nil {
		return nil, false
	}
	return o.Fragment, true
}

// HasFragment returns a boolean if a field has been set.
func (o *Clusters) HasFragment() bool {
	if o != nil && o.Fragment != nil {
		return true
	}

	return false
}

// SetFragment gets a reference to the given bool and assigns it to the Fragment field.
func (o *Clusters) SetFragment(v bool) {
	o.Fragment = &v
}

// GetSkipped returns the Skipped field value if set, zero value otherwise.
func (o *Clusters) GetSkipped() int32 {
	if o == nil || o.Skipped == nil {
		var ret int32
		return ret
	}
	return *o.Skipped
}

// GetSkippedOk returns a tuple with the Skipped field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Clusters) GetSkippedOk() (*int32, bool) {
	if o == nil || o.Skipped == nil {
		return nil, false
	}
	return o.Skipped, true
}

// HasSkipped returns a boolean if a field has been set.
func (o *Clusters) HasSkipped() bool {
	if o != nil && o.Skipped != nil {
		return true
	}

	return false
}

// SetSkipped gets a reference to the given int32 and assigns it to the Skipped field.
func (o *Clusters) SetSkipped(v int32) {
	o.Skipped = &v
}

// GetSuccessful returns the Successful field value if set, zero value otherwise.
func (o *Clusters) GetSuccessful() int32 {
	if o == nil || o.Successful == nil {
		var ret int32
		return ret
	}
	return *o.Successful
}

// GetSuccessfulOk returns a tuple with the Successful field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Clusters) GetSuccessfulOk() (*int32, bool) {
	if o == nil || o.Successful == nil {
		return nil, false
	}
	return o.Successful, true
}

// HasSuccessful returns a boolean if a field has been set.
func (o *Clusters) HasSuccessful() bool {
	if o != nil && o.Successful != nil {
		return true
	}

	return false
}

// SetSuccessful gets a reference to the given int32 and assigns it to the Successful field.
func (o *Clusters) SetSuccessful(v int32) {
	o.Successful = &v
}

// GetTotal returns the Total field value if set, zero value otherwise.
func (o *Clusters) GetTotal() int32 {
	if o == nil || o.Total == nil {
		var ret int32
		return ret
	}
	return *o.Total
}

// GetTotalOk returns a tuple with the Total field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Clusters) GetTotalOk() (*int32, bool) {
	if o == nil || o.Total == nil {
		return nil, false
	}
	return o.Total, true
}

// HasTotal returns a boolean if a field has been set.
func (o *Clusters) HasTotal() bool {
	if o != nil && o.Total != nil {
		return true
	}

	return false
}

// SetTotal gets a reference to the given int32 and assigns it to the Total field.
func (o *Clusters) SetTotal(v int32) {
	o.Total = &v
}

func (o Clusters) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Fragment != nil {
		toSerialize["fragment"] = o.Fragment
	}
	if o.Skipped != nil {
		toSerialize["skipped"] = o.Skipped
	}
	if o.Successful != nil {
		toSerialize["successful"] = o.Successful
	}
	if o.Total != nil {
		toSerialize["total"] = o.Total
	}
	return json.Marshal(toSerialize)
}

type NullableClusters struct {
	value *Clusters
	isSet bool
}

func (v NullableClusters) Get() *Clusters {
	return v.value
}

func (v *NullableClusters) Set(val *Clusters) {
	v.value = val
	v.isSet = true
}

func (v NullableClusters) IsSet() bool {
	return v.isSet
}

func (v *NullableClusters) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClusters(val *Clusters) *NullableClusters {
	return &NullableClusters{value: val, isSet: true}
}

func (v NullableClusters) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClusters) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
