/*
OpenMetadata Apis

# Overview  OpenMetadata supports REST APIs for getting metadata in and out of metadata store. The API resources are grouped under following categories: - **Data assets** - includes resources for data entities, such as `databases`, `tables`, and `topics`. Resources for data assets created from data, such as `dashboards`, `reports`, `metrics`, and `ML Features` are part of this collection. `pipelines`, `notebooks`, etc. that are used for creating data assets are also available as resources as of this collection. - **Teams and Users** - includes `users`, `teams`, a special type of user called `bots` that performs many automated tasks such as ingestion. - **Services** - are services that OpenMetadata integrates with. Currently `databaseService` is the only service under this collection that represents data sources. In the future, services related to Dashboards, Reports, ETL pipelines will be added under this collection. - **Glossary** - OpenMetadata supports hierarchical tags that can be used to build business vocabulary to describe and classify data available under `tags` resource.

API version: 0.11.0
Contact: openmetadata-dev@googlegroups.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// AirflowConfig struct for AirflowConfig
type AirflowConfig struct {
	Concurrency                    *int32     `json:"concurrency,omitempty"`
	Email                          *string    `json:"email,omitempty"`
	EndDate                        *time.Time `json:"endDate,omitempty"`
	MaxActiveRuns                  *int32     `json:"maxActiveRuns,omitempty"`
	PausePipeline                  *bool      `json:"pausePipeline,omitempty"`
	PipelineCatchup                *bool      `json:"pipelineCatchup,omitempty"`
	PipelineTimezone               *string    `json:"pipelineTimezone,omitempty"`
	Retries                        *int32     `json:"retries,omitempty"`
	RetryDelay                     *int32     `json:"retryDelay,omitempty"`
	ScheduleInterval               *string    `json:"scheduleInterval,omitempty"`
	StartDate                      *time.Time `json:"startDate,omitempty"`
	WorkflowDefaultView            *string    `json:"workflowDefaultView,omitempty"`
	WorkflowDefaultViewOrientation *string    `json:"workflowDefaultViewOrientation,omitempty"`
	WorkflowTimeout                *int32     `json:"workflowTimeout,omitempty"`
}

// NewAirflowConfig instantiates a new AirflowConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAirflowConfig() *AirflowConfig {
	this := AirflowConfig{}
	return &this
}

// NewAirflowConfigWithDefaults instantiates a new AirflowConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAirflowConfigWithDefaults() *AirflowConfig {
	this := AirflowConfig{}
	return &this
}

// GetConcurrency returns the Concurrency field value if set, zero value otherwise.
func (o *AirflowConfig) GetConcurrency() int32 {
	if o == nil || o.Concurrency == nil {
		var ret int32
		return ret
	}
	return *o.Concurrency
}

// GetConcurrencyOk returns a tuple with the Concurrency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AirflowConfig) GetConcurrencyOk() (*int32, bool) {
	if o == nil || o.Concurrency == nil {
		return nil, false
	}
	return o.Concurrency, true
}

// HasConcurrency returns a boolean if a field has been set.
func (o *AirflowConfig) HasConcurrency() bool {
	if o != nil && o.Concurrency != nil {
		return true
	}

	return false
}

// SetConcurrency gets a reference to the given int32 and assigns it to the Concurrency field.
func (o *AirflowConfig) SetConcurrency(v int32) {
	o.Concurrency = &v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *AirflowConfig) GetEmail() string {
	if o == nil || o.Email == nil {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AirflowConfig) GetEmailOk() (*string, bool) {
	if o == nil || o.Email == nil {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *AirflowConfig) HasEmail() bool {
	if o != nil && o.Email != nil {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *AirflowConfig) SetEmail(v string) {
	o.Email = &v
}

// GetEndDate returns the EndDate field value if set, zero value otherwise.
func (o *AirflowConfig) GetEndDate() time.Time {
	if o == nil || o.EndDate == nil {
		var ret time.Time
		return ret
	}
	return *o.EndDate
}

// GetEndDateOk returns a tuple with the EndDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AirflowConfig) GetEndDateOk() (*time.Time, bool) {
	if o == nil || o.EndDate == nil {
		return nil, false
	}
	return o.EndDate, true
}

// HasEndDate returns a boolean if a field has been set.
func (o *AirflowConfig) HasEndDate() bool {
	if o != nil && o.EndDate != nil {
		return true
	}

	return false
}

// SetEndDate gets a reference to the given time.Time and assigns it to the EndDate field.
func (o *AirflowConfig) SetEndDate(v time.Time) {
	o.EndDate = &v
}

// GetMaxActiveRuns returns the MaxActiveRuns field value if set, zero value otherwise.
func (o *AirflowConfig) GetMaxActiveRuns() int32 {
	if o == nil || o.MaxActiveRuns == nil {
		var ret int32
		return ret
	}
	return *o.MaxActiveRuns
}

// GetMaxActiveRunsOk returns a tuple with the MaxActiveRuns field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AirflowConfig) GetMaxActiveRunsOk() (*int32, bool) {
	if o == nil || o.MaxActiveRuns == nil {
		return nil, false
	}
	return o.MaxActiveRuns, true
}

// HasMaxActiveRuns returns a boolean if a field has been set.
func (o *AirflowConfig) HasMaxActiveRuns() bool {
	if o != nil && o.MaxActiveRuns != nil {
		return true
	}

	return false
}

// SetMaxActiveRuns gets a reference to the given int32 and assigns it to the MaxActiveRuns field.
func (o *AirflowConfig) SetMaxActiveRuns(v int32) {
	o.MaxActiveRuns = &v
}

// GetPausePipeline returns the PausePipeline field value if set, zero value otherwise.
func (o *AirflowConfig) GetPausePipeline() bool {
	if o == nil || o.PausePipeline == nil {
		var ret bool
		return ret
	}
	return *o.PausePipeline
}

// GetPausePipelineOk returns a tuple with the PausePipeline field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AirflowConfig) GetPausePipelineOk() (*bool, bool) {
	if o == nil || o.PausePipeline == nil {
		return nil, false
	}
	return o.PausePipeline, true
}

// HasPausePipeline returns a boolean if a field has been set.
func (o *AirflowConfig) HasPausePipeline() bool {
	if o != nil && o.PausePipeline != nil {
		return true
	}

	return false
}

// SetPausePipeline gets a reference to the given bool and assigns it to the PausePipeline field.
func (o *AirflowConfig) SetPausePipeline(v bool) {
	o.PausePipeline = &v
}

// GetPipelineCatchup returns the PipelineCatchup field value if set, zero value otherwise.
func (o *AirflowConfig) GetPipelineCatchup() bool {
	if o == nil || o.PipelineCatchup == nil {
		var ret bool
		return ret
	}
	return *o.PipelineCatchup
}

// GetPipelineCatchupOk returns a tuple with the PipelineCatchup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AirflowConfig) GetPipelineCatchupOk() (*bool, bool) {
	if o == nil || o.PipelineCatchup == nil {
		return nil, false
	}
	return o.PipelineCatchup, true
}

// HasPipelineCatchup returns a boolean if a field has been set.
func (o *AirflowConfig) HasPipelineCatchup() bool {
	if o != nil && o.PipelineCatchup != nil {
		return true
	}

	return false
}

// SetPipelineCatchup gets a reference to the given bool and assigns it to the PipelineCatchup field.
func (o *AirflowConfig) SetPipelineCatchup(v bool) {
	o.PipelineCatchup = &v
}

// GetPipelineTimezone returns the PipelineTimezone field value if set, zero value otherwise.
func (o *AirflowConfig) GetPipelineTimezone() string {
	if o == nil || o.PipelineTimezone == nil {
		var ret string
		return ret
	}
	return *o.PipelineTimezone
}

// GetPipelineTimezoneOk returns a tuple with the PipelineTimezone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AirflowConfig) GetPipelineTimezoneOk() (*string, bool) {
	if o == nil || o.PipelineTimezone == nil {
		return nil, false
	}
	return o.PipelineTimezone, true
}

// HasPipelineTimezone returns a boolean if a field has been set.
func (o *AirflowConfig) HasPipelineTimezone() bool {
	if o != nil && o.PipelineTimezone != nil {
		return true
	}

	return false
}

// SetPipelineTimezone gets a reference to the given string and assigns it to the PipelineTimezone field.
func (o *AirflowConfig) SetPipelineTimezone(v string) {
	o.PipelineTimezone = &v
}

// GetRetries returns the Retries field value if set, zero value otherwise.
func (o *AirflowConfig) GetRetries() int32 {
	if o == nil || o.Retries == nil {
		var ret int32
		return ret
	}
	return *o.Retries
}

// GetRetriesOk returns a tuple with the Retries field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AirflowConfig) GetRetriesOk() (*int32, bool) {
	if o == nil || o.Retries == nil {
		return nil, false
	}
	return o.Retries, true
}

// HasRetries returns a boolean if a field has been set.
func (o *AirflowConfig) HasRetries() bool {
	if o != nil && o.Retries != nil {
		return true
	}

	return false
}

// SetRetries gets a reference to the given int32 and assigns it to the Retries field.
func (o *AirflowConfig) SetRetries(v int32) {
	o.Retries = &v
}

// GetRetryDelay returns the RetryDelay field value if set, zero value otherwise.
func (o *AirflowConfig) GetRetryDelay() int32 {
	if o == nil || o.RetryDelay == nil {
		var ret int32
		return ret
	}
	return *o.RetryDelay
}

// GetRetryDelayOk returns a tuple with the RetryDelay field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AirflowConfig) GetRetryDelayOk() (*int32, bool) {
	if o == nil || o.RetryDelay == nil {
		return nil, false
	}
	return o.RetryDelay, true
}

// HasRetryDelay returns a boolean if a field has been set.
func (o *AirflowConfig) HasRetryDelay() bool {
	if o != nil && o.RetryDelay != nil {
		return true
	}

	return false
}

// SetRetryDelay gets a reference to the given int32 and assigns it to the RetryDelay field.
func (o *AirflowConfig) SetRetryDelay(v int32) {
	o.RetryDelay = &v
}

// GetScheduleInterval returns the ScheduleInterval field value if set, zero value otherwise.
func (o *AirflowConfig) GetScheduleInterval() string {
	if o == nil || o.ScheduleInterval == nil {
		var ret string
		return ret
	}
	return *o.ScheduleInterval
}

// GetScheduleIntervalOk returns a tuple with the ScheduleInterval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AirflowConfig) GetScheduleIntervalOk() (*string, bool) {
	if o == nil || o.ScheduleInterval == nil {
		return nil, false
	}
	return o.ScheduleInterval, true
}

// HasScheduleInterval returns a boolean if a field has been set.
func (o *AirflowConfig) HasScheduleInterval() bool {
	if o != nil && o.ScheduleInterval != nil {
		return true
	}

	return false
}

// SetScheduleInterval gets a reference to the given string and assigns it to the ScheduleInterval field.
func (o *AirflowConfig) SetScheduleInterval(v string) {
	o.ScheduleInterval = &v
}

// GetStartDate returns the StartDate field value if set, zero value otherwise.
func (o *AirflowConfig) GetStartDate() time.Time {
	if o == nil || o.StartDate == nil {
		var ret time.Time
		return ret
	}
	return *o.StartDate
}

// GetStartDateOk returns a tuple with the StartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AirflowConfig) GetStartDateOk() (*time.Time, bool) {
	if o == nil || o.StartDate == nil {
		return nil, false
	}
	return o.StartDate, true
}

// HasStartDate returns a boolean if a field has been set.
func (o *AirflowConfig) HasStartDate() bool {
	if o != nil && o.StartDate != nil {
		return true
	}

	return false
}

// SetStartDate gets a reference to the given time.Time and assigns it to the StartDate field.
func (o *AirflowConfig) SetStartDate(v time.Time) {
	o.StartDate = &v
}

// GetWorkflowDefaultView returns the WorkflowDefaultView field value if set, zero value otherwise.
func (o *AirflowConfig) GetWorkflowDefaultView() string {
	if o == nil || o.WorkflowDefaultView == nil {
		var ret string
		return ret
	}
	return *o.WorkflowDefaultView
}

// GetWorkflowDefaultViewOk returns a tuple with the WorkflowDefaultView field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AirflowConfig) GetWorkflowDefaultViewOk() (*string, bool) {
	if o == nil || o.WorkflowDefaultView == nil {
		return nil, false
	}
	return o.WorkflowDefaultView, true
}

// HasWorkflowDefaultView returns a boolean if a field has been set.
func (o *AirflowConfig) HasWorkflowDefaultView() bool {
	if o != nil && o.WorkflowDefaultView != nil {
		return true
	}

	return false
}

// SetWorkflowDefaultView gets a reference to the given string and assigns it to the WorkflowDefaultView field.
func (o *AirflowConfig) SetWorkflowDefaultView(v string) {
	o.WorkflowDefaultView = &v
}

// GetWorkflowDefaultViewOrientation returns the WorkflowDefaultViewOrientation field value if set, zero value otherwise.
func (o *AirflowConfig) GetWorkflowDefaultViewOrientation() string {
	if o == nil || o.WorkflowDefaultViewOrientation == nil {
		var ret string
		return ret
	}
	return *o.WorkflowDefaultViewOrientation
}

// GetWorkflowDefaultViewOrientationOk returns a tuple with the WorkflowDefaultViewOrientation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AirflowConfig) GetWorkflowDefaultViewOrientationOk() (*string, bool) {
	if o == nil || o.WorkflowDefaultViewOrientation == nil {
		return nil, false
	}
	return o.WorkflowDefaultViewOrientation, true
}

// HasWorkflowDefaultViewOrientation returns a boolean if a field has been set.
func (o *AirflowConfig) HasWorkflowDefaultViewOrientation() bool {
	if o != nil && o.WorkflowDefaultViewOrientation != nil {
		return true
	}

	return false
}

// SetWorkflowDefaultViewOrientation gets a reference to the given string and assigns it to the WorkflowDefaultViewOrientation field.
func (o *AirflowConfig) SetWorkflowDefaultViewOrientation(v string) {
	o.WorkflowDefaultViewOrientation = &v
}

// GetWorkflowTimeout returns the WorkflowTimeout field value if set, zero value otherwise.
func (o *AirflowConfig) GetWorkflowTimeout() int32 {
	if o == nil || o.WorkflowTimeout == nil {
		var ret int32
		return ret
	}
	return *o.WorkflowTimeout
}

// GetWorkflowTimeoutOk returns a tuple with the WorkflowTimeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AirflowConfig) GetWorkflowTimeoutOk() (*int32, bool) {
	if o == nil || o.WorkflowTimeout == nil {
		return nil, false
	}
	return o.WorkflowTimeout, true
}

// HasWorkflowTimeout returns a boolean if a field has been set.
func (o *AirflowConfig) HasWorkflowTimeout() bool {
	if o != nil && o.WorkflowTimeout != nil {
		return true
	}

	return false
}

// SetWorkflowTimeout gets a reference to the given int32 and assigns it to the WorkflowTimeout field.
func (o *AirflowConfig) SetWorkflowTimeout(v int32) {
	o.WorkflowTimeout = &v
}

func (o AirflowConfig) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Concurrency != nil {
		toSerialize["concurrency"] = o.Concurrency
	}
	if o.Email != nil {
		toSerialize["email"] = o.Email
	}
	if o.EndDate != nil {
		toSerialize["endDate"] = o.EndDate
	}
	if o.MaxActiveRuns != nil {
		toSerialize["maxActiveRuns"] = o.MaxActiveRuns
	}
	if o.PausePipeline != nil {
		toSerialize["pausePipeline"] = o.PausePipeline
	}
	if o.PipelineCatchup != nil {
		toSerialize["pipelineCatchup"] = o.PipelineCatchup
	}
	if o.PipelineTimezone != nil {
		toSerialize["pipelineTimezone"] = o.PipelineTimezone
	}
	if o.Retries != nil {
		toSerialize["retries"] = o.Retries
	}
	if o.RetryDelay != nil {
		toSerialize["retryDelay"] = o.RetryDelay
	}
	if o.ScheduleInterval != nil {
		toSerialize["scheduleInterval"] = o.ScheduleInterval
	}
	if o.StartDate != nil {
		toSerialize["startDate"] = o.StartDate
	}
	if o.WorkflowDefaultView != nil {
		toSerialize["workflowDefaultView"] = o.WorkflowDefaultView
	}
	if o.WorkflowDefaultViewOrientation != nil {
		toSerialize["workflowDefaultViewOrientation"] = o.WorkflowDefaultViewOrientation
	}
	if o.WorkflowTimeout != nil {
		toSerialize["workflowTimeout"] = o.WorkflowTimeout
	}
	return json.Marshal(toSerialize)
}

type NullableAirflowConfig struct {
	value *AirflowConfig
	isSet bool
}

func (v NullableAirflowConfig) Get() *AirflowConfig {
	return v.value
}

func (v *NullableAirflowConfig) Set(val *AirflowConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableAirflowConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableAirflowConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAirflowConfig(val *AirflowConfig) *NullableAirflowConfig {
	return &NullableAirflowConfig{value: val, isSet: true}
}

func (v NullableAirflowConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAirflowConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
