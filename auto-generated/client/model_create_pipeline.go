/*
OpenMetadata Apis

# Overview  OpenMetadata supports REST APIs for getting metadata in and out of metadata store. The API resources are grouped under following categories: - **Data assets** - includes resources for data entities, such as `databases`, `tables`, and `topics`. Resources for data assets created from data, such as `dashboards`, `reports`, `metrics`, and `ML Features` are part of this collection. `pipelines`, `notebooks`, etc. that are used for creating data assets are also available as resources as of this collection. - **Teams and Users** - includes `users`, `teams`, a special type of user called `bots` that performs many automated tasks such as ingestion. - **Services** - are services that OpenMetadata integrates with. Currently `databaseService` is the only service under this collection that represents data sources. In the future, services related to Dashboards, Reports, ETL pipelines will be added under this collection. - **Glossary** - OpenMetadata supports hierarchical tags that can be used to build business vocabulary to describe and classify data available under `tags` resource.

API version: 0.11.0
Contact: openmetadata-dev@googlegroups.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// CreatePipeline struct for CreatePipeline
type CreatePipeline struct {
	Concurrency      *int32                 `json:"concurrency,omitempty"`
	Description      *string                `json:"description,omitempty"`
	DisplayName      *string                `json:"displayName,omitempty"`
	Extension        map[string]interface{} `json:"extension,omitempty"`
	Name             string                 `json:"name"`
	Owner            *EntityReference       `json:"owner,omitempty"`
	PipelineLocation *string                `json:"pipelineLocation,omitempty"`
	PipelineUrl      *string                `json:"pipelineUrl,omitempty"`
	Service          EntityReference        `json:"service"`
	StartDate        *time.Time             `json:"startDate,omitempty"`
	Tags             []TagLabel             `json:"tags,omitempty"`
	Tasks            []Task                 `json:"tasks,omitempty"`
}

// NewCreatePipeline instantiates a new CreatePipeline object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreatePipeline(name string, service EntityReference) *CreatePipeline {
	this := CreatePipeline{}
	this.Name = name
	this.Service = service
	return &this
}

// NewCreatePipelineWithDefaults instantiates a new CreatePipeline object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreatePipelineWithDefaults() *CreatePipeline {
	this := CreatePipeline{}
	return &this
}

// GetConcurrency returns the Concurrency field value if set, zero value otherwise.
func (o *CreatePipeline) GetConcurrency() int32 {
	if o == nil || o.Concurrency == nil {
		var ret int32
		return ret
	}
	return *o.Concurrency
}

// GetConcurrencyOk returns a tuple with the Concurrency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreatePipeline) GetConcurrencyOk() (*int32, bool) {
	if o == nil || o.Concurrency == nil {
		return nil, false
	}
	return o.Concurrency, true
}

// HasConcurrency returns a boolean if a field has been set.
func (o *CreatePipeline) HasConcurrency() bool {
	if o != nil && o.Concurrency != nil {
		return true
	}

	return false
}

// SetConcurrency gets a reference to the given int32 and assigns it to the Concurrency field.
func (o *CreatePipeline) SetConcurrency(v int32) {
	o.Concurrency = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *CreatePipeline) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreatePipeline) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *CreatePipeline) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *CreatePipeline) SetDescription(v string) {
	o.Description = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *CreatePipeline) GetDisplayName() string {
	if o == nil || o.DisplayName == nil {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreatePipeline) GetDisplayNameOk() (*string, bool) {
	if o == nil || o.DisplayName == nil {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *CreatePipeline) HasDisplayName() bool {
	if o != nil && o.DisplayName != nil {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *CreatePipeline) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetExtension returns the Extension field value if set, zero value otherwise.
func (o *CreatePipeline) GetExtension() map[string]interface{} {
	if o == nil || o.Extension == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreatePipeline) GetExtensionOk() (map[string]interface{}, bool) {
	if o == nil || o.Extension == nil {
		return nil, false
	}
	return o.Extension, true
}

// HasExtension returns a boolean if a field has been set.
func (o *CreatePipeline) HasExtension() bool {
	if o != nil && o.Extension != nil {
		return true
	}

	return false
}

// SetExtension gets a reference to the given map[string]interface{} and assigns it to the Extension field.
func (o *CreatePipeline) SetExtension(v map[string]interface{}) {
	o.Extension = v
}

// GetName returns the Name field value
func (o *CreatePipeline) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CreatePipeline) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *CreatePipeline) SetName(v string) {
	o.Name = v
}

// GetOwner returns the Owner field value if set, zero value otherwise.
func (o *CreatePipeline) GetOwner() EntityReference {
	if o == nil || o.Owner == nil {
		var ret EntityReference
		return ret
	}
	return *o.Owner
}

// GetOwnerOk returns a tuple with the Owner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreatePipeline) GetOwnerOk() (*EntityReference, bool) {
	if o == nil || o.Owner == nil {
		return nil, false
	}
	return o.Owner, true
}

// HasOwner returns a boolean if a field has been set.
func (o *CreatePipeline) HasOwner() bool {
	if o != nil && o.Owner != nil {
		return true
	}

	return false
}

// SetOwner gets a reference to the given EntityReference and assigns it to the Owner field.
func (o *CreatePipeline) SetOwner(v EntityReference) {
	o.Owner = &v
}

// GetPipelineLocation returns the PipelineLocation field value if set, zero value otherwise.
func (o *CreatePipeline) GetPipelineLocation() string {
	if o == nil || o.PipelineLocation == nil {
		var ret string
		return ret
	}
	return *o.PipelineLocation
}

// GetPipelineLocationOk returns a tuple with the PipelineLocation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreatePipeline) GetPipelineLocationOk() (*string, bool) {
	if o == nil || o.PipelineLocation == nil {
		return nil, false
	}
	return o.PipelineLocation, true
}

// HasPipelineLocation returns a boolean if a field has been set.
func (o *CreatePipeline) HasPipelineLocation() bool {
	if o != nil && o.PipelineLocation != nil {
		return true
	}

	return false
}

// SetPipelineLocation gets a reference to the given string and assigns it to the PipelineLocation field.
func (o *CreatePipeline) SetPipelineLocation(v string) {
	o.PipelineLocation = &v
}

// GetPipelineUrl returns the PipelineUrl field value if set, zero value otherwise.
func (o *CreatePipeline) GetPipelineUrl() string {
	if o == nil || o.PipelineUrl == nil {
		var ret string
		return ret
	}
	return *o.PipelineUrl
}

// GetPipelineUrlOk returns a tuple with the PipelineUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreatePipeline) GetPipelineUrlOk() (*string, bool) {
	if o == nil || o.PipelineUrl == nil {
		return nil, false
	}
	return o.PipelineUrl, true
}

// HasPipelineUrl returns a boolean if a field has been set.
func (o *CreatePipeline) HasPipelineUrl() bool {
	if o != nil && o.PipelineUrl != nil {
		return true
	}

	return false
}

// SetPipelineUrl gets a reference to the given string and assigns it to the PipelineUrl field.
func (o *CreatePipeline) SetPipelineUrl(v string) {
	o.PipelineUrl = &v
}

// GetService returns the Service field value
func (o *CreatePipeline) GetService() EntityReference {
	if o == nil {
		var ret EntityReference
		return ret
	}

	return o.Service
}

// GetServiceOk returns a tuple with the Service field value
// and a boolean to check if the value has been set.
func (o *CreatePipeline) GetServiceOk() (*EntityReference, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Service, true
}

// SetService sets field value
func (o *CreatePipeline) SetService(v EntityReference) {
	o.Service = v
}

// GetStartDate returns the StartDate field value if set, zero value otherwise.
func (o *CreatePipeline) GetStartDate() time.Time {
	if o == nil || o.StartDate == nil {
		var ret time.Time
		return ret
	}
	return *o.StartDate
}

// GetStartDateOk returns a tuple with the StartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreatePipeline) GetStartDateOk() (*time.Time, bool) {
	if o == nil || o.StartDate == nil {
		return nil, false
	}
	return o.StartDate, true
}

// HasStartDate returns a boolean if a field has been set.
func (o *CreatePipeline) HasStartDate() bool {
	if o != nil && o.StartDate != nil {
		return true
	}

	return false
}

// SetStartDate gets a reference to the given time.Time and assigns it to the StartDate field.
func (o *CreatePipeline) SetStartDate(v time.Time) {
	o.StartDate = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *CreatePipeline) GetTags() []TagLabel {
	if o == nil || o.Tags == nil {
		var ret []TagLabel
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreatePipeline) GetTagsOk() ([]TagLabel, bool) {
	if o == nil || o.Tags == nil {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *CreatePipeline) HasTags() bool {
	if o != nil && o.Tags != nil {
		return true
	}

	return false
}

// SetTags gets a reference to the given []TagLabel and assigns it to the Tags field.
func (o *CreatePipeline) SetTags(v []TagLabel) {
	o.Tags = v
}

// GetTasks returns the Tasks field value if set, zero value otherwise.
func (o *CreatePipeline) GetTasks() []Task {
	if o == nil || o.Tasks == nil {
		var ret []Task
		return ret
	}
	return o.Tasks
}

// GetTasksOk returns a tuple with the Tasks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreatePipeline) GetTasksOk() ([]Task, bool) {
	if o == nil || o.Tasks == nil {
		return nil, false
	}
	return o.Tasks, true
}

// HasTasks returns a boolean if a field has been set.
func (o *CreatePipeline) HasTasks() bool {
	if o != nil && o.Tasks != nil {
		return true
	}

	return false
}

// SetTasks gets a reference to the given []Task and assigns it to the Tasks field.
func (o *CreatePipeline) SetTasks(v []Task) {
	o.Tasks = v
}

func (o CreatePipeline) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Concurrency != nil {
		toSerialize["concurrency"] = o.Concurrency
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.DisplayName != nil {
		toSerialize["displayName"] = o.DisplayName
	}
	if o.Extension != nil {
		toSerialize["extension"] = o.Extension
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if o.Owner != nil {
		toSerialize["owner"] = o.Owner
	}
	if o.PipelineLocation != nil {
		toSerialize["pipelineLocation"] = o.PipelineLocation
	}
	if o.PipelineUrl != nil {
		toSerialize["pipelineUrl"] = o.PipelineUrl
	}
	if true {
		toSerialize["service"] = o.Service
	}
	if o.StartDate != nil {
		toSerialize["startDate"] = o.StartDate
	}
	if o.Tags != nil {
		toSerialize["tags"] = o.Tags
	}
	if o.Tasks != nil {
		toSerialize["tasks"] = o.Tasks
	}
	return json.Marshal(toSerialize)
}

type NullableCreatePipeline struct {
	value *CreatePipeline
	isSet bool
}

func (v NullableCreatePipeline) Get() *CreatePipeline {
	return v.value
}

func (v *NullableCreatePipeline) Set(val *CreatePipeline) {
	v.value = val
	v.isSet = true
}

func (v NullableCreatePipeline) IsSet() bool {
	return v.isSet
}

func (v *NullableCreatePipeline) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreatePipeline(val *CreatePipeline) *NullableCreatePipeline {
	return &NullableCreatePipeline{value: val, isSet: true}
}

func (v NullableCreatePipeline) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreatePipeline) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
