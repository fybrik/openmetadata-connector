/*
OpenMetadata Apis

# Overview  OpenMetadata supports REST APIs for getting metadata in and out of metadata store. The API resources are grouped under following categories: - **Data assets** - includes resources for data entities, such as `databases`, `tables`, and `topics`. Resources for data assets created from data, such as `dashboards`, `reports`, `metrics`, and `ML Features` are part of this collection. `pipelines`, `notebooks`, etc. that are used for creating data assets are also available as resources as of this collection. - **Teams and Users** - includes `users`, `teams`, a special type of user called `bots` that performs many automated tasks such as ingestion. - **Services** - are services that OpenMetadata integrates with. Currently `databaseService` is the only service under this collection that represents data sources. In the future, services related to Dashboards, Reports, ETL pipelines will be added under this collection. - **Glossary** - OpenMetadata supports hierarchical tags that can be used to build business vocabulary to describe and classify data available under `tags` resource.

API version: 0.11.0
Contact: openmetadata-dev@googlegroups.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// LineageDetails struct for LineageDetails
type LineageDetails struct {
	ColumnsLineage []ColumnLineage  `json:"columnsLineage"`
	Pipeline       *EntityReference `json:"pipeline,omitempty"`
	SqlQuery       string           `json:"sqlQuery"`
}

// NewLineageDetails instantiates a new LineageDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLineageDetails(columnsLineage []ColumnLineage, sqlQuery string) *LineageDetails {
	this := LineageDetails{}
	this.ColumnsLineage = columnsLineage
	this.SqlQuery = sqlQuery
	return &this
}

// NewLineageDetailsWithDefaults instantiates a new LineageDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLineageDetailsWithDefaults() *LineageDetails {
	this := LineageDetails{}
	return &this
}

// GetColumnsLineage returns the ColumnsLineage field value
func (o *LineageDetails) GetColumnsLineage() []ColumnLineage {
	if o == nil {
		var ret []ColumnLineage
		return ret
	}

	return o.ColumnsLineage
}

// GetColumnsLineageOk returns a tuple with the ColumnsLineage field value
// and a boolean to check if the value has been set.
func (o *LineageDetails) GetColumnsLineageOk() ([]ColumnLineage, bool) {
	if o == nil {
		return nil, false
	}
	return o.ColumnsLineage, true
}

// SetColumnsLineage sets field value
func (o *LineageDetails) SetColumnsLineage(v []ColumnLineage) {
	o.ColumnsLineage = v
}

// GetPipeline returns the Pipeline field value if set, zero value otherwise.
func (o *LineageDetails) GetPipeline() EntityReference {
	if o == nil || o.Pipeline == nil {
		var ret EntityReference
		return ret
	}
	return *o.Pipeline
}

// GetPipelineOk returns a tuple with the Pipeline field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LineageDetails) GetPipelineOk() (*EntityReference, bool) {
	if o == nil || o.Pipeline == nil {
		return nil, false
	}
	return o.Pipeline, true
}

// HasPipeline returns a boolean if a field has been set.
func (o *LineageDetails) HasPipeline() bool {
	if o != nil && o.Pipeline != nil {
		return true
	}

	return false
}

// SetPipeline gets a reference to the given EntityReference and assigns it to the Pipeline field.
func (o *LineageDetails) SetPipeline(v EntityReference) {
	o.Pipeline = &v
}

// GetSqlQuery returns the SqlQuery field value
func (o *LineageDetails) GetSqlQuery() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SqlQuery
}

// GetSqlQueryOk returns a tuple with the SqlQuery field value
// and a boolean to check if the value has been set.
func (o *LineageDetails) GetSqlQueryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SqlQuery, true
}

// SetSqlQuery sets field value
func (o *LineageDetails) SetSqlQuery(v string) {
	o.SqlQuery = v
}

func (o LineageDetails) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["columnsLineage"] = o.ColumnsLineage
	}
	if o.Pipeline != nil {
		toSerialize["pipeline"] = o.Pipeline
	}
	if true {
		toSerialize["sqlQuery"] = o.SqlQuery
	}
	return json.Marshal(toSerialize)
}

type NullableLineageDetails struct {
	value *LineageDetails
	isSet bool
}

func (v NullableLineageDetails) Get() *LineageDetails {
	return v.value
}

func (v *NullableLineageDetails) Set(val *LineageDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableLineageDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableLineageDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLineageDetails(val *LineageDetails) *NullableLineageDetails {
	return &NullableLineageDetails{value: val, isSet: true}
}

func (v NullableLineageDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLineageDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
