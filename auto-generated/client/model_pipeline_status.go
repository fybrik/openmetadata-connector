/*
OpenMetadata Apis

# Overview  OpenMetadata supports REST APIs for getting metadata in and out of metadata store. The API resources are grouped under following categories: - **Data assets** - includes resources for data entities, such as `databases`, `tables`, and `topics`. Resources for data assets created from data, such as `dashboards`, `reports`, `metrics`, and `ML Features` are part of this collection. `pipelines`, `notebooks`, etc. that are used for creating data assets are also available as resources as of this collection. - **Teams and Users** - includes `users`, `teams`, a special type of user called `bots` that performs many automated tasks such as ingestion. - **Services** - are services that OpenMetadata integrates with. Currently `databaseService` is the only service under this collection that represents data sources. In the future, services related to Dashboards, Reports, ETL pipelines will be added under this collection. - **Glossary** - OpenMetadata supports hierarchical tags that can be used to build business vocabulary to describe and classify data available under `tags` resource.

API version: 0.11.0
Contact: openmetadata-dev@googlegroups.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// PipelineStatus struct for PipelineStatus
type PipelineStatus struct {
	EndDate   *string `json:"endDate,omitempty"`
	RunId     *string `json:"runId,omitempty"`
	StartDate *string `json:"startDate,omitempty"`
	State     *string `json:"state,omitempty"`
}

// NewPipelineStatus instantiates a new PipelineStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPipelineStatus() *PipelineStatus {
	this := PipelineStatus{}
	return &this
}

// NewPipelineStatusWithDefaults instantiates a new PipelineStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPipelineStatusWithDefaults() *PipelineStatus {
	this := PipelineStatus{}
	return &this
}

// GetEndDate returns the EndDate field value if set, zero value otherwise.
func (o *PipelineStatus) GetEndDate() string {
	if o == nil || o.EndDate == nil {
		var ret string
		return ret
	}
	return *o.EndDate
}

// GetEndDateOk returns a tuple with the EndDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PipelineStatus) GetEndDateOk() (*string, bool) {
	if o == nil || o.EndDate == nil {
		return nil, false
	}
	return o.EndDate, true
}

// HasEndDate returns a boolean if a field has been set.
func (o *PipelineStatus) HasEndDate() bool {
	if o != nil && o.EndDate != nil {
		return true
	}

	return false
}

// SetEndDate gets a reference to the given string and assigns it to the EndDate field.
func (o *PipelineStatus) SetEndDate(v string) {
	o.EndDate = &v
}

// GetRunId returns the RunId field value if set, zero value otherwise.
func (o *PipelineStatus) GetRunId() string {
	if o == nil || o.RunId == nil {
		var ret string
		return ret
	}
	return *o.RunId
}

// GetRunIdOk returns a tuple with the RunId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PipelineStatus) GetRunIdOk() (*string, bool) {
	if o == nil || o.RunId == nil {
		return nil, false
	}
	return o.RunId, true
}

// HasRunId returns a boolean if a field has been set.
func (o *PipelineStatus) HasRunId() bool {
	if o != nil && o.RunId != nil {
		return true
	}

	return false
}

// SetRunId gets a reference to the given string and assigns it to the RunId field.
func (o *PipelineStatus) SetRunId(v string) {
	o.RunId = &v
}

// GetStartDate returns the StartDate field value if set, zero value otherwise.
func (o *PipelineStatus) GetStartDate() string {
	if o == nil || o.StartDate == nil {
		var ret string
		return ret
	}
	return *o.StartDate
}

// GetStartDateOk returns a tuple with the StartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PipelineStatus) GetStartDateOk() (*string, bool) {
	if o == nil || o.StartDate == nil {
		return nil, false
	}
	return o.StartDate, true
}

// HasStartDate returns a boolean if a field has been set.
func (o *PipelineStatus) HasStartDate() bool {
	if o != nil && o.StartDate != nil {
		return true
	}

	return false
}

// SetStartDate gets a reference to the given string and assigns it to the StartDate field.
func (o *PipelineStatus) SetStartDate(v string) {
	o.StartDate = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *PipelineStatus) GetState() string {
	if o == nil || o.State == nil {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PipelineStatus) GetStateOk() (*string, bool) {
	if o == nil || o.State == nil {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *PipelineStatus) HasState() bool {
	if o != nil && o.State != nil {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *PipelineStatus) SetState(v string) {
	o.State = &v
}

func (o PipelineStatus) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.EndDate != nil {
		toSerialize["endDate"] = o.EndDate
	}
	if o.RunId != nil {
		toSerialize["runId"] = o.RunId
	}
	if o.StartDate != nil {
		toSerialize["startDate"] = o.StartDate
	}
	if o.State != nil {
		toSerialize["state"] = o.State
	}
	return json.Marshal(toSerialize)
}

type NullablePipelineStatus struct {
	value *PipelineStatus
	isSet bool
}

func (v NullablePipelineStatus) Get() *PipelineStatus {
	return v.value
}

func (v *NullablePipelineStatus) Set(val *PipelineStatus) {
	v.value = val
	v.isSet = true
}

func (v NullablePipelineStatus) IsSet() bool {
	return v.isSet
}

func (v *NullablePipelineStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePipelineStatus(val *PipelineStatus) *NullablePipelineStatus {
	return &NullablePipelineStatus{value: val, isSet: true}
}

func (v NullablePipelineStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePipelineStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
