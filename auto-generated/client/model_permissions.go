/*
OpenMetadata Apis

# Overview  OpenMetadata supports REST APIs for getting metadata in and out of metadata store. The API resources are grouped under following categories: - **Data assets** - includes resources for data entities, such as `databases`, `tables`, and `topics`. Resources for data assets created from data, such as `dashboards`, `reports`, `metrics`, and `ML Features` are part of this collection. `pipelines`, `notebooks`, etc. that are used for creating data assets are also available as resources as of this collection. - **Teams and Users** - includes `users`, `teams`, a special type of user called `bots` that performs many automated tasks such as ingestion. - **Services** - are services that OpenMetadata integrates with. Currently `databaseService` is the only service under this collection that represents data sources. In the future, services related to Dashboards, Reports, ETL pipelines will be added under this collection. - **Glossary** - OpenMetadata supports hierarchical tags that can be used to build business vocabulary to describe and classify data available under `tags` resource.

API version: 0.11.0
Contact: openmetadata-dev@googlegroups.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Permissions struct for Permissions
type Permissions struct {
	MetadataOperations *map[string]bool `json:"metadataOperations,omitempty"`
}

// NewPermissions instantiates a new Permissions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPermissions() *Permissions {
	this := Permissions{}
	return &this
}

// NewPermissionsWithDefaults instantiates a new Permissions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPermissionsWithDefaults() *Permissions {
	this := Permissions{}
	return &this
}

// GetMetadataOperations returns the MetadataOperations field value if set, zero value otherwise.
func (o *Permissions) GetMetadataOperations() map[string]bool {
	if o == nil || o.MetadataOperations == nil {
		var ret map[string]bool
		return ret
	}
	return *o.MetadataOperations
}

// GetMetadataOperationsOk returns a tuple with the MetadataOperations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Permissions) GetMetadataOperationsOk() (*map[string]bool, bool) {
	if o == nil || o.MetadataOperations == nil {
		return nil, false
	}
	return o.MetadataOperations, true
}

// HasMetadataOperations returns a boolean if a field has been set.
func (o *Permissions) HasMetadataOperations() bool {
	if o != nil && o.MetadataOperations != nil {
		return true
	}

	return false
}

// SetMetadataOperations gets a reference to the given map[string]bool and assigns it to the MetadataOperations field.
func (o *Permissions) SetMetadataOperations(v map[string]bool) {
	o.MetadataOperations = &v
}

func (o Permissions) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.MetadataOperations != nil {
		toSerialize["metadataOperations"] = o.MetadataOperations
	}
	return json.Marshal(toSerialize)
}

type NullablePermissions struct {
	value *Permissions
	isSet bool
}

func (v NullablePermissions) Get() *Permissions {
	return v.value
}

func (v *NullablePermissions) Set(val *Permissions) {
	v.value = val
	v.isSet = true
}

func (v NullablePermissions) IsSet() bool {
	return v.isSet
}

func (v *NullablePermissions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePermissions(val *Permissions) *NullablePermissions {
	return &NullablePermissions{value: val, isSet: true}
}

func (v NullablePermissions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePermissions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
