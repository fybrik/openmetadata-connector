/*
OpenMetadata Apis

# Overview  OpenMetadata supports REST APIs for getting metadata in and out of metadata store. The API resources are grouped under following categories: - **Data assets** - includes resources for data entities, such as `databases`, `tables`, and `topics`. Resources for data assets created from data, such as `dashboards`, `reports`, `metrics`, and `ML Features` are part of this collection. `pipelines`, `notebooks`, etc. that are used for creating data assets are also available as resources as of this collection. - **Teams and Users** - includes `users`, `teams`, a special type of user called `bots` that performs many automated tasks such as ingestion. - **Services** - are services that OpenMetadata integrates with. Currently `databaseService` is the only service under this collection that represents data sources. In the future, services related to Dashboards, Reports, ETL pipelines will be added under this collection. - **Glossary** - OpenMetadata supports hierarchical tags that can be used to build business vocabulary to describe and classify data available under `tags` resource.

API version: 0.11.0
Contact: openmetadata-dev@googlegroups.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// IngestionPipeline struct for IngestionPipeline
type IngestionPipeline struct {
	AirflowConfig                AirflowConfig                `json:"airflowConfig"`
	ChangeDescription            *ChangeDescription           `json:"changeDescription,omitempty"`
	Deleted                      *bool                        `json:"deleted,omitempty"`
	Deployed                     *bool                        `json:"deployed,omitempty"`
	Description                  *string                      `json:"description,omitempty"`
	DisplayName                  *string                      `json:"displayName,omitempty"`
	Enabled                      *bool                        `json:"enabled,omitempty"`
	Extension                    map[string]interface{}       `json:"extension,omitempty"`
	Followers                    []EntityReference            `json:"followers,omitempty"`
	FullyQualifiedName           *string                      `json:"fullyQualifiedName,omitempty"`
	Href                         *string                      `json:"href,omitempty"`
	Id                           *string                      `json:"id,omitempty"`
	LoggerLevel                  *string                      `json:"loggerLevel,omitempty"`
	Name                         string                       `json:"name"`
	OpenMetadataServerConnection OpenMetadataServerConnection `json:"openMetadataServerConnection"`
	Owner                        *EntityReference             `json:"owner,omitempty"`
	PipelineStatuses             []PipelineStatus             `json:"pipelineStatuses,omitempty"`
	PipelineType                 string                       `json:"pipelineType"`
	Service                      *EntityReference             `json:"service,omitempty"`
	SourceConfig                 SourceConfig                 `json:"sourceConfig"`
	Tags                         []TagLabel                   `json:"tags,omitempty"`
	UpdatedAt                    *int64                       `json:"updatedAt,omitempty"`
	UpdatedBy                    *string                      `json:"updatedBy,omitempty"`
	Version                      *float64                     `json:"version,omitempty"`
}

// NewIngestionPipeline instantiates a new IngestionPipeline object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIngestionPipeline(airflowConfig AirflowConfig, name string, openMetadataServerConnection OpenMetadataServerConnection, pipelineType string, sourceConfig SourceConfig) *IngestionPipeline {
	this := IngestionPipeline{}
	this.AirflowConfig = airflowConfig
	this.Name = name
	this.OpenMetadataServerConnection = openMetadataServerConnection
	this.PipelineType = pipelineType
	this.SourceConfig = sourceConfig
	return &this
}

// NewIngestionPipelineWithDefaults instantiates a new IngestionPipeline object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIngestionPipelineWithDefaults() *IngestionPipeline {
	this := IngestionPipeline{}
	return &this
}

// GetAirflowConfig returns the AirflowConfig field value
func (o *IngestionPipeline) GetAirflowConfig() AirflowConfig {
	if o == nil {
		var ret AirflowConfig
		return ret
	}

	return o.AirflowConfig
}

// GetAirflowConfigOk returns a tuple with the AirflowConfig field value
// and a boolean to check if the value has been set.
func (o *IngestionPipeline) GetAirflowConfigOk() (*AirflowConfig, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AirflowConfig, true
}

// SetAirflowConfig sets field value
func (o *IngestionPipeline) SetAirflowConfig(v AirflowConfig) {
	o.AirflowConfig = v
}

// GetChangeDescription returns the ChangeDescription field value if set, zero value otherwise.
func (o *IngestionPipeline) GetChangeDescription() ChangeDescription {
	if o == nil || o.ChangeDescription == nil {
		var ret ChangeDescription
		return ret
	}
	return *o.ChangeDescription
}

// GetChangeDescriptionOk returns a tuple with the ChangeDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IngestionPipeline) GetChangeDescriptionOk() (*ChangeDescription, bool) {
	if o == nil || o.ChangeDescription == nil {
		return nil, false
	}
	return o.ChangeDescription, true
}

// HasChangeDescription returns a boolean if a field has been set.
func (o *IngestionPipeline) HasChangeDescription() bool {
	if o != nil && o.ChangeDescription != nil {
		return true
	}

	return false
}

// SetChangeDescription gets a reference to the given ChangeDescription and assigns it to the ChangeDescription field.
func (o *IngestionPipeline) SetChangeDescription(v ChangeDescription) {
	o.ChangeDescription = &v
}

// GetDeleted returns the Deleted field value if set, zero value otherwise.
func (o *IngestionPipeline) GetDeleted() bool {
	if o == nil || o.Deleted == nil {
		var ret bool
		return ret
	}
	return *o.Deleted
}

// GetDeletedOk returns a tuple with the Deleted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IngestionPipeline) GetDeletedOk() (*bool, bool) {
	if o == nil || o.Deleted == nil {
		return nil, false
	}
	return o.Deleted, true
}

// HasDeleted returns a boolean if a field has been set.
func (o *IngestionPipeline) HasDeleted() bool {
	if o != nil && o.Deleted != nil {
		return true
	}

	return false
}

// SetDeleted gets a reference to the given bool and assigns it to the Deleted field.
func (o *IngestionPipeline) SetDeleted(v bool) {
	o.Deleted = &v
}

// GetDeployed returns the Deployed field value if set, zero value otherwise.
func (o *IngestionPipeline) GetDeployed() bool {
	if o == nil || o.Deployed == nil {
		var ret bool
		return ret
	}
	return *o.Deployed
}

// GetDeployedOk returns a tuple with the Deployed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IngestionPipeline) GetDeployedOk() (*bool, bool) {
	if o == nil || o.Deployed == nil {
		return nil, false
	}
	return o.Deployed, true
}

// HasDeployed returns a boolean if a field has been set.
func (o *IngestionPipeline) HasDeployed() bool {
	if o != nil && o.Deployed != nil {
		return true
	}

	return false
}

// SetDeployed gets a reference to the given bool and assigns it to the Deployed field.
func (o *IngestionPipeline) SetDeployed(v bool) {
	o.Deployed = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *IngestionPipeline) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IngestionPipeline) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *IngestionPipeline) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *IngestionPipeline) SetDescription(v string) {
	o.Description = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *IngestionPipeline) GetDisplayName() string {
	if o == nil || o.DisplayName == nil {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IngestionPipeline) GetDisplayNameOk() (*string, bool) {
	if o == nil || o.DisplayName == nil {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *IngestionPipeline) HasDisplayName() bool {
	if o != nil && o.DisplayName != nil {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *IngestionPipeline) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *IngestionPipeline) GetEnabled() bool {
	if o == nil || o.Enabled == nil {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IngestionPipeline) GetEnabledOk() (*bool, bool) {
	if o == nil || o.Enabled == nil {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *IngestionPipeline) HasEnabled() bool {
	if o != nil && o.Enabled != nil {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *IngestionPipeline) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetExtension returns the Extension field value if set, zero value otherwise.
func (o *IngestionPipeline) GetExtension() map[string]interface{} {
	if o == nil || o.Extension == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IngestionPipeline) GetExtensionOk() (map[string]interface{}, bool) {
	if o == nil || o.Extension == nil {
		return nil, false
	}
	return o.Extension, true
}

// HasExtension returns a boolean if a field has been set.
func (o *IngestionPipeline) HasExtension() bool {
	if o != nil && o.Extension != nil {
		return true
	}

	return false
}

// SetExtension gets a reference to the given map[string]interface{} and assigns it to the Extension field.
func (o *IngestionPipeline) SetExtension(v map[string]interface{}) {
	o.Extension = v
}

// GetFollowers returns the Followers field value if set, zero value otherwise.
func (o *IngestionPipeline) GetFollowers() []EntityReference {
	if o == nil || o.Followers == nil {
		var ret []EntityReference
		return ret
	}
	return o.Followers
}

// GetFollowersOk returns a tuple with the Followers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IngestionPipeline) GetFollowersOk() ([]EntityReference, bool) {
	if o == nil || o.Followers == nil {
		return nil, false
	}
	return o.Followers, true
}

// HasFollowers returns a boolean if a field has been set.
func (o *IngestionPipeline) HasFollowers() bool {
	if o != nil && o.Followers != nil {
		return true
	}

	return false
}

// SetFollowers gets a reference to the given []EntityReference and assigns it to the Followers field.
func (o *IngestionPipeline) SetFollowers(v []EntityReference) {
	o.Followers = v
}

// GetFullyQualifiedName returns the FullyQualifiedName field value if set, zero value otherwise.
func (o *IngestionPipeline) GetFullyQualifiedName() string {
	if o == nil || o.FullyQualifiedName == nil {
		var ret string
		return ret
	}
	return *o.FullyQualifiedName
}

// GetFullyQualifiedNameOk returns a tuple with the FullyQualifiedName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IngestionPipeline) GetFullyQualifiedNameOk() (*string, bool) {
	if o == nil || o.FullyQualifiedName == nil {
		return nil, false
	}
	return o.FullyQualifiedName, true
}

// HasFullyQualifiedName returns a boolean if a field has been set.
func (o *IngestionPipeline) HasFullyQualifiedName() bool {
	if o != nil && o.FullyQualifiedName != nil {
		return true
	}

	return false
}

// SetFullyQualifiedName gets a reference to the given string and assigns it to the FullyQualifiedName field.
func (o *IngestionPipeline) SetFullyQualifiedName(v string) {
	o.FullyQualifiedName = &v
}

// GetHref returns the Href field value if set, zero value otherwise.
func (o *IngestionPipeline) GetHref() string {
	if o == nil || o.Href == nil {
		var ret string
		return ret
	}
	return *o.Href
}

// GetHrefOk returns a tuple with the Href field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IngestionPipeline) GetHrefOk() (*string, bool) {
	if o == nil || o.Href == nil {
		return nil, false
	}
	return o.Href, true
}

// HasHref returns a boolean if a field has been set.
func (o *IngestionPipeline) HasHref() bool {
	if o != nil && o.Href != nil {
		return true
	}

	return false
}

// SetHref gets a reference to the given string and assigns it to the Href field.
func (o *IngestionPipeline) SetHref(v string) {
	o.Href = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *IngestionPipeline) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IngestionPipeline) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *IngestionPipeline) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *IngestionPipeline) SetId(v string) {
	o.Id = &v
}

// GetLoggerLevel returns the LoggerLevel field value if set, zero value otherwise.
func (o *IngestionPipeline) GetLoggerLevel() string {
	if o == nil || o.LoggerLevel == nil {
		var ret string
		return ret
	}
	return *o.LoggerLevel
}

// GetLoggerLevelOk returns a tuple with the LoggerLevel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IngestionPipeline) GetLoggerLevelOk() (*string, bool) {
	if o == nil || o.LoggerLevel == nil {
		return nil, false
	}
	return o.LoggerLevel, true
}

// HasLoggerLevel returns a boolean if a field has been set.
func (o *IngestionPipeline) HasLoggerLevel() bool {
	if o != nil && o.LoggerLevel != nil {
		return true
	}

	return false
}

// SetLoggerLevel gets a reference to the given string and assigns it to the LoggerLevel field.
func (o *IngestionPipeline) SetLoggerLevel(v string) {
	o.LoggerLevel = &v
}

// GetName returns the Name field value
func (o *IngestionPipeline) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *IngestionPipeline) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *IngestionPipeline) SetName(v string) {
	o.Name = v
}

// GetOpenMetadataServerConnection returns the OpenMetadataServerConnection field value
func (o *IngestionPipeline) GetOpenMetadataServerConnection() OpenMetadataServerConnection {
	if o == nil {
		var ret OpenMetadataServerConnection
		return ret
	}

	return o.OpenMetadataServerConnection
}

// GetOpenMetadataServerConnectionOk returns a tuple with the OpenMetadataServerConnection field value
// and a boolean to check if the value has been set.
func (o *IngestionPipeline) GetOpenMetadataServerConnectionOk() (*OpenMetadataServerConnection, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OpenMetadataServerConnection, true
}

// SetOpenMetadataServerConnection sets field value
func (o *IngestionPipeline) SetOpenMetadataServerConnection(v OpenMetadataServerConnection) {
	o.OpenMetadataServerConnection = v
}

// GetOwner returns the Owner field value if set, zero value otherwise.
func (o *IngestionPipeline) GetOwner() EntityReference {
	if o == nil || o.Owner == nil {
		var ret EntityReference
		return ret
	}
	return *o.Owner
}

// GetOwnerOk returns a tuple with the Owner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IngestionPipeline) GetOwnerOk() (*EntityReference, bool) {
	if o == nil || o.Owner == nil {
		return nil, false
	}
	return o.Owner, true
}

// HasOwner returns a boolean if a field has been set.
func (o *IngestionPipeline) HasOwner() bool {
	if o != nil && o.Owner != nil {
		return true
	}

	return false
}

// SetOwner gets a reference to the given EntityReference and assigns it to the Owner field.
func (o *IngestionPipeline) SetOwner(v EntityReference) {
	o.Owner = &v
}

// GetPipelineStatuses returns the PipelineStatuses field value if set, zero value otherwise.
func (o *IngestionPipeline) GetPipelineStatuses() []PipelineStatus {
	if o == nil || o.PipelineStatuses == nil {
		var ret []PipelineStatus
		return ret
	}
	return o.PipelineStatuses
}

// GetPipelineStatusesOk returns a tuple with the PipelineStatuses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IngestionPipeline) GetPipelineStatusesOk() ([]PipelineStatus, bool) {
	if o == nil || o.PipelineStatuses == nil {
		return nil, false
	}
	return o.PipelineStatuses, true
}

// HasPipelineStatuses returns a boolean if a field has been set.
func (o *IngestionPipeline) HasPipelineStatuses() bool {
	if o != nil && o.PipelineStatuses != nil {
		return true
	}

	return false
}

// SetPipelineStatuses gets a reference to the given []PipelineStatus and assigns it to the PipelineStatuses field.
func (o *IngestionPipeline) SetPipelineStatuses(v []PipelineStatus) {
	o.PipelineStatuses = v
}

// GetPipelineType returns the PipelineType field value
func (o *IngestionPipeline) GetPipelineType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PipelineType
}

// GetPipelineTypeOk returns a tuple with the PipelineType field value
// and a boolean to check if the value has been set.
func (o *IngestionPipeline) GetPipelineTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PipelineType, true
}

// SetPipelineType sets field value
func (o *IngestionPipeline) SetPipelineType(v string) {
	o.PipelineType = v
}

// GetService returns the Service field value if set, zero value otherwise.
func (o *IngestionPipeline) GetService() EntityReference {
	if o == nil || o.Service == nil {
		var ret EntityReference
		return ret
	}
	return *o.Service
}

// GetServiceOk returns a tuple with the Service field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IngestionPipeline) GetServiceOk() (*EntityReference, bool) {
	if o == nil || o.Service == nil {
		return nil, false
	}
	return o.Service, true
}

// HasService returns a boolean if a field has been set.
func (o *IngestionPipeline) HasService() bool {
	if o != nil && o.Service != nil {
		return true
	}

	return false
}

// SetService gets a reference to the given EntityReference and assigns it to the Service field.
func (o *IngestionPipeline) SetService(v EntityReference) {
	o.Service = &v
}

// GetSourceConfig returns the SourceConfig field value
func (o *IngestionPipeline) GetSourceConfig() SourceConfig {
	if o == nil {
		var ret SourceConfig
		return ret
	}

	return o.SourceConfig
}

// GetSourceConfigOk returns a tuple with the SourceConfig field value
// and a boolean to check if the value has been set.
func (o *IngestionPipeline) GetSourceConfigOk() (*SourceConfig, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SourceConfig, true
}

// SetSourceConfig sets field value
func (o *IngestionPipeline) SetSourceConfig(v SourceConfig) {
	o.SourceConfig = v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *IngestionPipeline) GetTags() []TagLabel {
	if o == nil || o.Tags == nil {
		var ret []TagLabel
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IngestionPipeline) GetTagsOk() ([]TagLabel, bool) {
	if o == nil || o.Tags == nil {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *IngestionPipeline) HasTags() bool {
	if o != nil && o.Tags != nil {
		return true
	}

	return false
}

// SetTags gets a reference to the given []TagLabel and assigns it to the Tags field.
func (o *IngestionPipeline) SetTags(v []TagLabel) {
	o.Tags = v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *IngestionPipeline) GetUpdatedAt() int64 {
	if o == nil || o.UpdatedAt == nil {
		var ret int64
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IngestionPipeline) GetUpdatedAtOk() (*int64, bool) {
	if o == nil || o.UpdatedAt == nil {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *IngestionPipeline) HasUpdatedAt() bool {
	if o != nil && o.UpdatedAt != nil {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given int64 and assigns it to the UpdatedAt field.
func (o *IngestionPipeline) SetUpdatedAt(v int64) {
	o.UpdatedAt = &v
}

// GetUpdatedBy returns the UpdatedBy field value if set, zero value otherwise.
func (o *IngestionPipeline) GetUpdatedBy() string {
	if o == nil || o.UpdatedBy == nil {
		var ret string
		return ret
	}
	return *o.UpdatedBy
}

// GetUpdatedByOk returns a tuple with the UpdatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IngestionPipeline) GetUpdatedByOk() (*string, bool) {
	if o == nil || o.UpdatedBy == nil {
		return nil, false
	}
	return o.UpdatedBy, true
}

// HasUpdatedBy returns a boolean if a field has been set.
func (o *IngestionPipeline) HasUpdatedBy() bool {
	if o != nil && o.UpdatedBy != nil {
		return true
	}

	return false
}

// SetUpdatedBy gets a reference to the given string and assigns it to the UpdatedBy field.
func (o *IngestionPipeline) SetUpdatedBy(v string) {
	o.UpdatedBy = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *IngestionPipeline) GetVersion() float64 {
	if o == nil || o.Version == nil {
		var ret float64
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IngestionPipeline) GetVersionOk() (*float64, bool) {
	if o == nil || o.Version == nil {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *IngestionPipeline) HasVersion() bool {
	if o != nil && o.Version != nil {
		return true
	}

	return false
}

// SetVersion gets a reference to the given float64 and assigns it to the Version field.
func (o *IngestionPipeline) SetVersion(v float64) {
	o.Version = &v
}

func (o IngestionPipeline) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["airflowConfig"] = o.AirflowConfig
	}
	if o.ChangeDescription != nil {
		toSerialize["changeDescription"] = o.ChangeDescription
	}
	if o.Deleted != nil {
		toSerialize["deleted"] = o.Deleted
	}
	if o.Deployed != nil {
		toSerialize["deployed"] = o.Deployed
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.DisplayName != nil {
		toSerialize["displayName"] = o.DisplayName
	}
	if o.Enabled != nil {
		toSerialize["enabled"] = o.Enabled
	}
	if o.Extension != nil {
		toSerialize["extension"] = o.Extension
	}
	if o.Followers != nil {
		toSerialize["followers"] = o.Followers
	}
	if o.FullyQualifiedName != nil {
		toSerialize["fullyQualifiedName"] = o.FullyQualifiedName
	}
	if o.Href != nil {
		toSerialize["href"] = o.Href
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.LoggerLevel != nil {
		toSerialize["loggerLevel"] = o.LoggerLevel
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["openMetadataServerConnection"] = o.OpenMetadataServerConnection
	}
	if o.Owner != nil {
		toSerialize["owner"] = o.Owner
	}
	if o.PipelineStatuses != nil {
		toSerialize["pipelineStatuses"] = o.PipelineStatuses
	}
	if true {
		toSerialize["pipelineType"] = o.PipelineType
	}
	if o.Service != nil {
		toSerialize["service"] = o.Service
	}
	if true {
		toSerialize["sourceConfig"] = o.SourceConfig
	}
	if o.Tags != nil {
		toSerialize["tags"] = o.Tags
	}
	if o.UpdatedAt != nil {
		toSerialize["updatedAt"] = o.UpdatedAt
	}
	if o.UpdatedBy != nil {
		toSerialize["updatedBy"] = o.UpdatedBy
	}
	if o.Version != nil {
		toSerialize["version"] = o.Version
	}
	return json.Marshal(toSerialize)
}

type NullableIngestionPipeline struct {
	value *IngestionPipeline
	isSet bool
}

func (v NullableIngestionPipeline) Get() *IngestionPipeline {
	return v.value
}

func (v *NullableIngestionPipeline) Set(val *IngestionPipeline) {
	v.value = val
	v.isSet = true
}

func (v NullableIngestionPipeline) IsSet() bool {
	return v.isSet
}

func (v *NullableIngestionPipeline) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIngestionPipeline(val *IngestionPipeline) *NullableIngestionPipeline {
	return &NullableIngestionPipeline{value: val, isSet: true}
}

func (v NullableIngestionPipeline) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIngestionPipeline) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
