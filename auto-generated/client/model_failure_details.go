/*
OpenMetadata Apis

# Overview  OpenMetadata supports REST APIs for getting metadata in and out of metadata store. The API resources are grouped under following categories: - **Data assets** - includes resources for data entities, such as `databases`, `tables`, and `topics`. Resources for data assets created from data, such as `dashboards`, `reports`, `metrics`, and `ML Features` are part of this collection. `pipelines`, `notebooks`, etc. that are used for creating data assets are also available as resources as of this collection. - **Teams and Users** - includes `users`, `teams`, a special type of user called `bots` that performs many automated tasks such as ingestion. - **Services** - are services that OpenMetadata integrates with. Currently `databaseService` is the only service under this collection that represents data sources. In the future, services related to Dashboards, Reports, ETL pipelines will be added under this collection. - **Glossary** - OpenMetadata supports hierarchical tags that can be used to build business vocabulary to describe and classify data available under `tags` resource.

API version: 0.11.0
Contact: openmetadata-dev@googlegroups.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// FailureDetails struct for FailureDetails
type FailureDetails struct {
	LastFailedAt         *int64  `json:"lastFailedAt,omitempty"`
	LastFailedReason     *string `json:"lastFailedReason,omitempty"`
	LastFailedStatusCode *int32  `json:"lastFailedStatusCode,omitempty"`
	LastSuccessfulAt     *int64  `json:"lastSuccessfulAt,omitempty"`
	NextAttempt          *int64  `json:"nextAttempt,omitempty"`
}

// NewFailureDetails instantiates a new FailureDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFailureDetails() *FailureDetails {
	this := FailureDetails{}
	return &this
}

// NewFailureDetailsWithDefaults instantiates a new FailureDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFailureDetailsWithDefaults() *FailureDetails {
	this := FailureDetails{}
	return &this
}

// GetLastFailedAt returns the LastFailedAt field value if set, zero value otherwise.
func (o *FailureDetails) GetLastFailedAt() int64 {
	if o == nil || o.LastFailedAt == nil {
		var ret int64
		return ret
	}
	return *o.LastFailedAt
}

// GetLastFailedAtOk returns a tuple with the LastFailedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FailureDetails) GetLastFailedAtOk() (*int64, bool) {
	if o == nil || o.LastFailedAt == nil {
		return nil, false
	}
	return o.LastFailedAt, true
}

// HasLastFailedAt returns a boolean if a field has been set.
func (o *FailureDetails) HasLastFailedAt() bool {
	if o != nil && o.LastFailedAt != nil {
		return true
	}

	return false
}

// SetLastFailedAt gets a reference to the given int64 and assigns it to the LastFailedAt field.
func (o *FailureDetails) SetLastFailedAt(v int64) {
	o.LastFailedAt = &v
}

// GetLastFailedReason returns the LastFailedReason field value if set, zero value otherwise.
func (o *FailureDetails) GetLastFailedReason() string {
	if o == nil || o.LastFailedReason == nil {
		var ret string
		return ret
	}
	return *o.LastFailedReason
}

// GetLastFailedReasonOk returns a tuple with the LastFailedReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FailureDetails) GetLastFailedReasonOk() (*string, bool) {
	if o == nil || o.LastFailedReason == nil {
		return nil, false
	}
	return o.LastFailedReason, true
}

// HasLastFailedReason returns a boolean if a field has been set.
func (o *FailureDetails) HasLastFailedReason() bool {
	if o != nil && o.LastFailedReason != nil {
		return true
	}

	return false
}

// SetLastFailedReason gets a reference to the given string and assigns it to the LastFailedReason field.
func (o *FailureDetails) SetLastFailedReason(v string) {
	o.LastFailedReason = &v
}

// GetLastFailedStatusCode returns the LastFailedStatusCode field value if set, zero value otherwise.
func (o *FailureDetails) GetLastFailedStatusCode() int32 {
	if o == nil || o.LastFailedStatusCode == nil {
		var ret int32
		return ret
	}
	return *o.LastFailedStatusCode
}

// GetLastFailedStatusCodeOk returns a tuple with the LastFailedStatusCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FailureDetails) GetLastFailedStatusCodeOk() (*int32, bool) {
	if o == nil || o.LastFailedStatusCode == nil {
		return nil, false
	}
	return o.LastFailedStatusCode, true
}

// HasLastFailedStatusCode returns a boolean if a field has been set.
func (o *FailureDetails) HasLastFailedStatusCode() bool {
	if o != nil && o.LastFailedStatusCode != nil {
		return true
	}

	return false
}

// SetLastFailedStatusCode gets a reference to the given int32 and assigns it to the LastFailedStatusCode field.
func (o *FailureDetails) SetLastFailedStatusCode(v int32) {
	o.LastFailedStatusCode = &v
}

// GetLastSuccessfulAt returns the LastSuccessfulAt field value if set, zero value otherwise.
func (o *FailureDetails) GetLastSuccessfulAt() int64 {
	if o == nil || o.LastSuccessfulAt == nil {
		var ret int64
		return ret
	}
	return *o.LastSuccessfulAt
}

// GetLastSuccessfulAtOk returns a tuple with the LastSuccessfulAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FailureDetails) GetLastSuccessfulAtOk() (*int64, bool) {
	if o == nil || o.LastSuccessfulAt == nil {
		return nil, false
	}
	return o.LastSuccessfulAt, true
}

// HasLastSuccessfulAt returns a boolean if a field has been set.
func (o *FailureDetails) HasLastSuccessfulAt() bool {
	if o != nil && o.LastSuccessfulAt != nil {
		return true
	}

	return false
}

// SetLastSuccessfulAt gets a reference to the given int64 and assigns it to the LastSuccessfulAt field.
func (o *FailureDetails) SetLastSuccessfulAt(v int64) {
	o.LastSuccessfulAt = &v
}

// GetNextAttempt returns the NextAttempt field value if set, zero value otherwise.
func (o *FailureDetails) GetNextAttempt() int64 {
	if o == nil || o.NextAttempt == nil {
		var ret int64
		return ret
	}
	return *o.NextAttempt
}

// GetNextAttemptOk returns a tuple with the NextAttempt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FailureDetails) GetNextAttemptOk() (*int64, bool) {
	if o == nil || o.NextAttempt == nil {
		return nil, false
	}
	return o.NextAttempt, true
}

// HasNextAttempt returns a boolean if a field has been set.
func (o *FailureDetails) HasNextAttempt() bool {
	if o != nil && o.NextAttempt != nil {
		return true
	}

	return false
}

// SetNextAttempt gets a reference to the given int64 and assigns it to the NextAttempt field.
func (o *FailureDetails) SetNextAttempt(v int64) {
	o.NextAttempt = &v
}

func (o FailureDetails) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.LastFailedAt != nil {
		toSerialize["lastFailedAt"] = o.LastFailedAt
	}
	if o.LastFailedReason != nil {
		toSerialize["lastFailedReason"] = o.LastFailedReason
	}
	if o.LastFailedStatusCode != nil {
		toSerialize["lastFailedStatusCode"] = o.LastFailedStatusCode
	}
	if o.LastSuccessfulAt != nil {
		toSerialize["lastSuccessfulAt"] = o.LastSuccessfulAt
	}
	if o.NextAttempt != nil {
		toSerialize["nextAttempt"] = o.NextAttempt
	}
	return json.Marshal(toSerialize)
}

type NullableFailureDetails struct {
	value *FailureDetails
	isSet bool
}

func (v NullableFailureDetails) Get() *FailureDetails {
	return v.value
}

func (v *NullableFailureDetails) Set(val *FailureDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableFailureDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableFailureDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFailureDetails(val *FailureDetails) *NullableFailureDetails {
	return &NullableFailureDetails{value: val, isSet: true}
}

func (v NullableFailureDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFailureDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
