/*
OpenMetadata Apis

# Overview  OpenMetadata supports REST APIs for getting metadata in and out of metadata store. The API resources are grouped under following categories: - **Data assets** - includes resources for data entities, such as `databases`, `tables`, and `topics`. Resources for data assets created from data, such as `dashboards`, `reports`, `metrics`, and `ML Features` are part of this collection. `pipelines`, `notebooks`, etc. that are used for creating data assets are also available as resources as of this collection. - **Teams and Users** - includes `users`, `teams`, a special type of user called `bots` that performs many automated tasks such as ingestion. - **Services** - are services that OpenMetadata integrates with. Currently `databaseService` is the only service under this collection that represents data sources. In the future, services related to Dashboards, Reports, ETL pipelines will be added under this collection. - **Glossary** - OpenMetadata supports hierarchical tags that can be used to build business vocabulary to describe and classify data available under `tags` resource.

API version: 0.11.0
Contact: openmetadata-dev@googlegroups.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ProfileResult struct for ProfileResult
type ProfileResult struct {
	DebugInfo         map[string]map[string]interface{} `json:"debugInfo,omitempty"`
	Fragment          *bool                             `json:"fragment,omitempty"`
	LuceneDescription *string                           `json:"luceneDescription,omitempty"`
	QueryName         *string                           `json:"queryName,omitempty"`
	Time              *int64                            `json:"time,omitempty"`
	TimeBreakdown     *map[string]int64                 `json:"timeBreakdown,omitempty"`
}

// NewProfileResult instantiates a new ProfileResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProfileResult() *ProfileResult {
	this := ProfileResult{}
	return &this
}

// NewProfileResultWithDefaults instantiates a new ProfileResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProfileResultWithDefaults() *ProfileResult {
	this := ProfileResult{}
	return &this
}

// GetDebugInfo returns the DebugInfo field value if set, zero value otherwise.
func (o *ProfileResult) GetDebugInfo() map[string]map[string]interface{} {
	if o == nil || o.DebugInfo == nil {
		var ret map[string]map[string]interface{}
		return ret
	}
	return o.DebugInfo
}

// GetDebugInfoOk returns a tuple with the DebugInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileResult) GetDebugInfoOk() (map[string]map[string]interface{}, bool) {
	if o == nil || o.DebugInfo == nil {
		return nil, false
	}
	return o.DebugInfo, true
}

// HasDebugInfo returns a boolean if a field has been set.
func (o *ProfileResult) HasDebugInfo() bool {
	if o != nil && o.DebugInfo != nil {
		return true
	}

	return false
}

// SetDebugInfo gets a reference to the given map[string]map[string]interface{} and assigns it to the DebugInfo field.
func (o *ProfileResult) SetDebugInfo(v map[string]map[string]interface{}) {
	o.DebugInfo = v
}

// GetFragment returns the Fragment field value if set, zero value otherwise.
func (o *ProfileResult) GetFragment() bool {
	if o == nil || o.Fragment == nil {
		var ret bool
		return ret
	}
	return *o.Fragment
}

// GetFragmentOk returns a tuple with the Fragment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileResult) GetFragmentOk() (*bool, bool) {
	if o == nil || o.Fragment == nil {
		return nil, false
	}
	return o.Fragment, true
}

// HasFragment returns a boolean if a field has been set.
func (o *ProfileResult) HasFragment() bool {
	if o != nil && o.Fragment != nil {
		return true
	}

	return false
}

// SetFragment gets a reference to the given bool and assigns it to the Fragment field.
func (o *ProfileResult) SetFragment(v bool) {
	o.Fragment = &v
}

// GetLuceneDescription returns the LuceneDescription field value if set, zero value otherwise.
func (o *ProfileResult) GetLuceneDescription() string {
	if o == nil || o.LuceneDescription == nil {
		var ret string
		return ret
	}
	return *o.LuceneDescription
}

// GetLuceneDescriptionOk returns a tuple with the LuceneDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileResult) GetLuceneDescriptionOk() (*string, bool) {
	if o == nil || o.LuceneDescription == nil {
		return nil, false
	}
	return o.LuceneDescription, true
}

// HasLuceneDescription returns a boolean if a field has been set.
func (o *ProfileResult) HasLuceneDescription() bool {
	if o != nil && o.LuceneDescription != nil {
		return true
	}

	return false
}

// SetLuceneDescription gets a reference to the given string and assigns it to the LuceneDescription field.
func (o *ProfileResult) SetLuceneDescription(v string) {
	o.LuceneDescription = &v
}

// GetQueryName returns the QueryName field value if set, zero value otherwise.
func (o *ProfileResult) GetQueryName() string {
	if o == nil || o.QueryName == nil {
		var ret string
		return ret
	}
	return *o.QueryName
}

// GetQueryNameOk returns a tuple with the QueryName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileResult) GetQueryNameOk() (*string, bool) {
	if o == nil || o.QueryName == nil {
		return nil, false
	}
	return o.QueryName, true
}

// HasQueryName returns a boolean if a field has been set.
func (o *ProfileResult) HasQueryName() bool {
	if o != nil && o.QueryName != nil {
		return true
	}

	return false
}

// SetQueryName gets a reference to the given string and assigns it to the QueryName field.
func (o *ProfileResult) SetQueryName(v string) {
	o.QueryName = &v
}

// GetTime returns the Time field value if set, zero value otherwise.
func (o *ProfileResult) GetTime() int64 {
	if o == nil || o.Time == nil {
		var ret int64
		return ret
	}
	return *o.Time
}

// GetTimeOk returns a tuple with the Time field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileResult) GetTimeOk() (*int64, bool) {
	if o == nil || o.Time == nil {
		return nil, false
	}
	return o.Time, true
}

// HasTime returns a boolean if a field has been set.
func (o *ProfileResult) HasTime() bool {
	if o != nil && o.Time != nil {
		return true
	}

	return false
}

// SetTime gets a reference to the given int64 and assigns it to the Time field.
func (o *ProfileResult) SetTime(v int64) {
	o.Time = &v
}

// GetTimeBreakdown returns the TimeBreakdown field value if set, zero value otherwise.
func (o *ProfileResult) GetTimeBreakdown() map[string]int64 {
	if o == nil || o.TimeBreakdown == nil {
		var ret map[string]int64
		return ret
	}
	return *o.TimeBreakdown
}

// GetTimeBreakdownOk returns a tuple with the TimeBreakdown field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileResult) GetTimeBreakdownOk() (*map[string]int64, bool) {
	if o == nil || o.TimeBreakdown == nil {
		return nil, false
	}
	return o.TimeBreakdown, true
}

// HasTimeBreakdown returns a boolean if a field has been set.
func (o *ProfileResult) HasTimeBreakdown() bool {
	if o != nil && o.TimeBreakdown != nil {
		return true
	}

	return false
}

// SetTimeBreakdown gets a reference to the given map[string]int64 and assigns it to the TimeBreakdown field.
func (o *ProfileResult) SetTimeBreakdown(v map[string]int64) {
	o.TimeBreakdown = &v
}

func (o ProfileResult) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DebugInfo != nil {
		toSerialize["debugInfo"] = o.DebugInfo
	}
	if o.Fragment != nil {
		toSerialize["fragment"] = o.Fragment
	}
	if o.LuceneDescription != nil {
		toSerialize["luceneDescription"] = o.LuceneDescription
	}
	if o.QueryName != nil {
		toSerialize["queryName"] = o.QueryName
	}
	if o.Time != nil {
		toSerialize["time"] = o.Time
	}
	if o.TimeBreakdown != nil {
		toSerialize["timeBreakdown"] = o.TimeBreakdown
	}
	return json.Marshal(toSerialize)
}

type NullableProfileResult struct {
	value *ProfileResult
	isSet bool
}

func (v NullableProfileResult) Get() *ProfileResult {
	return v.value
}

func (v *NullableProfileResult) Set(val *ProfileResult) {
	v.value = val
	v.isSet = true
}

func (v NullableProfileResult) IsSet() bool {
	return v.isSet
}

func (v *NullableProfileResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProfileResult(val *ProfileResult) *NullableProfileResult {
	return &NullableProfileResult{value: val, isSet: true}
}

func (v NullableProfileResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProfileResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
