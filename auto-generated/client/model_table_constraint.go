/*
OpenMetadata Apis

# Overview  OpenMetadata supports REST APIs for getting metadata in and out of metadata store. The API resources are grouped under following categories: - **Data assets** - includes resources for data entities, such as `databases`, `tables`, and `topics`. Resources for data assets created from data, such as `dashboards`, `reports`, `metrics`, and `ML Features` are part of this collection. `pipelines`, `notebooks`, etc. that are used for creating data assets are also available as resources as of this collection. - **Teams and Users** - includes `users`, `teams`, a special type of user called `bots` that performs many automated tasks such as ingestion. - **Services** - are services that OpenMetadata integrates with. Currently `databaseService` is the only service under this collection that represents data sources. In the future, services related to Dashboards, Reports, ETL pipelines will be added under this collection. - **Glossary** - OpenMetadata supports hierarchical tags that can be used to build business vocabulary to describe and classify data available under `tags` resource.

API version: 0.11.0
Contact: openmetadata-dev@googlegroups.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// TableConstraint struct for TableConstraint
type TableConstraint struct {
	Columns        []string `json:"columns,omitempty"`
	ConstraintType *string  `json:"constraintType,omitempty"`
}

// NewTableConstraint instantiates a new TableConstraint object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTableConstraint() *TableConstraint {
	this := TableConstraint{}
	return &this
}

// NewTableConstraintWithDefaults instantiates a new TableConstraint object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTableConstraintWithDefaults() *TableConstraint {
	this := TableConstraint{}
	return &this
}

// GetColumns returns the Columns field value if set, zero value otherwise.
func (o *TableConstraint) GetColumns() []string {
	if o == nil || o.Columns == nil {
		var ret []string
		return ret
	}
	return o.Columns
}

// GetColumnsOk returns a tuple with the Columns field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TableConstraint) GetColumnsOk() ([]string, bool) {
	if o == nil || o.Columns == nil {
		return nil, false
	}
	return o.Columns, true
}

// HasColumns returns a boolean if a field has been set.
func (o *TableConstraint) HasColumns() bool {
	if o != nil && o.Columns != nil {
		return true
	}

	return false
}

// SetColumns gets a reference to the given []string and assigns it to the Columns field.
func (o *TableConstraint) SetColumns(v []string) {
	o.Columns = v
}

// GetConstraintType returns the ConstraintType field value if set, zero value otherwise.
func (o *TableConstraint) GetConstraintType() string {
	if o == nil || o.ConstraintType == nil {
		var ret string
		return ret
	}
	return *o.ConstraintType
}

// GetConstraintTypeOk returns a tuple with the ConstraintType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TableConstraint) GetConstraintTypeOk() (*string, bool) {
	if o == nil || o.ConstraintType == nil {
		return nil, false
	}
	return o.ConstraintType, true
}

// HasConstraintType returns a boolean if a field has been set.
func (o *TableConstraint) HasConstraintType() bool {
	if o != nil && o.ConstraintType != nil {
		return true
	}

	return false
}

// SetConstraintType gets a reference to the given string and assigns it to the ConstraintType field.
func (o *TableConstraint) SetConstraintType(v string) {
	o.ConstraintType = &v
}

func (o TableConstraint) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Columns != nil {
		toSerialize["columns"] = o.Columns
	}
	if o.ConstraintType != nil {
		toSerialize["constraintType"] = o.ConstraintType
	}
	return json.Marshal(toSerialize)
}

type NullableTableConstraint struct {
	value *TableConstraint
	isSet bool
}

func (v NullableTableConstraint) Get() *TableConstraint {
	return v.value
}

func (v *NullableTableConstraint) Set(val *TableConstraint) {
	v.value = val
	v.isSet = true
}

func (v NullableTableConstraint) IsSet() bool {
	return v.isSet
}

func (v *NullableTableConstraint) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTableConstraint(val *TableConstraint) *NullableTableConstraint {
	return &NullableTableConstraint{value: val, isSet: true}
}

func (v NullableTableConstraint) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTableConstraint) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
