/*
OpenMetadata Apis

# Overview  OpenMetadata supports REST APIs for getting metadata in and out of metadata store. The API resources are grouped under following categories: - **Data assets** - includes resources for data entities, such as `databases`, `tables`, and `topics`. Resources for data assets created from data, such as `dashboards`, `reports`, `metrics`, and `ML Features` are part of this collection. `pipelines`, `notebooks`, etc. that are used for creating data assets are also available as resources as of this collection. - **Teams and Users** - includes `users`, `teams`, a special type of user called `bots` that performs many automated tasks such as ingestion. - **Services** - are services that OpenMetadata integrates with. Currently `databaseService` is the only service under this collection that represents data sources. In the future, services related to Dashboards, Reports, ETL pipelines will be added under this collection. - **Glossary** - OpenMetadata supports hierarchical tags that can be used to build business vocabulary to describe and classify data available under `tags` resource.

API version: 0.11.0
Contact: openmetadata-dev@googlegroups.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// TestCaseResult struct for TestCaseResult
type TestCaseResult struct {
	ExecutionTime  *int64  `json:"executionTime,omitempty"`
	Result         *string `json:"result,omitempty"`
	SampleData     *string `json:"sampleData,omitempty"`
	TestCaseStatus *string `json:"testCaseStatus,omitempty"`
}

// NewTestCaseResult instantiates a new TestCaseResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTestCaseResult() *TestCaseResult {
	this := TestCaseResult{}
	return &this
}

// NewTestCaseResultWithDefaults instantiates a new TestCaseResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTestCaseResultWithDefaults() *TestCaseResult {
	this := TestCaseResult{}
	return &this
}

// GetExecutionTime returns the ExecutionTime field value if set, zero value otherwise.
func (o *TestCaseResult) GetExecutionTime() int64 {
	if o == nil || o.ExecutionTime == nil {
		var ret int64
		return ret
	}
	return *o.ExecutionTime
}

// GetExecutionTimeOk returns a tuple with the ExecutionTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestCaseResult) GetExecutionTimeOk() (*int64, bool) {
	if o == nil || o.ExecutionTime == nil {
		return nil, false
	}
	return o.ExecutionTime, true
}

// HasExecutionTime returns a boolean if a field has been set.
func (o *TestCaseResult) HasExecutionTime() bool {
	if o != nil && o.ExecutionTime != nil {
		return true
	}

	return false
}

// SetExecutionTime gets a reference to the given int64 and assigns it to the ExecutionTime field.
func (o *TestCaseResult) SetExecutionTime(v int64) {
	o.ExecutionTime = &v
}

// GetResult returns the Result field value if set, zero value otherwise.
func (o *TestCaseResult) GetResult() string {
	if o == nil || o.Result == nil {
		var ret string
		return ret
	}
	return *o.Result
}

// GetResultOk returns a tuple with the Result field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestCaseResult) GetResultOk() (*string, bool) {
	if o == nil || o.Result == nil {
		return nil, false
	}
	return o.Result, true
}

// HasResult returns a boolean if a field has been set.
func (o *TestCaseResult) HasResult() bool {
	if o != nil && o.Result != nil {
		return true
	}

	return false
}

// SetResult gets a reference to the given string and assigns it to the Result field.
func (o *TestCaseResult) SetResult(v string) {
	o.Result = &v
}

// GetSampleData returns the SampleData field value if set, zero value otherwise.
func (o *TestCaseResult) GetSampleData() string {
	if o == nil || o.SampleData == nil {
		var ret string
		return ret
	}
	return *o.SampleData
}

// GetSampleDataOk returns a tuple with the SampleData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestCaseResult) GetSampleDataOk() (*string, bool) {
	if o == nil || o.SampleData == nil {
		return nil, false
	}
	return o.SampleData, true
}

// HasSampleData returns a boolean if a field has been set.
func (o *TestCaseResult) HasSampleData() bool {
	if o != nil && o.SampleData != nil {
		return true
	}

	return false
}

// SetSampleData gets a reference to the given string and assigns it to the SampleData field.
func (o *TestCaseResult) SetSampleData(v string) {
	o.SampleData = &v
}

// GetTestCaseStatus returns the TestCaseStatus field value if set, zero value otherwise.
func (o *TestCaseResult) GetTestCaseStatus() string {
	if o == nil || o.TestCaseStatus == nil {
		var ret string
		return ret
	}
	return *o.TestCaseStatus
}

// GetTestCaseStatusOk returns a tuple with the TestCaseStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestCaseResult) GetTestCaseStatusOk() (*string, bool) {
	if o == nil || o.TestCaseStatus == nil {
		return nil, false
	}
	return o.TestCaseStatus, true
}

// HasTestCaseStatus returns a boolean if a field has been set.
func (o *TestCaseResult) HasTestCaseStatus() bool {
	if o != nil && o.TestCaseStatus != nil {
		return true
	}

	return false
}

// SetTestCaseStatus gets a reference to the given string and assigns it to the TestCaseStatus field.
func (o *TestCaseResult) SetTestCaseStatus(v string) {
	o.TestCaseStatus = &v
}

func (o TestCaseResult) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ExecutionTime != nil {
		toSerialize["executionTime"] = o.ExecutionTime
	}
	if o.Result != nil {
		toSerialize["result"] = o.Result
	}
	if o.SampleData != nil {
		toSerialize["sampleData"] = o.SampleData
	}
	if o.TestCaseStatus != nil {
		toSerialize["testCaseStatus"] = o.TestCaseStatus
	}
	return json.Marshal(toSerialize)
}

type NullableTestCaseResult struct {
	value *TestCaseResult
	isSet bool
}

func (v NullableTestCaseResult) Get() *TestCaseResult {
	return v.value
}

func (v *NullableTestCaseResult) Set(val *TestCaseResult) {
	v.value = val
	v.isSet = true
}

func (v NullableTestCaseResult) IsSet() bool {
	return v.isSet
}

func (v *NullableTestCaseResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTestCaseResult(val *TestCaseResult) *NullableTestCaseResult {
	return &NullableTestCaseResult{value: val, isSet: true}
}

func (v NullableTestCaseResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTestCaseResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
