/*
OpenMetadata Apis

# Overview  OpenMetadata supports REST APIs for getting metadata in and out of metadata store. The API resources are grouped under following categories: - **Data assets** - includes resources for data entities, such as `databases`, `tables`, and `topics`. Resources for data assets created from data, such as `dashboards`, `reports`, `metrics`, and `ML Features` are part of this collection. `pipelines`, `notebooks`, etc. that are used for creating data assets are also available as resources as of this collection. - **Teams and Users** - includes `users`, `teams`, a special type of user called `bots` that performs many automated tasks such as ingestion. - **Services** - are services that OpenMetadata integrates with. Currently `databaseService` is the only service under this collection that represents data sources. In the future, services related to Dashboards, Reports, ETL pipelines will be added under this collection. - **Glossary** - OpenMetadata supports hierarchical tags that can be used to build business vocabulary to describe and classify data available under `tags` resource.

API version: 0.11.0
Contact: openmetadata-dev@googlegroups.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ColumnTest struct for ColumnTest
type ColumnTest struct {
	ColumnName         string           `json:"columnName"`
	Description        *string          `json:"description,omitempty"`
	ExecutionFrequency *string          `json:"executionFrequency,omitempty"`
	Id                 *string          `json:"id,omitempty"`
	Name               string           `json:"name"`
	Owner              *EntityReference `json:"owner,omitempty"`
	Results            []TestCaseResult `json:"results,omitempty"`
	TestCase           ColumnTestCase   `json:"testCase"`
	UpdatedAt          *int64           `json:"updatedAt,omitempty"`
	UpdatedBy          *string          `json:"updatedBy,omitempty"`
}

// NewColumnTest instantiates a new ColumnTest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewColumnTest(columnName string, name string, testCase ColumnTestCase) *ColumnTest {
	this := ColumnTest{}
	this.ColumnName = columnName
	this.Name = name
	this.TestCase = testCase
	return &this
}

// NewColumnTestWithDefaults instantiates a new ColumnTest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewColumnTestWithDefaults() *ColumnTest {
	this := ColumnTest{}
	return &this
}

// GetColumnName returns the ColumnName field value
func (o *ColumnTest) GetColumnName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ColumnName
}

// GetColumnNameOk returns a tuple with the ColumnName field value
// and a boolean to check if the value has been set.
func (o *ColumnTest) GetColumnNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ColumnName, true
}

// SetColumnName sets field value
func (o *ColumnTest) SetColumnName(v string) {
	o.ColumnName = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ColumnTest) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ColumnTest) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ColumnTest) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ColumnTest) SetDescription(v string) {
	o.Description = &v
}

// GetExecutionFrequency returns the ExecutionFrequency field value if set, zero value otherwise.
func (o *ColumnTest) GetExecutionFrequency() string {
	if o == nil || o.ExecutionFrequency == nil {
		var ret string
		return ret
	}
	return *o.ExecutionFrequency
}

// GetExecutionFrequencyOk returns a tuple with the ExecutionFrequency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ColumnTest) GetExecutionFrequencyOk() (*string, bool) {
	if o == nil || o.ExecutionFrequency == nil {
		return nil, false
	}
	return o.ExecutionFrequency, true
}

// HasExecutionFrequency returns a boolean if a field has been set.
func (o *ColumnTest) HasExecutionFrequency() bool {
	if o != nil && o.ExecutionFrequency != nil {
		return true
	}

	return false
}

// SetExecutionFrequency gets a reference to the given string and assigns it to the ExecutionFrequency field.
func (o *ColumnTest) SetExecutionFrequency(v string) {
	o.ExecutionFrequency = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ColumnTest) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ColumnTest) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ColumnTest) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ColumnTest) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value
func (o *ColumnTest) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ColumnTest) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ColumnTest) SetName(v string) {
	o.Name = v
}

// GetOwner returns the Owner field value if set, zero value otherwise.
func (o *ColumnTest) GetOwner() EntityReference {
	if o == nil || o.Owner == nil {
		var ret EntityReference
		return ret
	}
	return *o.Owner
}

// GetOwnerOk returns a tuple with the Owner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ColumnTest) GetOwnerOk() (*EntityReference, bool) {
	if o == nil || o.Owner == nil {
		return nil, false
	}
	return o.Owner, true
}

// HasOwner returns a boolean if a field has been set.
func (o *ColumnTest) HasOwner() bool {
	if o != nil && o.Owner != nil {
		return true
	}

	return false
}

// SetOwner gets a reference to the given EntityReference and assigns it to the Owner field.
func (o *ColumnTest) SetOwner(v EntityReference) {
	o.Owner = &v
}

// GetResults returns the Results field value if set, zero value otherwise.
func (o *ColumnTest) GetResults() []TestCaseResult {
	if o == nil || o.Results == nil {
		var ret []TestCaseResult
		return ret
	}
	return o.Results
}

// GetResultsOk returns a tuple with the Results field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ColumnTest) GetResultsOk() ([]TestCaseResult, bool) {
	if o == nil || o.Results == nil {
		return nil, false
	}
	return o.Results, true
}

// HasResults returns a boolean if a field has been set.
func (o *ColumnTest) HasResults() bool {
	if o != nil && o.Results != nil {
		return true
	}

	return false
}

// SetResults gets a reference to the given []TestCaseResult and assigns it to the Results field.
func (o *ColumnTest) SetResults(v []TestCaseResult) {
	o.Results = v
}

// GetTestCase returns the TestCase field value
func (o *ColumnTest) GetTestCase() ColumnTestCase {
	if o == nil {
		var ret ColumnTestCase
		return ret
	}

	return o.TestCase
}

// GetTestCaseOk returns a tuple with the TestCase field value
// and a boolean to check if the value has been set.
func (o *ColumnTest) GetTestCaseOk() (*ColumnTestCase, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TestCase, true
}

// SetTestCase sets field value
func (o *ColumnTest) SetTestCase(v ColumnTestCase) {
	o.TestCase = v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *ColumnTest) GetUpdatedAt() int64 {
	if o == nil || o.UpdatedAt == nil {
		var ret int64
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ColumnTest) GetUpdatedAtOk() (*int64, bool) {
	if o == nil || o.UpdatedAt == nil {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *ColumnTest) HasUpdatedAt() bool {
	if o != nil && o.UpdatedAt != nil {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given int64 and assigns it to the UpdatedAt field.
func (o *ColumnTest) SetUpdatedAt(v int64) {
	o.UpdatedAt = &v
}

// GetUpdatedBy returns the UpdatedBy field value if set, zero value otherwise.
func (o *ColumnTest) GetUpdatedBy() string {
	if o == nil || o.UpdatedBy == nil {
		var ret string
		return ret
	}
	return *o.UpdatedBy
}

// GetUpdatedByOk returns a tuple with the UpdatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ColumnTest) GetUpdatedByOk() (*string, bool) {
	if o == nil || o.UpdatedBy == nil {
		return nil, false
	}
	return o.UpdatedBy, true
}

// HasUpdatedBy returns a boolean if a field has been set.
func (o *ColumnTest) HasUpdatedBy() bool {
	if o != nil && o.UpdatedBy != nil {
		return true
	}

	return false
}

// SetUpdatedBy gets a reference to the given string and assigns it to the UpdatedBy field.
func (o *ColumnTest) SetUpdatedBy(v string) {
	o.UpdatedBy = &v
}

func (o ColumnTest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["columnName"] = o.ColumnName
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.ExecutionFrequency != nil {
		toSerialize["executionFrequency"] = o.ExecutionFrequency
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if o.Owner != nil {
		toSerialize["owner"] = o.Owner
	}
	if o.Results != nil {
		toSerialize["results"] = o.Results
	}
	if true {
		toSerialize["testCase"] = o.TestCase
	}
	if o.UpdatedAt != nil {
		toSerialize["updatedAt"] = o.UpdatedAt
	}
	if o.UpdatedBy != nil {
		toSerialize["updatedBy"] = o.UpdatedBy
	}
	return json.Marshal(toSerialize)
}

type NullableColumnTest struct {
	value *ColumnTest
	isSet bool
}

func (v NullableColumnTest) Get() *ColumnTest {
	return v.value
}

func (v *NullableColumnTest) Set(val *ColumnTest) {
	v.value = val
	v.isSet = true
}

func (v NullableColumnTest) IsSet() bool {
	return v.isSet
}

func (v *NullableColumnTest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableColumnTest(val *ColumnTest) *NullableColumnTest {
	return &NullableColumnTest{value: val, isSet: true}
}

func (v NullableColumnTest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableColumnTest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
