/*
OpenMetadata Apis

# Overview  OpenMetadata supports REST APIs for getting metadata in and out of metadata store. The API resources are grouped under following categories: - **Data assets** - includes resources for data entities, such as `databases`, `tables`, and `topics`. Resources for data assets created from data, such as `dashboards`, `reports`, `metrics`, and `ML Features` are part of this collection. `pipelines`, `notebooks`, etc. that are used for creating data assets are also available as resources as of this collection. - **Teams and Users** - includes `users`, `teams`, a special type of user called `bots` that performs many automated tasks such as ingestion. - **Services** - are services that OpenMetadata integrates with. Currently `databaseService` is the only service under this collection that represents data sources. In the future, services related to Dashboards, Reports, ETL pipelines will be added under this collection. - **Glossary** - OpenMetadata supports hierarchical tags that can be used to build business vocabulary to describe and classify data available under `tags` resource.

API version: 0.11.0
Contact: openmetadata-dev@googlegroups.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// CreateTeam struct for CreateTeam
type CreateTeam struct {
	DefaultRoles []string               `json:"defaultRoles,omitempty"`
	Description  *string                `json:"description,omitempty"`
	DisplayName  *string                `json:"displayName,omitempty"`
	Extension    map[string]interface{} `json:"extension,omitempty"`
	IsJoinable   *bool                  `json:"isJoinable,omitempty"`
	Name         string                 `json:"name"`
	Owner        *EntityReference       `json:"owner,omitempty"`
	Profile      *Profile               `json:"profile,omitempty"`
	Users        []string               `json:"users,omitempty"`
}

// NewCreateTeam instantiates a new CreateTeam object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateTeam(name string) *CreateTeam {
	this := CreateTeam{}
	this.Name = name
	return &this
}

// NewCreateTeamWithDefaults instantiates a new CreateTeam object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateTeamWithDefaults() *CreateTeam {
	this := CreateTeam{}
	return &this
}

// GetDefaultRoles returns the DefaultRoles field value if set, zero value otherwise.
func (o *CreateTeam) GetDefaultRoles() []string {
	if o == nil || o.DefaultRoles == nil {
		var ret []string
		return ret
	}
	return o.DefaultRoles
}

// GetDefaultRolesOk returns a tuple with the DefaultRoles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateTeam) GetDefaultRolesOk() ([]string, bool) {
	if o == nil || o.DefaultRoles == nil {
		return nil, false
	}
	return o.DefaultRoles, true
}

// HasDefaultRoles returns a boolean if a field has been set.
func (o *CreateTeam) HasDefaultRoles() bool {
	if o != nil && o.DefaultRoles != nil {
		return true
	}

	return false
}

// SetDefaultRoles gets a reference to the given []string and assigns it to the DefaultRoles field.
func (o *CreateTeam) SetDefaultRoles(v []string) {
	o.DefaultRoles = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *CreateTeam) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateTeam) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *CreateTeam) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *CreateTeam) SetDescription(v string) {
	o.Description = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *CreateTeam) GetDisplayName() string {
	if o == nil || o.DisplayName == nil {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateTeam) GetDisplayNameOk() (*string, bool) {
	if o == nil || o.DisplayName == nil {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *CreateTeam) HasDisplayName() bool {
	if o != nil && o.DisplayName != nil {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *CreateTeam) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetExtension returns the Extension field value if set, zero value otherwise.
func (o *CreateTeam) GetExtension() map[string]interface{} {
	if o == nil || o.Extension == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateTeam) GetExtensionOk() (map[string]interface{}, bool) {
	if o == nil || o.Extension == nil {
		return nil, false
	}
	return o.Extension, true
}

// HasExtension returns a boolean if a field has been set.
func (o *CreateTeam) HasExtension() bool {
	if o != nil && o.Extension != nil {
		return true
	}

	return false
}

// SetExtension gets a reference to the given map[string]interface{} and assigns it to the Extension field.
func (o *CreateTeam) SetExtension(v map[string]interface{}) {
	o.Extension = v
}

// GetIsJoinable returns the IsJoinable field value if set, zero value otherwise.
func (o *CreateTeam) GetIsJoinable() bool {
	if o == nil || o.IsJoinable == nil {
		var ret bool
		return ret
	}
	return *o.IsJoinable
}

// GetIsJoinableOk returns a tuple with the IsJoinable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateTeam) GetIsJoinableOk() (*bool, bool) {
	if o == nil || o.IsJoinable == nil {
		return nil, false
	}
	return o.IsJoinable, true
}

// HasIsJoinable returns a boolean if a field has been set.
func (o *CreateTeam) HasIsJoinable() bool {
	if o != nil && o.IsJoinable != nil {
		return true
	}

	return false
}

// SetIsJoinable gets a reference to the given bool and assigns it to the IsJoinable field.
func (o *CreateTeam) SetIsJoinable(v bool) {
	o.IsJoinable = &v
}

// GetName returns the Name field value
func (o *CreateTeam) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CreateTeam) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *CreateTeam) SetName(v string) {
	o.Name = v
}

// GetOwner returns the Owner field value if set, zero value otherwise.
func (o *CreateTeam) GetOwner() EntityReference {
	if o == nil || o.Owner == nil {
		var ret EntityReference
		return ret
	}
	return *o.Owner
}

// GetOwnerOk returns a tuple with the Owner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateTeam) GetOwnerOk() (*EntityReference, bool) {
	if o == nil || o.Owner == nil {
		return nil, false
	}
	return o.Owner, true
}

// HasOwner returns a boolean if a field has been set.
func (o *CreateTeam) HasOwner() bool {
	if o != nil && o.Owner != nil {
		return true
	}

	return false
}

// SetOwner gets a reference to the given EntityReference and assigns it to the Owner field.
func (o *CreateTeam) SetOwner(v EntityReference) {
	o.Owner = &v
}

// GetProfile returns the Profile field value if set, zero value otherwise.
func (o *CreateTeam) GetProfile() Profile {
	if o == nil || o.Profile == nil {
		var ret Profile
		return ret
	}
	return *o.Profile
}

// GetProfileOk returns a tuple with the Profile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateTeam) GetProfileOk() (*Profile, bool) {
	if o == nil || o.Profile == nil {
		return nil, false
	}
	return o.Profile, true
}

// HasProfile returns a boolean if a field has been set.
func (o *CreateTeam) HasProfile() bool {
	if o != nil && o.Profile != nil {
		return true
	}

	return false
}

// SetProfile gets a reference to the given Profile and assigns it to the Profile field.
func (o *CreateTeam) SetProfile(v Profile) {
	o.Profile = &v
}

// GetUsers returns the Users field value if set, zero value otherwise.
func (o *CreateTeam) GetUsers() []string {
	if o == nil || o.Users == nil {
		var ret []string
		return ret
	}
	return o.Users
}

// GetUsersOk returns a tuple with the Users field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateTeam) GetUsersOk() ([]string, bool) {
	if o == nil || o.Users == nil {
		return nil, false
	}
	return o.Users, true
}

// HasUsers returns a boolean if a field has been set.
func (o *CreateTeam) HasUsers() bool {
	if o != nil && o.Users != nil {
		return true
	}

	return false
}

// SetUsers gets a reference to the given []string and assigns it to the Users field.
func (o *CreateTeam) SetUsers(v []string) {
	o.Users = v
}

func (o CreateTeam) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DefaultRoles != nil {
		toSerialize["defaultRoles"] = o.DefaultRoles
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.DisplayName != nil {
		toSerialize["displayName"] = o.DisplayName
	}
	if o.Extension != nil {
		toSerialize["extension"] = o.Extension
	}
	if o.IsJoinable != nil {
		toSerialize["isJoinable"] = o.IsJoinable
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if o.Owner != nil {
		toSerialize["owner"] = o.Owner
	}
	if o.Profile != nil {
		toSerialize["profile"] = o.Profile
	}
	if o.Users != nil {
		toSerialize["users"] = o.Users
	}
	return json.Marshal(toSerialize)
}

type NullableCreateTeam struct {
	value *CreateTeam
	isSet bool
}

func (v NullableCreateTeam) Get() *CreateTeam {
	return v.value
}

func (v *NullableCreateTeam) Set(val *CreateTeam) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateTeam) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateTeam) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateTeam(val *CreateTeam) *NullableCreateTeam {
	return &NullableCreateTeam{value: val, isSet: true}
}

func (v NullableCreateTeam) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateTeam) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
