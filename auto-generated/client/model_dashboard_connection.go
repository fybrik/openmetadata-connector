/*
OpenMetadata Apis

# Overview  OpenMetadata supports REST APIs for getting metadata in and out of metadata store. The API resources are grouped under following categories: - **Data assets** - includes resources for data entities, such as `databases`, `tables`, and `topics`. Resources for data assets created from data, such as `dashboards`, `reports`, `metrics`, and `ML Features` are part of this collection. `pipelines`, `notebooks`, etc. that are used for creating data assets are also available as resources as of this collection. - **Teams and Users** - includes `users`, `teams`, a special type of user called `bots` that performs many automated tasks such as ingestion. - **Services** - are services that OpenMetadata integrates with. Currently `databaseService` is the only service under this collection that represents data sources. In the future, services related to Dashboards, Reports, ETL pipelines will be added under this collection. - **Glossary** - OpenMetadata supports hierarchical tags that can be used to build business vocabulary to describe and classify data available under `tags` resource.

API version: 0.11.0
Contact: openmetadata-dev@googlegroups.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// DashboardConnection struct for DashboardConnection
type DashboardConnection struct {
	Config map[string]interface{} `json:"config,omitempty"`
}

// NewDashboardConnection instantiates a new DashboardConnection object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDashboardConnection() *DashboardConnection {
	this := DashboardConnection{}
	return &this
}

// NewDashboardConnectionWithDefaults instantiates a new DashboardConnection object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDashboardConnectionWithDefaults() *DashboardConnection {
	this := DashboardConnection{}
	return &this
}

// GetConfig returns the Config field value if set, zero value otherwise.
func (o *DashboardConnection) GetConfig() map[string]interface{} {
	if o == nil || o.Config == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.Config
}

// GetConfigOk returns a tuple with the Config field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DashboardConnection) GetConfigOk() (map[string]interface{}, bool) {
	if o == nil || o.Config == nil {
		return nil, false
	}
	return o.Config, true
}

// HasConfig returns a boolean if a field has been set.
func (o *DashboardConnection) HasConfig() bool {
	if o != nil && o.Config != nil {
		return true
	}

	return false
}

// SetConfig gets a reference to the given map[string]interface{} and assigns it to the Config field.
func (o *DashboardConnection) SetConfig(v map[string]interface{}) {
	o.Config = v
}

func (o DashboardConnection) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Config != nil {
		toSerialize["config"] = o.Config
	}
	return json.Marshal(toSerialize)
}

type NullableDashboardConnection struct {
	value *DashboardConnection
	isSet bool
}

func (v NullableDashboardConnection) Get() *DashboardConnection {
	return v.value
}

func (v *NullableDashboardConnection) Set(val *DashboardConnection) {
	v.value = val
	v.isSet = true
}

func (v NullableDashboardConnection) IsSet() bool {
	return v.isSet
}

func (v *NullableDashboardConnection) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDashboardConnection(val *DashboardConnection) *NullableDashboardConnection {
	return &NullableDashboardConnection{value: val, isSet: true}
}

func (v NullableDashboardConnection) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDashboardConnection) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
