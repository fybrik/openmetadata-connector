/*
OpenMetadata Apis

# Overview  OpenMetadata supports REST APIs for getting metadata in and out of metadata store. The API resources are grouped under following categories: - **Data assets** - includes resources for data entities, such as `databases`, `tables`, and `topics`. Resources for data assets created from data, such as `dashboards`, `reports`, `metrics`, and `ML Features` are part of this collection. `pipelines`, `notebooks`, etc. that are used for creating data assets are also available as resources as of this collection. - **Teams and Users** - includes `users`, `teams`, a special type of user called `bots` that performs many automated tasks such as ingestion. - **Services** - are services that OpenMetadata integrates with. Currently `databaseService` is the only service under this collection that represents data sources. In the future, services related to Dashboards, Reports, ETL pipelines will be added under this collection. - **Glossary** - OpenMetadata supports hierarchical tags that can be used to build business vocabulary to describe and classify data available under `tags` resource.

API version: 0.11.0
Contact: openmetadata-dev@googlegroups.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// TablePartition struct for TablePartition
type TablePartition struct {
	Columns      []string `json:"columns"`
	Interval     string   `json:"interval"`
	IntervalType string   `json:"intervalType"`
}

// NewTablePartition instantiates a new TablePartition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTablePartition(columns []string, interval string, intervalType string) *TablePartition {
	this := TablePartition{}
	this.Columns = columns
	this.Interval = interval
	this.IntervalType = intervalType
	return &this
}

// NewTablePartitionWithDefaults instantiates a new TablePartition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTablePartitionWithDefaults() *TablePartition {
	this := TablePartition{}
	return &this
}

// GetColumns returns the Columns field value
func (o *TablePartition) GetColumns() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Columns
}

// GetColumnsOk returns a tuple with the Columns field value
// and a boolean to check if the value has been set.
func (o *TablePartition) GetColumnsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Columns, true
}

// SetColumns sets field value
func (o *TablePartition) SetColumns(v []string) {
	o.Columns = v
}

// GetInterval returns the Interval field value
func (o *TablePartition) GetInterval() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Interval
}

// GetIntervalOk returns a tuple with the Interval field value
// and a boolean to check if the value has been set.
func (o *TablePartition) GetIntervalOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Interval, true
}

// SetInterval sets field value
func (o *TablePartition) SetInterval(v string) {
	o.Interval = v
}

// GetIntervalType returns the IntervalType field value
func (o *TablePartition) GetIntervalType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.IntervalType
}

// GetIntervalTypeOk returns a tuple with the IntervalType field value
// and a boolean to check if the value has been set.
func (o *TablePartition) GetIntervalTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IntervalType, true
}

// SetIntervalType sets field value
func (o *TablePartition) SetIntervalType(v string) {
	o.IntervalType = v
}

func (o TablePartition) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["columns"] = o.Columns
	}
	if true {
		toSerialize["interval"] = o.Interval
	}
	if true {
		toSerialize["intervalType"] = o.IntervalType
	}
	return json.Marshal(toSerialize)
}

type NullableTablePartition struct {
	value *TablePartition
	isSet bool
}

func (v NullableTablePartition) Get() *TablePartition {
	return v.value
}

func (v *NullableTablePartition) Set(val *TablePartition) {
	v.value = val
	v.isSet = true
}

func (v NullableTablePartition) IsSet() bool {
	return v.isSet
}

func (v *NullableTablePartition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTablePartition(val *TablePartition) *NullableTablePartition {
	return &NullableTablePartition{value: val, isSet: true}
}

func (v NullableTablePartition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTablePartition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
