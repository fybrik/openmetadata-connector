/*
OpenMetadata Apis

# Overview  OpenMetadata supports REST APIs for getting metadata in and out of metadata store. The API resources are grouped under following categories: - **Data assets** - includes resources for data entities, such as `databases`, `tables`, and `topics`. Resources for data assets created from data, such as `dashboards`, `reports`, `metrics`, and `ML Features` are part of this collection. `pipelines`, `notebooks`, etc. that are used for creating data assets are also available as resources as of this collection. - **Teams and Users** - includes `users`, `teams`, a special type of user called `bots` that performs many automated tasks such as ingestion. - **Services** - are services that OpenMetadata integrates with. Currently `databaseService` is the only service under this collection that represents data sources. In the future, services related to Dashboards, Reports, ETL pipelines will be added under this collection. - **Glossary** - OpenMetadata supports hierarchical tags that can be used to build business vocabulary to describe and classify data available under `tags` resource.

API version: 0.11.0
Contact: openmetadata-dev@googlegroups.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// MlFeature struct for MlFeature
type MlFeature struct {
	DataType           *string           `json:"dataType,omitempty"`
	Description        *string           `json:"description,omitempty"`
	FeatureAlgorithm   *string           `json:"featureAlgorithm,omitempty"`
	FeatureSources     []MlFeatureSource `json:"featureSources,omitempty"`
	FullyQualifiedName *string           `json:"fullyQualifiedName,omitempty"`
	Name               *string           `json:"name,omitempty"`
	Tags               []TagLabel        `json:"tags,omitempty"`
}

// NewMlFeature instantiates a new MlFeature object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMlFeature() *MlFeature {
	this := MlFeature{}
	return &this
}

// NewMlFeatureWithDefaults instantiates a new MlFeature object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMlFeatureWithDefaults() *MlFeature {
	this := MlFeature{}
	return &this
}

// GetDataType returns the DataType field value if set, zero value otherwise.
func (o *MlFeature) GetDataType() string {
	if o == nil || o.DataType == nil {
		var ret string
		return ret
	}
	return *o.DataType
}

// GetDataTypeOk returns a tuple with the DataType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MlFeature) GetDataTypeOk() (*string, bool) {
	if o == nil || o.DataType == nil {
		return nil, false
	}
	return o.DataType, true
}

// HasDataType returns a boolean if a field has been set.
func (o *MlFeature) HasDataType() bool {
	if o != nil && o.DataType != nil {
		return true
	}

	return false
}

// SetDataType gets a reference to the given string and assigns it to the DataType field.
func (o *MlFeature) SetDataType(v string) {
	o.DataType = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *MlFeature) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MlFeature) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *MlFeature) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *MlFeature) SetDescription(v string) {
	o.Description = &v
}

// GetFeatureAlgorithm returns the FeatureAlgorithm field value if set, zero value otherwise.
func (o *MlFeature) GetFeatureAlgorithm() string {
	if o == nil || o.FeatureAlgorithm == nil {
		var ret string
		return ret
	}
	return *o.FeatureAlgorithm
}

// GetFeatureAlgorithmOk returns a tuple with the FeatureAlgorithm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MlFeature) GetFeatureAlgorithmOk() (*string, bool) {
	if o == nil || o.FeatureAlgorithm == nil {
		return nil, false
	}
	return o.FeatureAlgorithm, true
}

// HasFeatureAlgorithm returns a boolean if a field has been set.
func (o *MlFeature) HasFeatureAlgorithm() bool {
	if o != nil && o.FeatureAlgorithm != nil {
		return true
	}

	return false
}

// SetFeatureAlgorithm gets a reference to the given string and assigns it to the FeatureAlgorithm field.
func (o *MlFeature) SetFeatureAlgorithm(v string) {
	o.FeatureAlgorithm = &v
}

// GetFeatureSources returns the FeatureSources field value if set, zero value otherwise.
func (o *MlFeature) GetFeatureSources() []MlFeatureSource {
	if o == nil || o.FeatureSources == nil {
		var ret []MlFeatureSource
		return ret
	}
	return o.FeatureSources
}

// GetFeatureSourcesOk returns a tuple with the FeatureSources field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MlFeature) GetFeatureSourcesOk() ([]MlFeatureSource, bool) {
	if o == nil || o.FeatureSources == nil {
		return nil, false
	}
	return o.FeatureSources, true
}

// HasFeatureSources returns a boolean if a field has been set.
func (o *MlFeature) HasFeatureSources() bool {
	if o != nil && o.FeatureSources != nil {
		return true
	}

	return false
}

// SetFeatureSources gets a reference to the given []MlFeatureSource and assigns it to the FeatureSources field.
func (o *MlFeature) SetFeatureSources(v []MlFeatureSource) {
	o.FeatureSources = v
}

// GetFullyQualifiedName returns the FullyQualifiedName field value if set, zero value otherwise.
func (o *MlFeature) GetFullyQualifiedName() string {
	if o == nil || o.FullyQualifiedName == nil {
		var ret string
		return ret
	}
	return *o.FullyQualifiedName
}

// GetFullyQualifiedNameOk returns a tuple with the FullyQualifiedName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MlFeature) GetFullyQualifiedNameOk() (*string, bool) {
	if o == nil || o.FullyQualifiedName == nil {
		return nil, false
	}
	return o.FullyQualifiedName, true
}

// HasFullyQualifiedName returns a boolean if a field has been set.
func (o *MlFeature) HasFullyQualifiedName() bool {
	if o != nil && o.FullyQualifiedName != nil {
		return true
	}

	return false
}

// SetFullyQualifiedName gets a reference to the given string and assigns it to the FullyQualifiedName field.
func (o *MlFeature) SetFullyQualifiedName(v string) {
	o.FullyQualifiedName = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *MlFeature) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MlFeature) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *MlFeature) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *MlFeature) SetName(v string) {
	o.Name = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *MlFeature) GetTags() []TagLabel {
	if o == nil || o.Tags == nil {
		var ret []TagLabel
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MlFeature) GetTagsOk() ([]TagLabel, bool) {
	if o == nil || o.Tags == nil {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *MlFeature) HasTags() bool {
	if o != nil && o.Tags != nil {
		return true
	}

	return false
}

// SetTags gets a reference to the given []TagLabel and assigns it to the Tags field.
func (o *MlFeature) SetTags(v []TagLabel) {
	o.Tags = v
}

func (o MlFeature) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DataType != nil {
		toSerialize["dataType"] = o.DataType
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.FeatureAlgorithm != nil {
		toSerialize["featureAlgorithm"] = o.FeatureAlgorithm
	}
	if o.FeatureSources != nil {
		toSerialize["featureSources"] = o.FeatureSources
	}
	if o.FullyQualifiedName != nil {
		toSerialize["fullyQualifiedName"] = o.FullyQualifiedName
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Tags != nil {
		toSerialize["tags"] = o.Tags
	}
	return json.Marshal(toSerialize)
}

type NullableMlFeature struct {
	value *MlFeature
	isSet bool
}

func (v NullableMlFeature) Get() *MlFeature {
	return v.value
}

func (v *NullableMlFeature) Set(val *MlFeature) {
	v.value = val
	v.isSet = true
}

func (v NullableMlFeature) IsSet() bool {
	return v.isSet
}

func (v *NullableMlFeature) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMlFeature(val *MlFeature) *NullableMlFeature {
	return &NullableMlFeature{value: val, isSet: true}
}

func (v NullableMlFeature) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMlFeature) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
