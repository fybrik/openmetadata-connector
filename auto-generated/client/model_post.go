/*
OpenMetadata Apis

# Overview  OpenMetadata supports REST APIs for getting metadata in and out of metadata store. The API resources are grouped under following categories: - **Data assets** - includes resources for data entities, such as `databases`, `tables`, and `topics`. Resources for data assets created from data, such as `dashboards`, `reports`, `metrics`, and `ML Features` are part of this collection. `pipelines`, `notebooks`, etc. that are used for creating data assets are also available as resources as of this collection. - **Teams and Users** - includes `users`, `teams`, a special type of user called `bots` that performs many automated tasks such as ingestion. - **Services** - are services that OpenMetadata integrates with. Currently `databaseService` is the only service under this collection that represents data sources. In the future, services related to Dashboards, Reports, ETL pipelines will be added under this collection. - **Glossary** - OpenMetadata supports hierarchical tags that can be used to build business vocabulary to describe and classify data available under `tags` resource.

API version: 0.11.0
Contact: openmetadata-dev@googlegroups.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Post struct for Post
type Post struct {
	From      string     `json:"from"`
	Id        string     `json:"id"`
	Message   string     `json:"message"`
	PostTs    *int64     `json:"postTs,omitempty"`
	Reactions []Reaction `json:"reactions,omitempty"`
}

// NewPost instantiates a new Post object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPost(from string, id string, message string) *Post {
	this := Post{}
	this.From = from
	this.Id = id
	this.Message = message
	return &this
}

// NewPostWithDefaults instantiates a new Post object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPostWithDefaults() *Post {
	this := Post{}
	return &this
}

// GetFrom returns the From field value
func (o *Post) GetFrom() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.From
}

// GetFromOk returns a tuple with the From field value
// and a boolean to check if the value has been set.
func (o *Post) GetFromOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.From, true
}

// SetFrom sets field value
func (o *Post) SetFrom(v string) {
	o.From = v
}

// GetId returns the Id field value
func (o *Post) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Post) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Post) SetId(v string) {
	o.Id = v
}

// GetMessage returns the Message field value
func (o *Post) GetMessage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Message
}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
func (o *Post) GetMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Message, true
}

// SetMessage sets field value
func (o *Post) SetMessage(v string) {
	o.Message = v
}

// GetPostTs returns the PostTs field value if set, zero value otherwise.
func (o *Post) GetPostTs() int64 {
	if o == nil || o.PostTs == nil {
		var ret int64
		return ret
	}
	return *o.PostTs
}

// GetPostTsOk returns a tuple with the PostTs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Post) GetPostTsOk() (*int64, bool) {
	if o == nil || o.PostTs == nil {
		return nil, false
	}
	return o.PostTs, true
}

// HasPostTs returns a boolean if a field has been set.
func (o *Post) HasPostTs() bool {
	if o != nil && o.PostTs != nil {
		return true
	}

	return false
}

// SetPostTs gets a reference to the given int64 and assigns it to the PostTs field.
func (o *Post) SetPostTs(v int64) {
	o.PostTs = &v
}

// GetReactions returns the Reactions field value if set, zero value otherwise.
func (o *Post) GetReactions() []Reaction {
	if o == nil || o.Reactions == nil {
		var ret []Reaction
		return ret
	}
	return o.Reactions
}

// GetReactionsOk returns a tuple with the Reactions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Post) GetReactionsOk() ([]Reaction, bool) {
	if o == nil || o.Reactions == nil {
		return nil, false
	}
	return o.Reactions, true
}

// HasReactions returns a boolean if a field has been set.
func (o *Post) HasReactions() bool {
	if o != nil && o.Reactions != nil {
		return true
	}

	return false
}

// SetReactions gets a reference to the given []Reaction and assigns it to the Reactions field.
func (o *Post) SetReactions(v []Reaction) {
	o.Reactions = v
}

func (o Post) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["from"] = o.From
	}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["message"] = o.Message
	}
	if o.PostTs != nil {
		toSerialize["postTs"] = o.PostTs
	}
	if o.Reactions != nil {
		toSerialize["reactions"] = o.Reactions
	}
	return json.Marshal(toSerialize)
}

type NullablePost struct {
	value *Post
	isSet bool
}

func (v NullablePost) Get() *Post {
	return v.value
}

func (v *NullablePost) Set(val *Post) {
	v.value = val
	v.isSet = true
}

func (v NullablePost) IsSet() bool {
	return v.isSet
}

func (v *NullablePost) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePost(val *Post) *NullablePost {
	return &NullablePost{value: val, isSet: true}
}

func (v NullablePost) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePost) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
