/*
OpenMetadata Apis

# Overview  OpenMetadata supports REST APIs for getting metadata in and out of metadata store. The API resources are grouped under following categories: - **Data assets** - includes resources for data entities, such as `databases`, `tables`, and `topics`. Resources for data assets created from data, such as `dashboards`, `reports`, `metrics`, and `ML Features` are part of this collection. `pipelines`, `notebooks`, etc. that are used for creating data assets are also available as resources as of this collection. - **Teams and Users** - includes `users`, `teams`, a special type of user called `bots` that performs many automated tasks such as ingestion. - **Services** - are services that OpenMetadata integrates with. Currently `databaseService` is the only service under this collection that represents data sources. In the future, services related to Dashboards, Reports, ETL pipelines will be added under this collection. - **Glossary** - OpenMetadata supports hierarchical tags that can be used to build business vocabulary to describe and classify data available under `tags` resource.

API version: 0.11.0
Contact: openmetadata-dev@googlegroups.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// CreateThread struct for CreateThread
type CreateThread struct {
	About       string             `json:"about"`
	AddressedTo *string            `json:"addressedTo,omitempty"`
	From        string             `json:"from"`
	Message     string             `json:"message"`
	TaskDetails *CreateTaskDetails `json:"taskDetails,omitempty"`
	Type        *string            `json:"type,omitempty"`
}

// NewCreateThread instantiates a new CreateThread object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateThread(about string, from string, message string) *CreateThread {
	this := CreateThread{}
	this.About = about
	this.From = from
	this.Message = message
	return &this
}

// NewCreateThreadWithDefaults instantiates a new CreateThread object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateThreadWithDefaults() *CreateThread {
	this := CreateThread{}
	return &this
}

// GetAbout returns the About field value
func (o *CreateThread) GetAbout() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.About
}

// GetAboutOk returns a tuple with the About field value
// and a boolean to check if the value has been set.
func (o *CreateThread) GetAboutOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.About, true
}

// SetAbout sets field value
func (o *CreateThread) SetAbout(v string) {
	o.About = v
}

// GetAddressedTo returns the AddressedTo field value if set, zero value otherwise.
func (o *CreateThread) GetAddressedTo() string {
	if o == nil || o.AddressedTo == nil {
		var ret string
		return ret
	}
	return *o.AddressedTo
}

// GetAddressedToOk returns a tuple with the AddressedTo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateThread) GetAddressedToOk() (*string, bool) {
	if o == nil || o.AddressedTo == nil {
		return nil, false
	}
	return o.AddressedTo, true
}

// HasAddressedTo returns a boolean if a field has been set.
func (o *CreateThread) HasAddressedTo() bool {
	if o != nil && o.AddressedTo != nil {
		return true
	}

	return false
}

// SetAddressedTo gets a reference to the given string and assigns it to the AddressedTo field.
func (o *CreateThread) SetAddressedTo(v string) {
	o.AddressedTo = &v
}

// GetFrom returns the From field value
func (o *CreateThread) GetFrom() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.From
}

// GetFromOk returns a tuple with the From field value
// and a boolean to check if the value has been set.
func (o *CreateThread) GetFromOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.From, true
}

// SetFrom sets field value
func (o *CreateThread) SetFrom(v string) {
	o.From = v
}

// GetMessage returns the Message field value
func (o *CreateThread) GetMessage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Message
}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
func (o *CreateThread) GetMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Message, true
}

// SetMessage sets field value
func (o *CreateThread) SetMessage(v string) {
	o.Message = v
}

// GetTaskDetails returns the TaskDetails field value if set, zero value otherwise.
func (o *CreateThread) GetTaskDetails() CreateTaskDetails {
	if o == nil || o.TaskDetails == nil {
		var ret CreateTaskDetails
		return ret
	}
	return *o.TaskDetails
}

// GetTaskDetailsOk returns a tuple with the TaskDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateThread) GetTaskDetailsOk() (*CreateTaskDetails, bool) {
	if o == nil || o.TaskDetails == nil {
		return nil, false
	}
	return o.TaskDetails, true
}

// HasTaskDetails returns a boolean if a field has been set.
func (o *CreateThread) HasTaskDetails() bool {
	if o != nil && o.TaskDetails != nil {
		return true
	}

	return false
}

// SetTaskDetails gets a reference to the given CreateTaskDetails and assigns it to the TaskDetails field.
func (o *CreateThread) SetTaskDetails(v CreateTaskDetails) {
	o.TaskDetails = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *CreateThread) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateThread) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *CreateThread) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *CreateThread) SetType(v string) {
	o.Type = &v
}

func (o CreateThread) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["about"] = o.About
	}
	if o.AddressedTo != nil {
		toSerialize["addressedTo"] = o.AddressedTo
	}
	if true {
		toSerialize["from"] = o.From
	}
	if true {
		toSerialize["message"] = o.Message
	}
	if o.TaskDetails != nil {
		toSerialize["taskDetails"] = o.TaskDetails
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableCreateThread struct {
	value *CreateThread
	isSet bool
}

func (v NullableCreateThread) Get() *CreateThread {
	return v.value
}

func (v *NullableCreateThread) Set(val *CreateThread) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateThread) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateThread) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateThread(val *CreateThread) *NullableCreateThread {
	return &NullableCreateThread{value: val, isSet: true}
}

func (v NullableCreateThread) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateThread) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
