/*
OpenMetadata Apis

# Overview  OpenMetadata supports REST APIs for getting metadata in and out of metadata store. The API resources are grouped under following categories: - **Data assets** - includes resources for data entities, such as `databases`, `tables`, and `topics`. Resources for data assets created from data, such as `dashboards`, `reports`, `metrics`, and `ML Features` are part of this collection. `pipelines`, `notebooks`, etc. that are used for creating data assets are also available as resources as of this collection. - **Teams and Users** - includes `users`, `teams`, a special type of user called `bots` that performs many automated tasks such as ingestion. - **Services** - are services that OpenMetadata integrates with. Currently `databaseService` is the only service under this collection that represents data sources. In the future, services related to Dashboards, Reports, ETL pipelines will be added under this collection. - **Glossary** - OpenMetadata supports hierarchical tags that can be used to build business vocabulary to describe and classify data available under `tags` resource.

API version: 0.11.0
Contact: openmetadata-dev@googlegroups.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// TimeValue struct for TimeValue
type TimeValue struct {
	Days        *int64   `json:"days,omitempty"`
	DaysFrac    *float64 `json:"daysFrac,omitempty"`
	Hours       *int64   `json:"hours,omitempty"`
	HoursFrac   *float64 `json:"hoursFrac,omitempty"`
	Micros      *int64   `json:"micros,omitempty"`
	MicrosFrac  *float64 `json:"microsFrac,omitempty"`
	Millis      *int64   `json:"millis,omitempty"`
	MillisFrac  *float64 `json:"millisFrac,omitempty"`
	Minutes     *int64   `json:"minutes,omitempty"`
	MinutesFrac *float64 `json:"minutesFrac,omitempty"`
	Nanos       *int64   `json:"nanos,omitempty"`
	Seconds     *int64   `json:"seconds,omitempty"`
	SecondsFrac *float64 `json:"secondsFrac,omitempty"`
	StringRep   *string  `json:"stringRep,omitempty"`
}

// NewTimeValue instantiates a new TimeValue object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTimeValue() *TimeValue {
	this := TimeValue{}
	return &this
}

// NewTimeValueWithDefaults instantiates a new TimeValue object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTimeValueWithDefaults() *TimeValue {
	this := TimeValue{}
	return &this
}

// GetDays returns the Days field value if set, zero value otherwise.
func (o *TimeValue) GetDays() int64 {
	if o == nil || o.Days == nil {
		var ret int64
		return ret
	}
	return *o.Days
}

// GetDaysOk returns a tuple with the Days field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeValue) GetDaysOk() (*int64, bool) {
	if o == nil || o.Days == nil {
		return nil, false
	}
	return o.Days, true
}

// HasDays returns a boolean if a field has been set.
func (o *TimeValue) HasDays() bool {
	if o != nil && o.Days != nil {
		return true
	}

	return false
}

// SetDays gets a reference to the given int64 and assigns it to the Days field.
func (o *TimeValue) SetDays(v int64) {
	o.Days = &v
}

// GetDaysFrac returns the DaysFrac field value if set, zero value otherwise.
func (o *TimeValue) GetDaysFrac() float64 {
	if o == nil || o.DaysFrac == nil {
		var ret float64
		return ret
	}
	return *o.DaysFrac
}

// GetDaysFracOk returns a tuple with the DaysFrac field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeValue) GetDaysFracOk() (*float64, bool) {
	if o == nil || o.DaysFrac == nil {
		return nil, false
	}
	return o.DaysFrac, true
}

// HasDaysFrac returns a boolean if a field has been set.
func (o *TimeValue) HasDaysFrac() bool {
	if o != nil && o.DaysFrac != nil {
		return true
	}

	return false
}

// SetDaysFrac gets a reference to the given float64 and assigns it to the DaysFrac field.
func (o *TimeValue) SetDaysFrac(v float64) {
	o.DaysFrac = &v
}

// GetHours returns the Hours field value if set, zero value otherwise.
func (o *TimeValue) GetHours() int64 {
	if o == nil || o.Hours == nil {
		var ret int64
		return ret
	}
	return *o.Hours
}

// GetHoursOk returns a tuple with the Hours field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeValue) GetHoursOk() (*int64, bool) {
	if o == nil || o.Hours == nil {
		return nil, false
	}
	return o.Hours, true
}

// HasHours returns a boolean if a field has been set.
func (o *TimeValue) HasHours() bool {
	if o != nil && o.Hours != nil {
		return true
	}

	return false
}

// SetHours gets a reference to the given int64 and assigns it to the Hours field.
func (o *TimeValue) SetHours(v int64) {
	o.Hours = &v
}

// GetHoursFrac returns the HoursFrac field value if set, zero value otherwise.
func (o *TimeValue) GetHoursFrac() float64 {
	if o == nil || o.HoursFrac == nil {
		var ret float64
		return ret
	}
	return *o.HoursFrac
}

// GetHoursFracOk returns a tuple with the HoursFrac field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeValue) GetHoursFracOk() (*float64, bool) {
	if o == nil || o.HoursFrac == nil {
		return nil, false
	}
	return o.HoursFrac, true
}

// HasHoursFrac returns a boolean if a field has been set.
func (o *TimeValue) HasHoursFrac() bool {
	if o != nil && o.HoursFrac != nil {
		return true
	}

	return false
}

// SetHoursFrac gets a reference to the given float64 and assigns it to the HoursFrac field.
func (o *TimeValue) SetHoursFrac(v float64) {
	o.HoursFrac = &v
}

// GetMicros returns the Micros field value if set, zero value otherwise.
func (o *TimeValue) GetMicros() int64 {
	if o == nil || o.Micros == nil {
		var ret int64
		return ret
	}
	return *o.Micros
}

// GetMicrosOk returns a tuple with the Micros field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeValue) GetMicrosOk() (*int64, bool) {
	if o == nil || o.Micros == nil {
		return nil, false
	}
	return o.Micros, true
}

// HasMicros returns a boolean if a field has been set.
func (o *TimeValue) HasMicros() bool {
	if o != nil && o.Micros != nil {
		return true
	}

	return false
}

// SetMicros gets a reference to the given int64 and assigns it to the Micros field.
func (o *TimeValue) SetMicros(v int64) {
	o.Micros = &v
}

// GetMicrosFrac returns the MicrosFrac field value if set, zero value otherwise.
func (o *TimeValue) GetMicrosFrac() float64 {
	if o == nil || o.MicrosFrac == nil {
		var ret float64
		return ret
	}
	return *o.MicrosFrac
}

// GetMicrosFracOk returns a tuple with the MicrosFrac field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeValue) GetMicrosFracOk() (*float64, bool) {
	if o == nil || o.MicrosFrac == nil {
		return nil, false
	}
	return o.MicrosFrac, true
}

// HasMicrosFrac returns a boolean if a field has been set.
func (o *TimeValue) HasMicrosFrac() bool {
	if o != nil && o.MicrosFrac != nil {
		return true
	}

	return false
}

// SetMicrosFrac gets a reference to the given float64 and assigns it to the MicrosFrac field.
func (o *TimeValue) SetMicrosFrac(v float64) {
	o.MicrosFrac = &v
}

// GetMillis returns the Millis field value if set, zero value otherwise.
func (o *TimeValue) GetMillis() int64 {
	if o == nil || o.Millis == nil {
		var ret int64
		return ret
	}
	return *o.Millis
}

// GetMillisOk returns a tuple with the Millis field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeValue) GetMillisOk() (*int64, bool) {
	if o == nil || o.Millis == nil {
		return nil, false
	}
	return o.Millis, true
}

// HasMillis returns a boolean if a field has been set.
func (o *TimeValue) HasMillis() bool {
	if o != nil && o.Millis != nil {
		return true
	}

	return false
}

// SetMillis gets a reference to the given int64 and assigns it to the Millis field.
func (o *TimeValue) SetMillis(v int64) {
	o.Millis = &v
}

// GetMillisFrac returns the MillisFrac field value if set, zero value otherwise.
func (o *TimeValue) GetMillisFrac() float64 {
	if o == nil || o.MillisFrac == nil {
		var ret float64
		return ret
	}
	return *o.MillisFrac
}

// GetMillisFracOk returns a tuple with the MillisFrac field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeValue) GetMillisFracOk() (*float64, bool) {
	if o == nil || o.MillisFrac == nil {
		return nil, false
	}
	return o.MillisFrac, true
}

// HasMillisFrac returns a boolean if a field has been set.
func (o *TimeValue) HasMillisFrac() bool {
	if o != nil && o.MillisFrac != nil {
		return true
	}

	return false
}

// SetMillisFrac gets a reference to the given float64 and assigns it to the MillisFrac field.
func (o *TimeValue) SetMillisFrac(v float64) {
	o.MillisFrac = &v
}

// GetMinutes returns the Minutes field value if set, zero value otherwise.
func (o *TimeValue) GetMinutes() int64 {
	if o == nil || o.Minutes == nil {
		var ret int64
		return ret
	}
	return *o.Minutes
}

// GetMinutesOk returns a tuple with the Minutes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeValue) GetMinutesOk() (*int64, bool) {
	if o == nil || o.Minutes == nil {
		return nil, false
	}
	return o.Minutes, true
}

// HasMinutes returns a boolean if a field has been set.
func (o *TimeValue) HasMinutes() bool {
	if o != nil && o.Minutes != nil {
		return true
	}

	return false
}

// SetMinutes gets a reference to the given int64 and assigns it to the Minutes field.
func (o *TimeValue) SetMinutes(v int64) {
	o.Minutes = &v
}

// GetMinutesFrac returns the MinutesFrac field value if set, zero value otherwise.
func (o *TimeValue) GetMinutesFrac() float64 {
	if o == nil || o.MinutesFrac == nil {
		var ret float64
		return ret
	}
	return *o.MinutesFrac
}

// GetMinutesFracOk returns a tuple with the MinutesFrac field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeValue) GetMinutesFracOk() (*float64, bool) {
	if o == nil || o.MinutesFrac == nil {
		return nil, false
	}
	return o.MinutesFrac, true
}

// HasMinutesFrac returns a boolean if a field has been set.
func (o *TimeValue) HasMinutesFrac() bool {
	if o != nil && o.MinutesFrac != nil {
		return true
	}

	return false
}

// SetMinutesFrac gets a reference to the given float64 and assigns it to the MinutesFrac field.
func (o *TimeValue) SetMinutesFrac(v float64) {
	o.MinutesFrac = &v
}

// GetNanos returns the Nanos field value if set, zero value otherwise.
func (o *TimeValue) GetNanos() int64 {
	if o == nil || o.Nanos == nil {
		var ret int64
		return ret
	}
	return *o.Nanos
}

// GetNanosOk returns a tuple with the Nanos field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeValue) GetNanosOk() (*int64, bool) {
	if o == nil || o.Nanos == nil {
		return nil, false
	}
	return o.Nanos, true
}

// HasNanos returns a boolean if a field has been set.
func (o *TimeValue) HasNanos() bool {
	if o != nil && o.Nanos != nil {
		return true
	}

	return false
}

// SetNanos gets a reference to the given int64 and assigns it to the Nanos field.
func (o *TimeValue) SetNanos(v int64) {
	o.Nanos = &v
}

// GetSeconds returns the Seconds field value if set, zero value otherwise.
func (o *TimeValue) GetSeconds() int64 {
	if o == nil || o.Seconds == nil {
		var ret int64
		return ret
	}
	return *o.Seconds
}

// GetSecondsOk returns a tuple with the Seconds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeValue) GetSecondsOk() (*int64, bool) {
	if o == nil || o.Seconds == nil {
		return nil, false
	}
	return o.Seconds, true
}

// HasSeconds returns a boolean if a field has been set.
func (o *TimeValue) HasSeconds() bool {
	if o != nil && o.Seconds != nil {
		return true
	}

	return false
}

// SetSeconds gets a reference to the given int64 and assigns it to the Seconds field.
func (o *TimeValue) SetSeconds(v int64) {
	o.Seconds = &v
}

// GetSecondsFrac returns the SecondsFrac field value if set, zero value otherwise.
func (o *TimeValue) GetSecondsFrac() float64 {
	if o == nil || o.SecondsFrac == nil {
		var ret float64
		return ret
	}
	return *o.SecondsFrac
}

// GetSecondsFracOk returns a tuple with the SecondsFrac field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeValue) GetSecondsFracOk() (*float64, bool) {
	if o == nil || o.SecondsFrac == nil {
		return nil, false
	}
	return o.SecondsFrac, true
}

// HasSecondsFrac returns a boolean if a field has been set.
func (o *TimeValue) HasSecondsFrac() bool {
	if o != nil && o.SecondsFrac != nil {
		return true
	}

	return false
}

// SetSecondsFrac gets a reference to the given float64 and assigns it to the SecondsFrac field.
func (o *TimeValue) SetSecondsFrac(v float64) {
	o.SecondsFrac = &v
}

// GetStringRep returns the StringRep field value if set, zero value otherwise.
func (o *TimeValue) GetStringRep() string {
	if o == nil || o.StringRep == nil {
		var ret string
		return ret
	}
	return *o.StringRep
}

// GetStringRepOk returns a tuple with the StringRep field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeValue) GetStringRepOk() (*string, bool) {
	if o == nil || o.StringRep == nil {
		return nil, false
	}
	return o.StringRep, true
}

// HasStringRep returns a boolean if a field has been set.
func (o *TimeValue) HasStringRep() bool {
	if o != nil && o.StringRep != nil {
		return true
	}

	return false
}

// SetStringRep gets a reference to the given string and assigns it to the StringRep field.
func (o *TimeValue) SetStringRep(v string) {
	o.StringRep = &v
}

func (o TimeValue) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Days != nil {
		toSerialize["days"] = o.Days
	}
	if o.DaysFrac != nil {
		toSerialize["daysFrac"] = o.DaysFrac
	}
	if o.Hours != nil {
		toSerialize["hours"] = o.Hours
	}
	if o.HoursFrac != nil {
		toSerialize["hoursFrac"] = o.HoursFrac
	}
	if o.Micros != nil {
		toSerialize["micros"] = o.Micros
	}
	if o.MicrosFrac != nil {
		toSerialize["microsFrac"] = o.MicrosFrac
	}
	if o.Millis != nil {
		toSerialize["millis"] = o.Millis
	}
	if o.MillisFrac != nil {
		toSerialize["millisFrac"] = o.MillisFrac
	}
	if o.Minutes != nil {
		toSerialize["minutes"] = o.Minutes
	}
	if o.MinutesFrac != nil {
		toSerialize["minutesFrac"] = o.MinutesFrac
	}
	if o.Nanos != nil {
		toSerialize["nanos"] = o.Nanos
	}
	if o.Seconds != nil {
		toSerialize["seconds"] = o.Seconds
	}
	if o.SecondsFrac != nil {
		toSerialize["secondsFrac"] = o.SecondsFrac
	}
	if o.StringRep != nil {
		toSerialize["stringRep"] = o.StringRep
	}
	return json.Marshal(toSerialize)
}

type NullableTimeValue struct {
	value *TimeValue
	isSet bool
}

func (v NullableTimeValue) Get() *TimeValue {
	return v.value
}

func (v *NullableTimeValue) Set(val *TimeValue) {
	v.value = val
	v.isSet = true
}

func (v NullableTimeValue) IsSet() bool {
	return v.isSet
}

func (v *NullableTimeValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTimeValue(val *TimeValue) *NullableTimeValue {
	return &NullableTimeValue{value: val, isSet: true}
}

func (v NullableTimeValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTimeValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
