/*
OpenMetadata Apis

# Overview  OpenMetadata supports REST APIs for getting metadata in and out of metadata store. The API resources are grouped under following categories: - **Data assets** - includes resources for data entities, such as `databases`, `tables`, and `topics`. Resources for data assets created from data, such as `dashboards`, `reports`, `metrics`, and `ML Features` are part of this collection. `pipelines`, `notebooks`, etc. that are used for creating data assets are also available as resources as of this collection. - **Teams and Users** - includes `users`, `teams`, a special type of user called `bots` that performs many automated tasks such as ingestion. - **Services** - are services that OpenMetadata integrates with. Currently `databaseService` is the only service under this collection that represents data sources. In the future, services related to Dashboards, Reports, ETL pipelines will be added under this collection. - **Glossary** - OpenMetadata supports hierarchical tags that can be used to build business vocabulary to describe and classify data available under `tags` resource.

API version: 0.11.0
Contact: openmetadata-dev@googlegroups.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// CreateUser struct for CreateUser
type CreateUser struct {
	Description *string                `json:"description,omitempty"`
	DisplayName *string                `json:"displayName,omitempty"`
	Email       string                 `json:"email"`
	Extension   map[string]interface{} `json:"extension,omitempty"`
	IsAdmin     *bool                  `json:"isAdmin,omitempty"`
	IsBot       *bool                  `json:"isBot,omitempty"`
	Name        string                 `json:"name"`
	Owner       *EntityReference       `json:"owner,omitempty"`
	Profile     *Profile               `json:"profile,omitempty"`
	Roles       []string               `json:"roles,omitempty"`
	Teams       []string               `json:"teams,omitempty"`
	Timezone    *string                `json:"timezone,omitempty"`
}

// NewCreateUser instantiates a new CreateUser object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateUser(email string, name string) *CreateUser {
	this := CreateUser{}
	this.Email = email
	this.Name = name
	return &this
}

// NewCreateUserWithDefaults instantiates a new CreateUser object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateUserWithDefaults() *CreateUser {
	this := CreateUser{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *CreateUser) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateUser) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *CreateUser) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *CreateUser) SetDescription(v string) {
	o.Description = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *CreateUser) GetDisplayName() string {
	if o == nil || o.DisplayName == nil {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateUser) GetDisplayNameOk() (*string, bool) {
	if o == nil || o.DisplayName == nil {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *CreateUser) HasDisplayName() bool {
	if o != nil && o.DisplayName != nil {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *CreateUser) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetEmail returns the Email field value
func (o *CreateUser) GetEmail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Email
}

// GetEmailOk returns a tuple with the Email field value
// and a boolean to check if the value has been set.
func (o *CreateUser) GetEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Email, true
}

// SetEmail sets field value
func (o *CreateUser) SetEmail(v string) {
	o.Email = v
}

// GetExtension returns the Extension field value if set, zero value otherwise.
func (o *CreateUser) GetExtension() map[string]interface{} {
	if o == nil || o.Extension == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateUser) GetExtensionOk() (map[string]interface{}, bool) {
	if o == nil || o.Extension == nil {
		return nil, false
	}
	return o.Extension, true
}

// HasExtension returns a boolean if a field has been set.
func (o *CreateUser) HasExtension() bool {
	if o != nil && o.Extension != nil {
		return true
	}

	return false
}

// SetExtension gets a reference to the given map[string]interface{} and assigns it to the Extension field.
func (o *CreateUser) SetExtension(v map[string]interface{}) {
	o.Extension = v
}

// GetIsAdmin returns the IsAdmin field value if set, zero value otherwise.
func (o *CreateUser) GetIsAdmin() bool {
	if o == nil || o.IsAdmin == nil {
		var ret bool
		return ret
	}
	return *o.IsAdmin
}

// GetIsAdminOk returns a tuple with the IsAdmin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateUser) GetIsAdminOk() (*bool, bool) {
	if o == nil || o.IsAdmin == nil {
		return nil, false
	}
	return o.IsAdmin, true
}

// HasIsAdmin returns a boolean if a field has been set.
func (o *CreateUser) HasIsAdmin() bool {
	if o != nil && o.IsAdmin != nil {
		return true
	}

	return false
}

// SetIsAdmin gets a reference to the given bool and assigns it to the IsAdmin field.
func (o *CreateUser) SetIsAdmin(v bool) {
	o.IsAdmin = &v
}

// GetIsBot returns the IsBot field value if set, zero value otherwise.
func (o *CreateUser) GetIsBot() bool {
	if o == nil || o.IsBot == nil {
		var ret bool
		return ret
	}
	return *o.IsBot
}

// GetIsBotOk returns a tuple with the IsBot field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateUser) GetIsBotOk() (*bool, bool) {
	if o == nil || o.IsBot == nil {
		return nil, false
	}
	return o.IsBot, true
}

// HasIsBot returns a boolean if a field has been set.
func (o *CreateUser) HasIsBot() bool {
	if o != nil && o.IsBot != nil {
		return true
	}

	return false
}

// SetIsBot gets a reference to the given bool and assigns it to the IsBot field.
func (o *CreateUser) SetIsBot(v bool) {
	o.IsBot = &v
}

// GetName returns the Name field value
func (o *CreateUser) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CreateUser) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *CreateUser) SetName(v string) {
	o.Name = v
}

// GetOwner returns the Owner field value if set, zero value otherwise.
func (o *CreateUser) GetOwner() EntityReference {
	if o == nil || o.Owner == nil {
		var ret EntityReference
		return ret
	}
	return *o.Owner
}

// GetOwnerOk returns a tuple with the Owner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateUser) GetOwnerOk() (*EntityReference, bool) {
	if o == nil || o.Owner == nil {
		return nil, false
	}
	return o.Owner, true
}

// HasOwner returns a boolean if a field has been set.
func (o *CreateUser) HasOwner() bool {
	if o != nil && o.Owner != nil {
		return true
	}

	return false
}

// SetOwner gets a reference to the given EntityReference and assigns it to the Owner field.
func (o *CreateUser) SetOwner(v EntityReference) {
	o.Owner = &v
}

// GetProfile returns the Profile field value if set, zero value otherwise.
func (o *CreateUser) GetProfile() Profile {
	if o == nil || o.Profile == nil {
		var ret Profile
		return ret
	}
	return *o.Profile
}

// GetProfileOk returns a tuple with the Profile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateUser) GetProfileOk() (*Profile, bool) {
	if o == nil || o.Profile == nil {
		return nil, false
	}
	return o.Profile, true
}

// HasProfile returns a boolean if a field has been set.
func (o *CreateUser) HasProfile() bool {
	if o != nil && o.Profile != nil {
		return true
	}

	return false
}

// SetProfile gets a reference to the given Profile and assigns it to the Profile field.
func (o *CreateUser) SetProfile(v Profile) {
	o.Profile = &v
}

// GetRoles returns the Roles field value if set, zero value otherwise.
func (o *CreateUser) GetRoles() []string {
	if o == nil || o.Roles == nil {
		var ret []string
		return ret
	}
	return o.Roles
}

// GetRolesOk returns a tuple with the Roles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateUser) GetRolesOk() ([]string, bool) {
	if o == nil || o.Roles == nil {
		return nil, false
	}
	return o.Roles, true
}

// HasRoles returns a boolean if a field has been set.
func (o *CreateUser) HasRoles() bool {
	if o != nil && o.Roles != nil {
		return true
	}

	return false
}

// SetRoles gets a reference to the given []string and assigns it to the Roles field.
func (o *CreateUser) SetRoles(v []string) {
	o.Roles = v
}

// GetTeams returns the Teams field value if set, zero value otherwise.
func (o *CreateUser) GetTeams() []string {
	if o == nil || o.Teams == nil {
		var ret []string
		return ret
	}
	return o.Teams
}

// GetTeamsOk returns a tuple with the Teams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateUser) GetTeamsOk() ([]string, bool) {
	if o == nil || o.Teams == nil {
		return nil, false
	}
	return o.Teams, true
}

// HasTeams returns a boolean if a field has been set.
func (o *CreateUser) HasTeams() bool {
	if o != nil && o.Teams != nil {
		return true
	}

	return false
}

// SetTeams gets a reference to the given []string and assigns it to the Teams field.
func (o *CreateUser) SetTeams(v []string) {
	o.Teams = v
}

// GetTimezone returns the Timezone field value if set, zero value otherwise.
func (o *CreateUser) GetTimezone() string {
	if o == nil || o.Timezone == nil {
		var ret string
		return ret
	}
	return *o.Timezone
}

// GetTimezoneOk returns a tuple with the Timezone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateUser) GetTimezoneOk() (*string, bool) {
	if o == nil || o.Timezone == nil {
		return nil, false
	}
	return o.Timezone, true
}

// HasTimezone returns a boolean if a field has been set.
func (o *CreateUser) HasTimezone() bool {
	if o != nil && o.Timezone != nil {
		return true
	}

	return false
}

// SetTimezone gets a reference to the given string and assigns it to the Timezone field.
func (o *CreateUser) SetTimezone(v string) {
	o.Timezone = &v
}

func (o CreateUser) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.DisplayName != nil {
		toSerialize["displayName"] = o.DisplayName
	}
	if true {
		toSerialize["email"] = o.Email
	}
	if o.Extension != nil {
		toSerialize["extension"] = o.Extension
	}
	if o.IsAdmin != nil {
		toSerialize["isAdmin"] = o.IsAdmin
	}
	if o.IsBot != nil {
		toSerialize["isBot"] = o.IsBot
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if o.Owner != nil {
		toSerialize["owner"] = o.Owner
	}
	if o.Profile != nil {
		toSerialize["profile"] = o.Profile
	}
	if o.Roles != nil {
		toSerialize["roles"] = o.Roles
	}
	if o.Teams != nil {
		toSerialize["teams"] = o.Teams
	}
	if o.Timezone != nil {
		toSerialize["timezone"] = o.Timezone
	}
	return json.Marshal(toSerialize)
}

type NullableCreateUser struct {
	value *CreateUser
	isSet bool
}

func (v NullableCreateUser) Get() *CreateUser {
	return v.value
}

func (v *NullableCreateUser) Set(val *CreateUser) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateUser) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateUser) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateUser(val *CreateUser) *NullableCreateUser {
	return &NullableCreateUser{value: val, isSet: true}
}

func (v NullableCreateUser) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateUser) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
