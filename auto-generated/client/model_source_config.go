/*
OpenMetadata Apis

# Overview  OpenMetadata supports REST APIs for getting metadata in and out of metadata store. The API resources are grouped under following categories: - **Data assets** - includes resources for data entities, such as `databases`, `tables`, and `topics`. Resources for data assets created from data, such as `dashboards`, `reports`, `metrics`, and `ML Features` are part of this collection. `pipelines`, `notebooks`, etc. that are used for creating data assets are also available as resources as of this collection. - **Teams and Users** - includes `users`, `teams`, a special type of user called `bots` that performs many automated tasks such as ingestion. - **Services** - are services that OpenMetadata integrates with. Currently `databaseService` is the only service under this collection that represents data sources. In the future, services related to Dashboards, Reports, ETL pipelines will be added under this collection. - **Glossary** - OpenMetadata supports hierarchical tags that can be used to build business vocabulary to describe and classify data available under `tags` resource.

API version: 0.11.0
Contact: openmetadata-dev@googlegroups.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// SourceConfig struct for SourceConfig
type SourceConfig struct {
	Config map[string]interface{} `json:"config,omitempty"`
}

// NewSourceConfig instantiates a new SourceConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSourceConfig() *SourceConfig {
	this := SourceConfig{}
	return &this
}

// NewSourceConfigWithDefaults instantiates a new SourceConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSourceConfigWithDefaults() *SourceConfig {
	this := SourceConfig{}
	return &this
}

// GetConfig returns the Config field value if set, zero value otherwise.
func (o *SourceConfig) GetConfig() map[string]interface{} {
	if o == nil || o.Config == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.Config
}

// GetConfigOk returns a tuple with the Config field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SourceConfig) GetConfigOk() (map[string]interface{}, bool) {
	if o == nil || o.Config == nil {
		return nil, false
	}
	return o.Config, true
}

// HasConfig returns a boolean if a field has been set.
func (o *SourceConfig) HasConfig() bool {
	if o != nil && o.Config != nil {
		return true
	}

	return false
}

// SetConfig gets a reference to the given map[string]interface{} and assigns it to the Config field.
func (o *SourceConfig) SetConfig(v map[string]interface{}) {
	o.Config = v
}

func (o SourceConfig) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Config != nil {
		toSerialize["config"] = o.Config
	}
	return json.Marshal(toSerialize)
}

type NullableSourceConfig struct {
	value *SourceConfig
	isSet bool
}

func (v NullableSourceConfig) Get() *SourceConfig {
	return v.value
}

func (v *NullableSourceConfig) Set(val *SourceConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableSourceConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableSourceConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSourceConfig(val *SourceConfig) *NullableSourceConfig {
	return &NullableSourceConfig{value: val, isSet: true}
}

func (v NullableSourceConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSourceConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
