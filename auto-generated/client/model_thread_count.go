/*
OpenMetadata Apis

# Overview  OpenMetadata supports REST APIs for getting metadata in and out of metadata store. The API resources are grouped under following categories: - **Data assets** - includes resources for data entities, such as `databases`, `tables`, and `topics`. Resources for data assets created from data, such as `dashboards`, `reports`, `metrics`, and `ML Features` are part of this collection. `pipelines`, `notebooks`, etc. that are used for creating data assets are also available as resources as of this collection. - **Teams and Users** - includes `users`, `teams`, a special type of user called `bots` that performs many automated tasks such as ingestion. - **Services** - are services that OpenMetadata integrates with. Currently `databaseService` is the only service under this collection that represents data sources. In the future, services related to Dashboards, Reports, ETL pipelines will be added under this collection. - **Glossary** - OpenMetadata supports hierarchical tags that can be used to build business vocabulary to describe and classify data available under `tags` resource.

API version: 0.11.0
Contact: openmetadata-dev@googlegroups.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ThreadCount struct for ThreadCount
type ThreadCount struct {
	Counts     []EntityLinkThreadCount `json:"counts"`
	TotalCount int32                   `json:"totalCount"`
}

// NewThreadCount instantiates a new ThreadCount object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewThreadCount(counts []EntityLinkThreadCount, totalCount int32) *ThreadCount {
	this := ThreadCount{}
	this.Counts = counts
	this.TotalCount = totalCount
	return &this
}

// NewThreadCountWithDefaults instantiates a new ThreadCount object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewThreadCountWithDefaults() *ThreadCount {
	this := ThreadCount{}
	return &this
}

// GetCounts returns the Counts field value
func (o *ThreadCount) GetCounts() []EntityLinkThreadCount {
	if o == nil {
		var ret []EntityLinkThreadCount
		return ret
	}

	return o.Counts
}

// GetCountsOk returns a tuple with the Counts field value
// and a boolean to check if the value has been set.
func (o *ThreadCount) GetCountsOk() ([]EntityLinkThreadCount, bool) {
	if o == nil {
		return nil, false
	}
	return o.Counts, true
}

// SetCounts sets field value
func (o *ThreadCount) SetCounts(v []EntityLinkThreadCount) {
	o.Counts = v
}

// GetTotalCount returns the TotalCount field value
func (o *ThreadCount) GetTotalCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.TotalCount
}

// GetTotalCountOk returns a tuple with the TotalCount field value
// and a boolean to check if the value has been set.
func (o *ThreadCount) GetTotalCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TotalCount, true
}

// SetTotalCount sets field value
func (o *ThreadCount) SetTotalCount(v int32) {
	o.TotalCount = v
}

func (o ThreadCount) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["counts"] = o.Counts
	}
	if true {
		toSerialize["totalCount"] = o.TotalCount
	}
	return json.Marshal(toSerialize)
}

type NullableThreadCount struct {
	value *ThreadCount
	isSet bool
}

func (v NullableThreadCount) Get() *ThreadCount {
	return v.value
}

func (v *NullableThreadCount) Set(val *ThreadCount) {
	v.value = val
	v.isSet = true
}

func (v NullableThreadCount) IsSet() bool {
	return v.isSet
}

func (v *NullableThreadCount) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableThreadCount(val *ThreadCount) *NullableThreadCount {
	return &NullableThreadCount{value: val, isSet: true}
}

func (v NullableThreadCount) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableThreadCount) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
