/*
OpenMetadata Apis

# Overview  OpenMetadata supports REST APIs for getting metadata in and out of metadata store. The API resources are grouped under following categories: - **Data assets** - includes resources for data entities, such as `databases`, `tables`, and `topics`. Resources for data assets created from data, such as `dashboards`, `reports`, `metrics`, and `ML Features` are part of this collection. `pipelines`, `notebooks`, etc. that are used for creating data assets are also available as resources as of this collection. - **Teams and Users** - includes `users`, `teams`, a special type of user called `bots` that performs many automated tasks such as ingestion. - **Services** - are services that OpenMetadata integrates with. Currently `databaseService` is the only service under this collection that represents data sources. In the future, services related to Dashboards, Reports, ETL pipelines will be added under this collection. - **Glossary** - OpenMetadata supports hierarchical tags that can be used to build business vocabulary to describe and classify data available under `tags` resource.

API version: 0.11.0
Contact: openmetadata-dev@googlegroups.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// CreatePolicy struct for CreatePolicy
type CreatePolicy struct {
	Description *string                  `json:"description,omitempty"`
	DisplayName *string                  `json:"displayName,omitempty"`
	Enabled     *bool                    `json:"enabled,omitempty"`
	Extension   map[string]interface{}   `json:"extension,omitempty"`
	Location    *string                  `json:"location,omitempty"`
	Name        string                   `json:"name"`
	Owner       *EntityReference         `json:"owner,omitempty"`
	PolicyType  string                   `json:"policyType"`
	PolicyUrl   *string                  `json:"policyUrl,omitempty"`
	Rules       []map[string]interface{} `json:"rules,omitempty"`
}

// NewCreatePolicy instantiates a new CreatePolicy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreatePolicy(name string, policyType string) *CreatePolicy {
	this := CreatePolicy{}
	this.Name = name
	this.PolicyType = policyType
	return &this
}

// NewCreatePolicyWithDefaults instantiates a new CreatePolicy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreatePolicyWithDefaults() *CreatePolicy {
	this := CreatePolicy{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *CreatePolicy) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreatePolicy) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *CreatePolicy) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *CreatePolicy) SetDescription(v string) {
	o.Description = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *CreatePolicy) GetDisplayName() string {
	if o == nil || o.DisplayName == nil {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreatePolicy) GetDisplayNameOk() (*string, bool) {
	if o == nil || o.DisplayName == nil {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *CreatePolicy) HasDisplayName() bool {
	if o != nil && o.DisplayName != nil {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *CreatePolicy) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *CreatePolicy) GetEnabled() bool {
	if o == nil || o.Enabled == nil {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreatePolicy) GetEnabledOk() (*bool, bool) {
	if o == nil || o.Enabled == nil {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *CreatePolicy) HasEnabled() bool {
	if o != nil && o.Enabled != nil {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *CreatePolicy) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetExtension returns the Extension field value if set, zero value otherwise.
func (o *CreatePolicy) GetExtension() map[string]interface{} {
	if o == nil || o.Extension == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreatePolicy) GetExtensionOk() (map[string]interface{}, bool) {
	if o == nil || o.Extension == nil {
		return nil, false
	}
	return o.Extension, true
}

// HasExtension returns a boolean if a field has been set.
func (o *CreatePolicy) HasExtension() bool {
	if o != nil && o.Extension != nil {
		return true
	}

	return false
}

// SetExtension gets a reference to the given map[string]interface{} and assigns it to the Extension field.
func (o *CreatePolicy) SetExtension(v map[string]interface{}) {
	o.Extension = v
}

// GetLocation returns the Location field value if set, zero value otherwise.
func (o *CreatePolicy) GetLocation() string {
	if o == nil || o.Location == nil {
		var ret string
		return ret
	}
	return *o.Location
}

// GetLocationOk returns a tuple with the Location field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreatePolicy) GetLocationOk() (*string, bool) {
	if o == nil || o.Location == nil {
		return nil, false
	}
	return o.Location, true
}

// HasLocation returns a boolean if a field has been set.
func (o *CreatePolicy) HasLocation() bool {
	if o != nil && o.Location != nil {
		return true
	}

	return false
}

// SetLocation gets a reference to the given string and assigns it to the Location field.
func (o *CreatePolicy) SetLocation(v string) {
	o.Location = &v
}

// GetName returns the Name field value
func (o *CreatePolicy) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CreatePolicy) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *CreatePolicy) SetName(v string) {
	o.Name = v
}

// GetOwner returns the Owner field value if set, zero value otherwise.
func (o *CreatePolicy) GetOwner() EntityReference {
	if o == nil || o.Owner == nil {
		var ret EntityReference
		return ret
	}
	return *o.Owner
}

// GetOwnerOk returns a tuple with the Owner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreatePolicy) GetOwnerOk() (*EntityReference, bool) {
	if o == nil || o.Owner == nil {
		return nil, false
	}
	return o.Owner, true
}

// HasOwner returns a boolean if a field has been set.
func (o *CreatePolicy) HasOwner() bool {
	if o != nil && o.Owner != nil {
		return true
	}

	return false
}

// SetOwner gets a reference to the given EntityReference and assigns it to the Owner field.
func (o *CreatePolicy) SetOwner(v EntityReference) {
	o.Owner = &v
}

// GetPolicyType returns the PolicyType field value
func (o *CreatePolicy) GetPolicyType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PolicyType
}

// GetPolicyTypeOk returns a tuple with the PolicyType field value
// and a boolean to check if the value has been set.
func (o *CreatePolicy) GetPolicyTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PolicyType, true
}

// SetPolicyType sets field value
func (o *CreatePolicy) SetPolicyType(v string) {
	o.PolicyType = v
}

// GetPolicyUrl returns the PolicyUrl field value if set, zero value otherwise.
func (o *CreatePolicy) GetPolicyUrl() string {
	if o == nil || o.PolicyUrl == nil {
		var ret string
		return ret
	}
	return *o.PolicyUrl
}

// GetPolicyUrlOk returns a tuple with the PolicyUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreatePolicy) GetPolicyUrlOk() (*string, bool) {
	if o == nil || o.PolicyUrl == nil {
		return nil, false
	}
	return o.PolicyUrl, true
}

// HasPolicyUrl returns a boolean if a field has been set.
func (o *CreatePolicy) HasPolicyUrl() bool {
	if o != nil && o.PolicyUrl != nil {
		return true
	}

	return false
}

// SetPolicyUrl gets a reference to the given string and assigns it to the PolicyUrl field.
func (o *CreatePolicy) SetPolicyUrl(v string) {
	o.PolicyUrl = &v
}

// GetRules returns the Rules field value if set, zero value otherwise.
func (o *CreatePolicy) GetRules() []map[string]interface{} {
	if o == nil || o.Rules == nil {
		var ret []map[string]interface{}
		return ret
	}
	return o.Rules
}

// GetRulesOk returns a tuple with the Rules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreatePolicy) GetRulesOk() ([]map[string]interface{}, bool) {
	if o == nil || o.Rules == nil {
		return nil, false
	}
	return o.Rules, true
}

// HasRules returns a boolean if a field has been set.
func (o *CreatePolicy) HasRules() bool {
	if o != nil && o.Rules != nil {
		return true
	}

	return false
}

// SetRules gets a reference to the given []map[string]interface{} and assigns it to the Rules field.
func (o *CreatePolicy) SetRules(v []map[string]interface{}) {
	o.Rules = v
}

func (o CreatePolicy) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.DisplayName != nil {
		toSerialize["displayName"] = o.DisplayName
	}
	if o.Enabled != nil {
		toSerialize["enabled"] = o.Enabled
	}
	if o.Extension != nil {
		toSerialize["extension"] = o.Extension
	}
	if o.Location != nil {
		toSerialize["location"] = o.Location
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if o.Owner != nil {
		toSerialize["owner"] = o.Owner
	}
	if true {
		toSerialize["policyType"] = o.PolicyType
	}
	if o.PolicyUrl != nil {
		toSerialize["policyUrl"] = o.PolicyUrl
	}
	if o.Rules != nil {
		toSerialize["rules"] = o.Rules
	}
	return json.Marshal(toSerialize)
}

type NullableCreatePolicy struct {
	value *CreatePolicy
	isSet bool
}

func (v NullableCreatePolicy) Get() *CreatePolicy {
	return v.value
}

func (v *NullableCreatePolicy) Set(val *CreatePolicy) {
	v.value = val
	v.isSet = true
}

func (v NullableCreatePolicy) IsSet() bool {
	return v.isSet
}

func (v *NullableCreatePolicy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreatePolicy(val *CreatePolicy) *NullableCreatePolicy {
	return &NullableCreatePolicy{value: val, isSet: true}
}

func (v NullableCreatePolicy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreatePolicy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
