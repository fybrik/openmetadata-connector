/*
OpenMetadata Apis

# Overview  OpenMetadata supports REST APIs for getting metadata in and out of metadata store. The API resources are grouped under following categories: - **Data assets** - includes resources for data entities, such as `databases`, `tables`, and `topics`. Resources for data assets created from data, such as `dashboards`, `reports`, `metrics`, and `ML Features` are part of this collection. `pipelines`, `notebooks`, etc. that are used for creating data assets are also available as resources as of this collection. - **Teams and Users** - includes `users`, `teams`, a special type of user called `bots` that performs many automated tasks such as ingestion. - **Services** - are services that OpenMetadata integrates with. Currently `databaseService` is the only service under this collection that represents data sources. In the future, services related to Dashboards, Reports, ETL pipelines will be added under this collection. - **Glossary** - OpenMetadata supports hierarchical tags that can be used to build business vocabulary to describe and classify data available under `tags` resource.

API version: 0.11.0
Contact: openmetadata-dev@googlegroups.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// SQLQuery struct for SQLQuery
type SQLQuery struct {
	Checksum  *string          `json:"checksum,omitempty"`
	Duration  *float64         `json:"duration,omitempty"`
	Query     *string          `json:"query,omitempty"`
	QueryDate *string          `json:"queryDate,omitempty"`
	User      *EntityReference `json:"user,omitempty"`
	Vote      *float64         `json:"vote,omitempty"`
}

// NewSQLQuery instantiates a new SQLQuery object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSQLQuery() *SQLQuery {
	this := SQLQuery{}
	return &this
}

// NewSQLQueryWithDefaults instantiates a new SQLQuery object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSQLQueryWithDefaults() *SQLQuery {
	this := SQLQuery{}
	return &this
}

// GetChecksum returns the Checksum field value if set, zero value otherwise.
func (o *SQLQuery) GetChecksum() string {
	if o == nil || o.Checksum == nil {
		var ret string
		return ret
	}
	return *o.Checksum
}

// GetChecksumOk returns a tuple with the Checksum field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SQLQuery) GetChecksumOk() (*string, bool) {
	if o == nil || o.Checksum == nil {
		return nil, false
	}
	return o.Checksum, true
}

// HasChecksum returns a boolean if a field has been set.
func (o *SQLQuery) HasChecksum() bool {
	if o != nil && o.Checksum != nil {
		return true
	}

	return false
}

// SetChecksum gets a reference to the given string and assigns it to the Checksum field.
func (o *SQLQuery) SetChecksum(v string) {
	o.Checksum = &v
}

// GetDuration returns the Duration field value if set, zero value otherwise.
func (o *SQLQuery) GetDuration() float64 {
	if o == nil || o.Duration == nil {
		var ret float64
		return ret
	}
	return *o.Duration
}

// GetDurationOk returns a tuple with the Duration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SQLQuery) GetDurationOk() (*float64, bool) {
	if o == nil || o.Duration == nil {
		return nil, false
	}
	return o.Duration, true
}

// HasDuration returns a boolean if a field has been set.
func (o *SQLQuery) HasDuration() bool {
	if o != nil && o.Duration != nil {
		return true
	}

	return false
}

// SetDuration gets a reference to the given float64 and assigns it to the Duration field.
func (o *SQLQuery) SetDuration(v float64) {
	o.Duration = &v
}

// GetQuery returns the Query field value if set, zero value otherwise.
func (o *SQLQuery) GetQuery() string {
	if o == nil || o.Query == nil {
		var ret string
		return ret
	}
	return *o.Query
}

// GetQueryOk returns a tuple with the Query field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SQLQuery) GetQueryOk() (*string, bool) {
	if o == nil || o.Query == nil {
		return nil, false
	}
	return o.Query, true
}

// HasQuery returns a boolean if a field has been set.
func (o *SQLQuery) HasQuery() bool {
	if o != nil && o.Query != nil {
		return true
	}

	return false
}

// SetQuery gets a reference to the given string and assigns it to the Query field.
func (o *SQLQuery) SetQuery(v string) {
	o.Query = &v
}

// GetQueryDate returns the QueryDate field value if set, zero value otherwise.
func (o *SQLQuery) GetQueryDate() string {
	if o == nil || o.QueryDate == nil {
		var ret string
		return ret
	}
	return *o.QueryDate
}

// GetQueryDateOk returns a tuple with the QueryDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SQLQuery) GetQueryDateOk() (*string, bool) {
	if o == nil || o.QueryDate == nil {
		return nil, false
	}
	return o.QueryDate, true
}

// HasQueryDate returns a boolean if a field has been set.
func (o *SQLQuery) HasQueryDate() bool {
	if o != nil && o.QueryDate != nil {
		return true
	}

	return false
}

// SetQueryDate gets a reference to the given string and assigns it to the QueryDate field.
func (o *SQLQuery) SetQueryDate(v string) {
	o.QueryDate = &v
}

// GetUser returns the User field value if set, zero value otherwise.
func (o *SQLQuery) GetUser() EntityReference {
	if o == nil || o.User == nil {
		var ret EntityReference
		return ret
	}
	return *o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SQLQuery) GetUserOk() (*EntityReference, bool) {
	if o == nil || o.User == nil {
		return nil, false
	}
	return o.User, true
}

// HasUser returns a boolean if a field has been set.
func (o *SQLQuery) HasUser() bool {
	if o != nil && o.User != nil {
		return true
	}

	return false
}

// SetUser gets a reference to the given EntityReference and assigns it to the User field.
func (o *SQLQuery) SetUser(v EntityReference) {
	o.User = &v
}

// GetVote returns the Vote field value if set, zero value otherwise.
func (o *SQLQuery) GetVote() float64 {
	if o == nil || o.Vote == nil {
		var ret float64
		return ret
	}
	return *o.Vote
}

// GetVoteOk returns a tuple with the Vote field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SQLQuery) GetVoteOk() (*float64, bool) {
	if o == nil || o.Vote == nil {
		return nil, false
	}
	return o.Vote, true
}

// HasVote returns a boolean if a field has been set.
func (o *SQLQuery) HasVote() bool {
	if o != nil && o.Vote != nil {
		return true
	}

	return false
}

// SetVote gets a reference to the given float64 and assigns it to the Vote field.
func (o *SQLQuery) SetVote(v float64) {
	o.Vote = &v
}

func (o SQLQuery) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Checksum != nil {
		toSerialize["checksum"] = o.Checksum
	}
	if o.Duration != nil {
		toSerialize["duration"] = o.Duration
	}
	if o.Query != nil {
		toSerialize["query"] = o.Query
	}
	if o.QueryDate != nil {
		toSerialize["queryDate"] = o.QueryDate
	}
	if o.User != nil {
		toSerialize["user"] = o.User
	}
	if o.Vote != nil {
		toSerialize["vote"] = o.Vote
	}
	return json.Marshal(toSerialize)
}

type NullableSQLQuery struct {
	value *SQLQuery
	isSet bool
}

func (v NullableSQLQuery) Get() *SQLQuery {
	return v.value
}

func (v *NullableSQLQuery) Set(val *SQLQuery) {
	v.value = val
	v.isSet = true
}

func (v NullableSQLQuery) IsSet() bool {
	return v.isSet
}

func (v *NullableSQLQuery) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSQLQuery(val *SQLQuery) *NullableSQLQuery {
	return &NullableSQLQuery{value: val, isSet: true}
}

func (v NullableSQLQuery) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSQLQuery) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
