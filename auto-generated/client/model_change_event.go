/*
OpenMetadata Apis

# Overview  OpenMetadata supports REST APIs for getting metadata in and out of metadata store. The API resources are grouped under following categories: - **Data assets** - includes resources for data entities, such as `databases`, `tables`, and `topics`. Resources for data assets created from data, such as `dashboards`, `reports`, `metrics`, and `ML Features` are part of this collection. `pipelines`, `notebooks`, etc. that are used for creating data assets are also available as resources as of this collection. - **Teams and Users** - includes `users`, `teams`, a special type of user called `bots` that performs many automated tasks such as ingestion. - **Services** - are services that OpenMetadata integrates with. Currently `databaseService` is the only service under this collection that represents data sources. In the future, services related to Dashboards, Reports, ETL pipelines will be added under this collection. - **Glossary** - OpenMetadata supports hierarchical tags that can be used to build business vocabulary to describe and classify data available under `tags` resource.

API version: 0.11.0
Contact: openmetadata-dev@googlegroups.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ChangeEvent struct for ChangeEvent
type ChangeEvent struct {
	ChangeDescription        *ChangeDescription     `json:"changeDescription,omitempty"`
	CurrentVersion           *float64               `json:"currentVersion,omitempty"`
	Entity                   map[string]interface{} `json:"entity,omitempty"`
	EntityFullyQualifiedName *string                `json:"entityFullyQualifiedName,omitempty"`
	EntityId                 string                 `json:"entityId"`
	EntityType               string                 `json:"entityType"`
	EventType                string                 `json:"eventType"`
	PreviousVersion          *float64               `json:"previousVersion,omitempty"`
	Timestamp                int64                  `json:"timestamp"`
	UserName                 *string                `json:"userName,omitempty"`
}

// NewChangeEvent instantiates a new ChangeEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChangeEvent(entityId string, entityType string, eventType string, timestamp int64) *ChangeEvent {
	this := ChangeEvent{}
	this.EntityId = entityId
	this.EntityType = entityType
	this.EventType = eventType
	this.Timestamp = timestamp
	return &this
}

// NewChangeEventWithDefaults instantiates a new ChangeEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChangeEventWithDefaults() *ChangeEvent {
	this := ChangeEvent{}
	return &this
}

// GetChangeDescription returns the ChangeDescription field value if set, zero value otherwise.
func (o *ChangeEvent) GetChangeDescription() ChangeDescription {
	if o == nil || o.ChangeDescription == nil {
		var ret ChangeDescription
		return ret
	}
	return *o.ChangeDescription
}

// GetChangeDescriptionOk returns a tuple with the ChangeDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChangeEvent) GetChangeDescriptionOk() (*ChangeDescription, bool) {
	if o == nil || o.ChangeDescription == nil {
		return nil, false
	}
	return o.ChangeDescription, true
}

// HasChangeDescription returns a boolean if a field has been set.
func (o *ChangeEvent) HasChangeDescription() bool {
	if o != nil && o.ChangeDescription != nil {
		return true
	}

	return false
}

// SetChangeDescription gets a reference to the given ChangeDescription and assigns it to the ChangeDescription field.
func (o *ChangeEvent) SetChangeDescription(v ChangeDescription) {
	o.ChangeDescription = &v
}

// GetCurrentVersion returns the CurrentVersion field value if set, zero value otherwise.
func (o *ChangeEvent) GetCurrentVersion() float64 {
	if o == nil || o.CurrentVersion == nil {
		var ret float64
		return ret
	}
	return *o.CurrentVersion
}

// GetCurrentVersionOk returns a tuple with the CurrentVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChangeEvent) GetCurrentVersionOk() (*float64, bool) {
	if o == nil || o.CurrentVersion == nil {
		return nil, false
	}
	return o.CurrentVersion, true
}

// HasCurrentVersion returns a boolean if a field has been set.
func (o *ChangeEvent) HasCurrentVersion() bool {
	if o != nil && o.CurrentVersion != nil {
		return true
	}

	return false
}

// SetCurrentVersion gets a reference to the given float64 and assigns it to the CurrentVersion field.
func (o *ChangeEvent) SetCurrentVersion(v float64) {
	o.CurrentVersion = &v
}

// GetEntity returns the Entity field value if set, zero value otherwise.
func (o *ChangeEvent) GetEntity() map[string]interface{} {
	if o == nil || o.Entity == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.Entity
}

// GetEntityOk returns a tuple with the Entity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChangeEvent) GetEntityOk() (map[string]interface{}, bool) {
	if o == nil || o.Entity == nil {
		return nil, false
	}
	return o.Entity, true
}

// HasEntity returns a boolean if a field has been set.
func (o *ChangeEvent) HasEntity() bool {
	if o != nil && o.Entity != nil {
		return true
	}

	return false
}

// SetEntity gets a reference to the given map[string]interface{} and assigns it to the Entity field.
func (o *ChangeEvent) SetEntity(v map[string]interface{}) {
	o.Entity = v
}

// GetEntityFullyQualifiedName returns the EntityFullyQualifiedName field value if set, zero value otherwise.
func (o *ChangeEvent) GetEntityFullyQualifiedName() string {
	if o == nil || o.EntityFullyQualifiedName == nil {
		var ret string
		return ret
	}
	return *o.EntityFullyQualifiedName
}

// GetEntityFullyQualifiedNameOk returns a tuple with the EntityFullyQualifiedName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChangeEvent) GetEntityFullyQualifiedNameOk() (*string, bool) {
	if o == nil || o.EntityFullyQualifiedName == nil {
		return nil, false
	}
	return o.EntityFullyQualifiedName, true
}

// HasEntityFullyQualifiedName returns a boolean if a field has been set.
func (o *ChangeEvent) HasEntityFullyQualifiedName() bool {
	if o != nil && o.EntityFullyQualifiedName != nil {
		return true
	}

	return false
}

// SetEntityFullyQualifiedName gets a reference to the given string and assigns it to the EntityFullyQualifiedName field.
func (o *ChangeEvent) SetEntityFullyQualifiedName(v string) {
	o.EntityFullyQualifiedName = &v
}

// GetEntityId returns the EntityId field value
func (o *ChangeEvent) GetEntityId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EntityId
}

// GetEntityIdOk returns a tuple with the EntityId field value
// and a boolean to check if the value has been set.
func (o *ChangeEvent) GetEntityIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EntityId, true
}

// SetEntityId sets field value
func (o *ChangeEvent) SetEntityId(v string) {
	o.EntityId = v
}

// GetEntityType returns the EntityType field value
func (o *ChangeEvent) GetEntityType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EntityType
}

// GetEntityTypeOk returns a tuple with the EntityType field value
// and a boolean to check if the value has been set.
func (o *ChangeEvent) GetEntityTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EntityType, true
}

// SetEntityType sets field value
func (o *ChangeEvent) SetEntityType(v string) {
	o.EntityType = v
}

// GetEventType returns the EventType field value
func (o *ChangeEvent) GetEventType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EventType
}

// GetEventTypeOk returns a tuple with the EventType field value
// and a boolean to check if the value has been set.
func (o *ChangeEvent) GetEventTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EventType, true
}

// SetEventType sets field value
func (o *ChangeEvent) SetEventType(v string) {
	o.EventType = v
}

// GetPreviousVersion returns the PreviousVersion field value if set, zero value otherwise.
func (o *ChangeEvent) GetPreviousVersion() float64 {
	if o == nil || o.PreviousVersion == nil {
		var ret float64
		return ret
	}
	return *o.PreviousVersion
}

// GetPreviousVersionOk returns a tuple with the PreviousVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChangeEvent) GetPreviousVersionOk() (*float64, bool) {
	if o == nil || o.PreviousVersion == nil {
		return nil, false
	}
	return o.PreviousVersion, true
}

// HasPreviousVersion returns a boolean if a field has been set.
func (o *ChangeEvent) HasPreviousVersion() bool {
	if o != nil && o.PreviousVersion != nil {
		return true
	}

	return false
}

// SetPreviousVersion gets a reference to the given float64 and assigns it to the PreviousVersion field.
func (o *ChangeEvent) SetPreviousVersion(v float64) {
	o.PreviousVersion = &v
}

// GetTimestamp returns the Timestamp field value
func (o *ChangeEvent) GetTimestamp() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value
// and a boolean to check if the value has been set.
func (o *ChangeEvent) GetTimestampOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Timestamp, true
}

// SetTimestamp sets field value
func (o *ChangeEvent) SetTimestamp(v int64) {
	o.Timestamp = v
}

// GetUserName returns the UserName field value if set, zero value otherwise.
func (o *ChangeEvent) GetUserName() string {
	if o == nil || o.UserName == nil {
		var ret string
		return ret
	}
	return *o.UserName
}

// GetUserNameOk returns a tuple with the UserName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChangeEvent) GetUserNameOk() (*string, bool) {
	if o == nil || o.UserName == nil {
		return nil, false
	}
	return o.UserName, true
}

// HasUserName returns a boolean if a field has been set.
func (o *ChangeEvent) HasUserName() bool {
	if o != nil && o.UserName != nil {
		return true
	}

	return false
}

// SetUserName gets a reference to the given string and assigns it to the UserName field.
func (o *ChangeEvent) SetUserName(v string) {
	o.UserName = &v
}

func (o ChangeEvent) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ChangeDescription != nil {
		toSerialize["changeDescription"] = o.ChangeDescription
	}
	if o.CurrentVersion != nil {
		toSerialize["currentVersion"] = o.CurrentVersion
	}
	if o.Entity != nil {
		toSerialize["entity"] = o.Entity
	}
	if o.EntityFullyQualifiedName != nil {
		toSerialize["entityFullyQualifiedName"] = o.EntityFullyQualifiedName
	}
	if true {
		toSerialize["entityId"] = o.EntityId
	}
	if true {
		toSerialize["entityType"] = o.EntityType
	}
	if true {
		toSerialize["eventType"] = o.EventType
	}
	if o.PreviousVersion != nil {
		toSerialize["previousVersion"] = o.PreviousVersion
	}
	if true {
		toSerialize["timestamp"] = o.Timestamp
	}
	if o.UserName != nil {
		toSerialize["userName"] = o.UserName
	}
	return json.Marshal(toSerialize)
}

type NullableChangeEvent struct {
	value *ChangeEvent
	isSet bool
}

func (v NullableChangeEvent) Get() *ChangeEvent {
	return v.value
}

func (v *NullableChangeEvent) Set(val *ChangeEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableChangeEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableChangeEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChangeEvent(val *ChangeEvent) *NullableChangeEvent {
	return &NullableChangeEvent{value: val, isSet: true}
}

func (v NullableChangeEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChangeEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
