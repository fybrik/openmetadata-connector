/*
OpenMetadata Apis

# Overview  OpenMetadata supports REST APIs for getting metadata in and out of metadata store. The API resources are grouped under following categories: - **Data assets** - includes resources for data entities, such as `databases`, `tables`, and `topics`. Resources for data assets created from data, such as `dashboards`, `reports`, `metrics`, and `ML Features` are part of this collection. `pipelines`, `notebooks`, etc. that are used for creating data assets are also available as resources as of this collection. - **Teams and Users** - includes `users`, `teams`, a special type of user called `bots` that performs many automated tasks such as ingestion. - **Services** - are services that OpenMetadata integrates with. Currently `databaseService` is the only service under this collection that represents data sources. In the future, services related to Dashboards, Reports, ETL pipelines will be added under this collection. - **Glossary** - OpenMetadata supports hierarchical tags that can be used to build business vocabulary to describe and classify data available under `tags` resource.

API version: 0.11.0
Contact: openmetadata-dev@googlegroups.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// SearchResponse struct for SearchResponse
type SearchResponse struct {
	Aggregations     *Aggregations                  `json:"aggregations,omitempty"`
	Clusters         *Clusters                      `json:"clusters,omitempty"`
	FailedShards     *int32                         `json:"failedShards,omitempty"`
	Fragment         *bool                          `json:"fragment,omitempty"`
	Hits             *SearchHits                    `json:"hits,omitempty"`
	InternalResponse *SearchResponseSections        `json:"internalResponse,omitempty"`
	NumReducePhases  *int32                         `json:"numReducePhases,omitempty"`
	ProfileResults   *map[string]ProfileShardResult `json:"profileResults,omitempty"`
	ScrollId         *string                        `json:"scrollId,omitempty"`
	ShardFailures    []ShardSearchFailure           `json:"shardFailures,omitempty"`
	SkippedShards    *int32                         `json:"skippedShards,omitempty"`
	SuccessfulShards *int32                         `json:"successfulShards,omitempty"`
	Suggest          *Suggest                       `json:"suggest,omitempty"`
	TerminatedEarly  *bool                          `json:"terminatedEarly,omitempty"`
	TimedOut         *bool                          `json:"timedOut,omitempty"`
	Took             *TimeValue                     `json:"took,omitempty"`
	TotalShards      *int32                         `json:"totalShards,omitempty"`
}

// NewSearchResponse instantiates a new SearchResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSearchResponse() *SearchResponse {
	this := SearchResponse{}
	return &this
}

// NewSearchResponseWithDefaults instantiates a new SearchResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSearchResponseWithDefaults() *SearchResponse {
	this := SearchResponse{}
	return &this
}

// GetAggregations returns the Aggregations field value if set, zero value otherwise.
func (o *SearchResponse) GetAggregations() Aggregations {
	if o == nil || o.Aggregations == nil {
		var ret Aggregations
		return ret
	}
	return *o.Aggregations
}

// GetAggregationsOk returns a tuple with the Aggregations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchResponse) GetAggregationsOk() (*Aggregations, bool) {
	if o == nil || o.Aggregations == nil {
		return nil, false
	}
	return o.Aggregations, true
}

// HasAggregations returns a boolean if a field has been set.
func (o *SearchResponse) HasAggregations() bool {
	if o != nil && o.Aggregations != nil {
		return true
	}

	return false
}

// SetAggregations gets a reference to the given Aggregations and assigns it to the Aggregations field.
func (o *SearchResponse) SetAggregations(v Aggregations) {
	o.Aggregations = &v
}

// GetClusters returns the Clusters field value if set, zero value otherwise.
func (o *SearchResponse) GetClusters() Clusters {
	if o == nil || o.Clusters == nil {
		var ret Clusters
		return ret
	}
	return *o.Clusters
}

// GetClustersOk returns a tuple with the Clusters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchResponse) GetClustersOk() (*Clusters, bool) {
	if o == nil || o.Clusters == nil {
		return nil, false
	}
	return o.Clusters, true
}

// HasClusters returns a boolean if a field has been set.
func (o *SearchResponse) HasClusters() bool {
	if o != nil && o.Clusters != nil {
		return true
	}

	return false
}

// SetClusters gets a reference to the given Clusters and assigns it to the Clusters field.
func (o *SearchResponse) SetClusters(v Clusters) {
	o.Clusters = &v
}

// GetFailedShards returns the FailedShards field value if set, zero value otherwise.
func (o *SearchResponse) GetFailedShards() int32 {
	if o == nil || o.FailedShards == nil {
		var ret int32
		return ret
	}
	return *o.FailedShards
}

// GetFailedShardsOk returns a tuple with the FailedShards field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchResponse) GetFailedShardsOk() (*int32, bool) {
	if o == nil || o.FailedShards == nil {
		return nil, false
	}
	return o.FailedShards, true
}

// HasFailedShards returns a boolean if a field has been set.
func (o *SearchResponse) HasFailedShards() bool {
	if o != nil && o.FailedShards != nil {
		return true
	}

	return false
}

// SetFailedShards gets a reference to the given int32 and assigns it to the FailedShards field.
func (o *SearchResponse) SetFailedShards(v int32) {
	o.FailedShards = &v
}

// GetFragment returns the Fragment field value if set, zero value otherwise.
func (o *SearchResponse) GetFragment() bool {
	if o == nil || o.Fragment == nil {
		var ret bool
		return ret
	}
	return *o.Fragment
}

// GetFragmentOk returns a tuple with the Fragment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchResponse) GetFragmentOk() (*bool, bool) {
	if o == nil || o.Fragment == nil {
		return nil, false
	}
	return o.Fragment, true
}

// HasFragment returns a boolean if a field has been set.
func (o *SearchResponse) HasFragment() bool {
	if o != nil && o.Fragment != nil {
		return true
	}

	return false
}

// SetFragment gets a reference to the given bool and assigns it to the Fragment field.
func (o *SearchResponse) SetFragment(v bool) {
	o.Fragment = &v
}

// GetHits returns the Hits field value if set, zero value otherwise.
func (o *SearchResponse) GetHits() SearchHits {
	if o == nil || o.Hits == nil {
		var ret SearchHits
		return ret
	}
	return *o.Hits
}

// GetHitsOk returns a tuple with the Hits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchResponse) GetHitsOk() (*SearchHits, bool) {
	if o == nil || o.Hits == nil {
		return nil, false
	}
	return o.Hits, true
}

// HasHits returns a boolean if a field has been set.
func (o *SearchResponse) HasHits() bool {
	if o != nil && o.Hits != nil {
		return true
	}

	return false
}

// SetHits gets a reference to the given SearchHits and assigns it to the Hits field.
func (o *SearchResponse) SetHits(v SearchHits) {
	o.Hits = &v
}

// GetInternalResponse returns the InternalResponse field value if set, zero value otherwise.
func (o *SearchResponse) GetInternalResponse() SearchResponseSections {
	if o == nil || o.InternalResponse == nil {
		var ret SearchResponseSections
		return ret
	}
	return *o.InternalResponse
}

// GetInternalResponseOk returns a tuple with the InternalResponse field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchResponse) GetInternalResponseOk() (*SearchResponseSections, bool) {
	if o == nil || o.InternalResponse == nil {
		return nil, false
	}
	return o.InternalResponse, true
}

// HasInternalResponse returns a boolean if a field has been set.
func (o *SearchResponse) HasInternalResponse() bool {
	if o != nil && o.InternalResponse != nil {
		return true
	}

	return false
}

// SetInternalResponse gets a reference to the given SearchResponseSections and assigns it to the InternalResponse field.
func (o *SearchResponse) SetInternalResponse(v SearchResponseSections) {
	o.InternalResponse = &v
}

// GetNumReducePhases returns the NumReducePhases field value if set, zero value otherwise.
func (o *SearchResponse) GetNumReducePhases() int32 {
	if o == nil || o.NumReducePhases == nil {
		var ret int32
		return ret
	}
	return *o.NumReducePhases
}

// GetNumReducePhasesOk returns a tuple with the NumReducePhases field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchResponse) GetNumReducePhasesOk() (*int32, bool) {
	if o == nil || o.NumReducePhases == nil {
		return nil, false
	}
	return o.NumReducePhases, true
}

// HasNumReducePhases returns a boolean if a field has been set.
func (o *SearchResponse) HasNumReducePhases() bool {
	if o != nil && o.NumReducePhases != nil {
		return true
	}

	return false
}

// SetNumReducePhases gets a reference to the given int32 and assigns it to the NumReducePhases field.
func (o *SearchResponse) SetNumReducePhases(v int32) {
	o.NumReducePhases = &v
}

// GetProfileResults returns the ProfileResults field value if set, zero value otherwise.
func (o *SearchResponse) GetProfileResults() map[string]ProfileShardResult {
	if o == nil || o.ProfileResults == nil {
		var ret map[string]ProfileShardResult
		return ret
	}
	return *o.ProfileResults
}

// GetProfileResultsOk returns a tuple with the ProfileResults field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchResponse) GetProfileResultsOk() (*map[string]ProfileShardResult, bool) {
	if o == nil || o.ProfileResults == nil {
		return nil, false
	}
	return o.ProfileResults, true
}

// HasProfileResults returns a boolean if a field has been set.
func (o *SearchResponse) HasProfileResults() bool {
	if o != nil && o.ProfileResults != nil {
		return true
	}

	return false
}

// SetProfileResults gets a reference to the given map[string]ProfileShardResult and assigns it to the ProfileResults field.
func (o *SearchResponse) SetProfileResults(v map[string]ProfileShardResult) {
	o.ProfileResults = &v
}

// GetScrollId returns the ScrollId field value if set, zero value otherwise.
func (o *SearchResponse) GetScrollId() string {
	if o == nil || o.ScrollId == nil {
		var ret string
		return ret
	}
	return *o.ScrollId
}

// GetScrollIdOk returns a tuple with the ScrollId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchResponse) GetScrollIdOk() (*string, bool) {
	if o == nil || o.ScrollId == nil {
		return nil, false
	}
	return o.ScrollId, true
}

// HasScrollId returns a boolean if a field has been set.
func (o *SearchResponse) HasScrollId() bool {
	if o != nil && o.ScrollId != nil {
		return true
	}

	return false
}

// SetScrollId gets a reference to the given string and assigns it to the ScrollId field.
func (o *SearchResponse) SetScrollId(v string) {
	o.ScrollId = &v
}

// GetShardFailures returns the ShardFailures field value if set, zero value otherwise.
func (o *SearchResponse) GetShardFailures() []ShardSearchFailure {
	if o == nil || o.ShardFailures == nil {
		var ret []ShardSearchFailure
		return ret
	}
	return o.ShardFailures
}

// GetShardFailuresOk returns a tuple with the ShardFailures field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchResponse) GetShardFailuresOk() ([]ShardSearchFailure, bool) {
	if o == nil || o.ShardFailures == nil {
		return nil, false
	}
	return o.ShardFailures, true
}

// HasShardFailures returns a boolean if a field has been set.
func (o *SearchResponse) HasShardFailures() bool {
	if o != nil && o.ShardFailures != nil {
		return true
	}

	return false
}

// SetShardFailures gets a reference to the given []ShardSearchFailure and assigns it to the ShardFailures field.
func (o *SearchResponse) SetShardFailures(v []ShardSearchFailure) {
	o.ShardFailures = v
}

// GetSkippedShards returns the SkippedShards field value if set, zero value otherwise.
func (o *SearchResponse) GetSkippedShards() int32 {
	if o == nil || o.SkippedShards == nil {
		var ret int32
		return ret
	}
	return *o.SkippedShards
}

// GetSkippedShardsOk returns a tuple with the SkippedShards field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchResponse) GetSkippedShardsOk() (*int32, bool) {
	if o == nil || o.SkippedShards == nil {
		return nil, false
	}
	return o.SkippedShards, true
}

// HasSkippedShards returns a boolean if a field has been set.
func (o *SearchResponse) HasSkippedShards() bool {
	if o != nil && o.SkippedShards != nil {
		return true
	}

	return false
}

// SetSkippedShards gets a reference to the given int32 and assigns it to the SkippedShards field.
func (o *SearchResponse) SetSkippedShards(v int32) {
	o.SkippedShards = &v
}

// GetSuccessfulShards returns the SuccessfulShards field value if set, zero value otherwise.
func (o *SearchResponse) GetSuccessfulShards() int32 {
	if o == nil || o.SuccessfulShards == nil {
		var ret int32
		return ret
	}
	return *o.SuccessfulShards
}

// GetSuccessfulShardsOk returns a tuple with the SuccessfulShards field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchResponse) GetSuccessfulShardsOk() (*int32, bool) {
	if o == nil || o.SuccessfulShards == nil {
		return nil, false
	}
	return o.SuccessfulShards, true
}

// HasSuccessfulShards returns a boolean if a field has been set.
func (o *SearchResponse) HasSuccessfulShards() bool {
	if o != nil && o.SuccessfulShards != nil {
		return true
	}

	return false
}

// SetSuccessfulShards gets a reference to the given int32 and assigns it to the SuccessfulShards field.
func (o *SearchResponse) SetSuccessfulShards(v int32) {
	o.SuccessfulShards = &v
}

// GetSuggest returns the Suggest field value if set, zero value otherwise.
func (o *SearchResponse) GetSuggest() Suggest {
	if o == nil || o.Suggest == nil {
		var ret Suggest
		return ret
	}
	return *o.Suggest
}

// GetSuggestOk returns a tuple with the Suggest field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchResponse) GetSuggestOk() (*Suggest, bool) {
	if o == nil || o.Suggest == nil {
		return nil, false
	}
	return o.Suggest, true
}

// HasSuggest returns a boolean if a field has been set.
func (o *SearchResponse) HasSuggest() bool {
	if o != nil && o.Suggest != nil {
		return true
	}

	return false
}

// SetSuggest gets a reference to the given Suggest and assigns it to the Suggest field.
func (o *SearchResponse) SetSuggest(v Suggest) {
	o.Suggest = &v
}

// GetTerminatedEarly returns the TerminatedEarly field value if set, zero value otherwise.
func (o *SearchResponse) GetTerminatedEarly() bool {
	if o == nil || o.TerminatedEarly == nil {
		var ret bool
		return ret
	}
	return *o.TerminatedEarly
}

// GetTerminatedEarlyOk returns a tuple with the TerminatedEarly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchResponse) GetTerminatedEarlyOk() (*bool, bool) {
	if o == nil || o.TerminatedEarly == nil {
		return nil, false
	}
	return o.TerminatedEarly, true
}

// HasTerminatedEarly returns a boolean if a field has been set.
func (o *SearchResponse) HasTerminatedEarly() bool {
	if o != nil && o.TerminatedEarly != nil {
		return true
	}

	return false
}

// SetTerminatedEarly gets a reference to the given bool and assigns it to the TerminatedEarly field.
func (o *SearchResponse) SetTerminatedEarly(v bool) {
	o.TerminatedEarly = &v
}

// GetTimedOut returns the TimedOut field value if set, zero value otherwise.
func (o *SearchResponse) GetTimedOut() bool {
	if o == nil || o.TimedOut == nil {
		var ret bool
		return ret
	}
	return *o.TimedOut
}

// GetTimedOutOk returns a tuple with the TimedOut field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchResponse) GetTimedOutOk() (*bool, bool) {
	if o == nil || o.TimedOut == nil {
		return nil, false
	}
	return o.TimedOut, true
}

// HasTimedOut returns a boolean if a field has been set.
func (o *SearchResponse) HasTimedOut() bool {
	if o != nil && o.TimedOut != nil {
		return true
	}

	return false
}

// SetTimedOut gets a reference to the given bool and assigns it to the TimedOut field.
func (o *SearchResponse) SetTimedOut(v bool) {
	o.TimedOut = &v
}

// GetTook returns the Took field value if set, zero value otherwise.
func (o *SearchResponse) GetTook() TimeValue {
	if o == nil || o.Took == nil {
		var ret TimeValue
		return ret
	}
	return *o.Took
}

// GetTookOk returns a tuple with the Took field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchResponse) GetTookOk() (*TimeValue, bool) {
	if o == nil || o.Took == nil {
		return nil, false
	}
	return o.Took, true
}

// HasTook returns a boolean if a field has been set.
func (o *SearchResponse) HasTook() bool {
	if o != nil && o.Took != nil {
		return true
	}

	return false
}

// SetTook gets a reference to the given TimeValue and assigns it to the Took field.
func (o *SearchResponse) SetTook(v TimeValue) {
	o.Took = &v
}

// GetTotalShards returns the TotalShards field value if set, zero value otherwise.
func (o *SearchResponse) GetTotalShards() int32 {
	if o == nil || o.TotalShards == nil {
		var ret int32
		return ret
	}
	return *o.TotalShards
}

// GetTotalShardsOk returns a tuple with the TotalShards field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchResponse) GetTotalShardsOk() (*int32, bool) {
	if o == nil || o.TotalShards == nil {
		return nil, false
	}
	return o.TotalShards, true
}

// HasTotalShards returns a boolean if a field has been set.
func (o *SearchResponse) HasTotalShards() bool {
	if o != nil && o.TotalShards != nil {
		return true
	}

	return false
}

// SetTotalShards gets a reference to the given int32 and assigns it to the TotalShards field.
func (o *SearchResponse) SetTotalShards(v int32) {
	o.TotalShards = &v
}

func (o SearchResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Aggregations != nil {
		toSerialize["aggregations"] = o.Aggregations
	}
	if o.Clusters != nil {
		toSerialize["clusters"] = o.Clusters
	}
	if o.FailedShards != nil {
		toSerialize["failedShards"] = o.FailedShards
	}
	if o.Fragment != nil {
		toSerialize["fragment"] = o.Fragment
	}
	if o.Hits != nil {
		toSerialize["hits"] = o.Hits
	}
	if o.InternalResponse != nil {
		toSerialize["internalResponse"] = o.InternalResponse
	}
	if o.NumReducePhases != nil {
		toSerialize["numReducePhases"] = o.NumReducePhases
	}
	if o.ProfileResults != nil {
		toSerialize["profileResults"] = o.ProfileResults
	}
	if o.ScrollId != nil {
		toSerialize["scrollId"] = o.ScrollId
	}
	if o.ShardFailures != nil {
		toSerialize["shardFailures"] = o.ShardFailures
	}
	if o.SkippedShards != nil {
		toSerialize["skippedShards"] = o.SkippedShards
	}
	if o.SuccessfulShards != nil {
		toSerialize["successfulShards"] = o.SuccessfulShards
	}
	if o.Suggest != nil {
		toSerialize["suggest"] = o.Suggest
	}
	if o.TerminatedEarly != nil {
		toSerialize["terminatedEarly"] = o.TerminatedEarly
	}
	if o.TimedOut != nil {
		toSerialize["timedOut"] = o.TimedOut
	}
	if o.Took != nil {
		toSerialize["took"] = o.Took
	}
	if o.TotalShards != nil {
		toSerialize["totalShards"] = o.TotalShards
	}
	return json.Marshal(toSerialize)
}

type NullableSearchResponse struct {
	value *SearchResponse
	isSet bool
}

func (v NullableSearchResponse) Get() *SearchResponse {
	return v.value
}

func (v *NullableSearchResponse) Set(val *SearchResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableSearchResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableSearchResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearchResponse(val *SearchResponse) *NullableSearchResponse {
	return &NullableSearchResponse{value: val, isSet: true}
}

func (v NullableSearchResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSearchResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
