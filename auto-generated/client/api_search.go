/*
OpenMetadata Apis

# Overview  OpenMetadata supports REST APIs for getting metadata in and out of metadata store. The API resources are grouped under following categories: - **Data assets** - includes resources for data entities, such as `databases`, `tables`, and `topics`. Resources for data assets created from data, such as `dashboards`, `reports`, `metrics`, and `ML Features` are part of this collection. `pipelines`, `notebooks`, etc. that are used for creating data assets are also available as resources as of this collection. - **Teams and Users** - includes `users`, `teams`, a special type of user called `bots` that performs many automated tasks such as ingestion. - **Services** - are services that OpenMetadata integrates with. Currently `databaseService` is the only service under this collection that represents data sources. In the future, services related to Dashboards, Reports, ETL pipelines will be added under this collection. - **Glossary** - OpenMetadata supports hierarchical tags that can be used to build business vocabulary to describe and classify data available under `tags` resource.

API version: 0.11.0
Contact: openmetadata-dev@googlegroups.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
)

// SearchApiService SearchApi service
type SearchApiService service

type ApiGetSuggestedEntitiesRequest struct {
	ctx        context.Context
	ApiService *SearchApiService
	q          *string
	index      *string
	field      *string
}

// Suggest API can be used to auto-fill the entities name while use is typing search text &lt;br/&gt; 1. To get suggest results pass q&#x3D;us or q&#x3D;user etc.. &lt;br/&gt; 2. Do not add any wild-cards such as * like in search api &lt;br/&gt; 3. suggest api is a prefix suggestion &lt;br/&gt;
func (r ApiGetSuggestedEntitiesRequest) Q(q string) ApiGetSuggestedEntitiesRequest {
	r.q = &q
	return r
}

func (r ApiGetSuggestedEntitiesRequest) Index(index string) ApiGetSuggestedEntitiesRequest {
	r.index = &index
	return r
}

func (r ApiGetSuggestedEntitiesRequest) Field(field string) ApiGetSuggestedEntitiesRequest {
	r.field = &field
	return r
}

func (r ApiGetSuggestedEntitiesRequest) Execute() (*Suggest, *http.Response, error) {
	return r.ApiService.GetSuggestedEntitiesExecute(r)
}

/*
GetSuggestedEntities Suggest Entities

Get suggested entities used for auto-completion.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetSuggestedEntitiesRequest
*/
func (a *SearchApiService) GetSuggestedEntities(ctx context.Context) ApiGetSuggestedEntitiesRequest {
	return ApiGetSuggestedEntitiesRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//  @return Suggest
func (a *SearchApiService) GetSuggestedEntitiesExecute(r ApiGetSuggestedEntitiesRequest) (*Suggest, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Suggest
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SearchApiService.GetSuggestedEntities")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/search/suggest"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.q == nil {
		return localVarReturnValue, nil, reportError("q is required and must be specified")
	}

	localVarQueryParams.Add("q", parameterToString(*r.q, ""))
	if r.index != nil {
		localVarQueryParams.Add("index", parameterToString(*r.index, ""))
	}
	if r.field != nil {
		localVarQueryParams.Add("field", parameterToString(*r.field, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSearchEntitiesWithQueryRequest struct {
	ctx            context.Context
	ApiService     *SearchApiService
	q              *string
	index          *string
	deleted        *bool
	from           *int32
	size           *int32
	sortField      *string
	sortOrder      *string
	trackTotalHits *bool
}

// Search Query Text, Pass *text* for substring match; Pass without wildcards for exact match. &lt;br/&gt; 1. For listing all tables or topics pass q&#x3D;* &lt;br/&gt;2. For search tables or topics pass q&#x3D;*search_term* &lt;br/&gt;3. For searching field names such as search by column_name pass q&#x3D;column_names:address &lt;br/&gt;4. For searching by tag names pass q&#x3D;tags:user.email &lt;br/&gt;5. When user selects a filter pass q&#x3D;query_text AND tags:user.email AND platform:MYSQL &lt;br/&gt;6. Search with multiple values of same filter q&#x3D;tags:user.email AND tags:user.address &lt;br/&gt; logic operators such as AND and OR must be in uppercase
func (r ApiSearchEntitiesWithQueryRequest) Q(q string) ApiSearchEntitiesWithQueryRequest {
	r.q = &q
	return r
}

// ElasticSearch Index name, defaults to table_search_index
func (r ApiSearchEntitiesWithQueryRequest) Index(index string) ApiSearchEntitiesWithQueryRequest {
	r.index = &index
	return r
}

// Filter documents by deleted param. By default deleted is false
func (r ApiSearchEntitiesWithQueryRequest) Deleted(deleted bool) ApiSearchEntitiesWithQueryRequest {
	r.deleted = &deleted
	return r
}

// From field to paginate the results, defaults to 0
func (r ApiSearchEntitiesWithQueryRequest) From(from int32) ApiSearchEntitiesWithQueryRequest {
	r.from = &from
	return r
}

// Size field to limit the no.of results returned, defaults to 10
func (r ApiSearchEntitiesWithQueryRequest) Size(size int32) ApiSearchEntitiesWithQueryRequest {
	r.size = &size
	return r
}

// Sort the search results by field, available fields to sort weekly_stats , daily_stats, monthly_stats, last_updated_timestamp
func (r ApiSearchEntitiesWithQueryRequest) SortField(sortField string) ApiSearchEntitiesWithQueryRequest {
	r.sortField = &sortField
	return r
}

// Sort order asc for ascending or desc for descending, defaults to desc
func (r ApiSearchEntitiesWithQueryRequest) SortOrder(sortOrder string) ApiSearchEntitiesWithQueryRequest {
	r.sortOrder = &sortOrder
	return r
}

// Track Total Hits
func (r ApiSearchEntitiesWithQueryRequest) TrackTotalHits(trackTotalHits bool) ApiSearchEntitiesWithQueryRequest {
	r.trackTotalHits = &trackTotalHits
	return r
}

func (r ApiSearchEntitiesWithQueryRequest) Execute() (*SearchResponse, *http.Response, error) {
	return r.ApiService.SearchEntitiesWithQueryExecute(r)
}

/*
SearchEntitiesWithQuery Search entities

Search entities using query test. Use query params `from` and `size` for pagination. Use `sort_field` to sort the results in `sort_order`.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSearchEntitiesWithQueryRequest
*/
func (a *SearchApiService) SearchEntitiesWithQuery(ctx context.Context) ApiSearchEntitiesWithQueryRequest {
	return ApiSearchEntitiesWithQueryRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//  @return SearchResponse
func (a *SearchApiService) SearchEntitiesWithQueryExecute(r ApiSearchEntitiesWithQueryRequest) (*SearchResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *SearchResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SearchApiService.SearchEntitiesWithQuery")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/search/query"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.q == nil {
		return localVarReturnValue, nil, reportError("q is required and must be specified")
	}

	localVarQueryParams.Add("q", parameterToString(*r.q, ""))
	if r.index != nil {
		localVarQueryParams.Add("index", parameterToString(*r.index, ""))
	}
	if r.deleted != nil {
		localVarQueryParams.Add("deleted", parameterToString(*r.deleted, ""))
	}
	if r.from != nil {
		localVarQueryParams.Add("from", parameterToString(*r.from, ""))
	}
	if r.size != nil {
		localVarQueryParams.Add("size", parameterToString(*r.size, ""))
	}
	if r.sortField != nil {
		localVarQueryParams.Add("sort_field", parameterToString(*r.sortField, ""))
	}
	if r.sortOrder != nil {
		localVarQueryParams.Add("sort_order", parameterToString(*r.sortOrder, ""))
	}
	if r.trackTotalHits != nil {
		localVarQueryParams.Add("track_total_hits", parameterToString(*r.trackTotalHits, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
