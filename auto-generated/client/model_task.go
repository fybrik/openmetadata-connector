/*
OpenMetadata Apis

# Overview  OpenMetadata supports REST APIs for getting metadata in and out of metadata store. The API resources are grouped under following categories: - **Data assets** - includes resources for data entities, such as `databases`, `tables`, and `topics`. Resources for data assets created from data, such as `dashboards`, `reports`, `metrics`, and `ML Features` are part of this collection. `pipelines`, `notebooks`, etc. that are used for creating data assets are also available as resources as of this collection. - **Teams and Users** - includes `users`, `teams`, a special type of user called `bots` that performs many automated tasks such as ingestion. - **Services** - are services that OpenMetadata integrates with. Currently `databaseService` is the only service under this collection that represents data sources. In the future, services related to Dashboards, Reports, ETL pipelines will be added under this collection. - **Glossary** - OpenMetadata supports hierarchical tags that can be used to build business vocabulary to describe and classify data available under `tags` resource.

API version: 0.11.0
Contact: openmetadata-dev@googlegroups.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Task struct for Task
type Task struct {
	Description        *string    `json:"description,omitempty"`
	DisplayName        *string    `json:"displayName,omitempty"`
	DownstreamTasks    []string   `json:"downstreamTasks,omitempty"`
	EndDate            *string    `json:"endDate,omitempty"`
	FullyQualifiedName *string    `json:"fullyQualifiedName,omitempty"`
	Name               string     `json:"name"`
	StartDate          *string    `json:"startDate,omitempty"`
	Tags               []TagLabel `json:"tags,omitempty"`
	TaskSQL            *string    `json:"taskSQL,omitempty"`
	TaskType           *string    `json:"taskType,omitempty"`
	TaskUrl            *string    `json:"taskUrl,omitempty"`
}

// NewTask instantiates a new Task object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTask(name string) *Task {
	this := Task{}
	this.Name = name
	return &this
}

// NewTaskWithDefaults instantiates a new Task object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTaskWithDefaults() *Task {
	this := Task{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *Task) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *Task) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *Task) SetDescription(v string) {
	o.Description = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *Task) GetDisplayName() string {
	if o == nil || o.DisplayName == nil {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetDisplayNameOk() (*string, bool) {
	if o == nil || o.DisplayName == nil {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *Task) HasDisplayName() bool {
	if o != nil && o.DisplayName != nil {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *Task) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetDownstreamTasks returns the DownstreamTasks field value if set, zero value otherwise.
func (o *Task) GetDownstreamTasks() []string {
	if o == nil || o.DownstreamTasks == nil {
		var ret []string
		return ret
	}
	return o.DownstreamTasks
}

// GetDownstreamTasksOk returns a tuple with the DownstreamTasks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetDownstreamTasksOk() ([]string, bool) {
	if o == nil || o.DownstreamTasks == nil {
		return nil, false
	}
	return o.DownstreamTasks, true
}

// HasDownstreamTasks returns a boolean if a field has been set.
func (o *Task) HasDownstreamTasks() bool {
	if o != nil && o.DownstreamTasks != nil {
		return true
	}

	return false
}

// SetDownstreamTasks gets a reference to the given []string and assigns it to the DownstreamTasks field.
func (o *Task) SetDownstreamTasks(v []string) {
	o.DownstreamTasks = v
}

// GetEndDate returns the EndDate field value if set, zero value otherwise.
func (o *Task) GetEndDate() string {
	if o == nil || o.EndDate == nil {
		var ret string
		return ret
	}
	return *o.EndDate
}

// GetEndDateOk returns a tuple with the EndDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetEndDateOk() (*string, bool) {
	if o == nil || o.EndDate == nil {
		return nil, false
	}
	return o.EndDate, true
}

// HasEndDate returns a boolean if a field has been set.
func (o *Task) HasEndDate() bool {
	if o != nil && o.EndDate != nil {
		return true
	}

	return false
}

// SetEndDate gets a reference to the given string and assigns it to the EndDate field.
func (o *Task) SetEndDate(v string) {
	o.EndDate = &v
}

// GetFullyQualifiedName returns the FullyQualifiedName field value if set, zero value otherwise.
func (o *Task) GetFullyQualifiedName() string {
	if o == nil || o.FullyQualifiedName == nil {
		var ret string
		return ret
	}
	return *o.FullyQualifiedName
}

// GetFullyQualifiedNameOk returns a tuple with the FullyQualifiedName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetFullyQualifiedNameOk() (*string, bool) {
	if o == nil || o.FullyQualifiedName == nil {
		return nil, false
	}
	return o.FullyQualifiedName, true
}

// HasFullyQualifiedName returns a boolean if a field has been set.
func (o *Task) HasFullyQualifiedName() bool {
	if o != nil && o.FullyQualifiedName != nil {
		return true
	}

	return false
}

// SetFullyQualifiedName gets a reference to the given string and assigns it to the FullyQualifiedName field.
func (o *Task) SetFullyQualifiedName(v string) {
	o.FullyQualifiedName = &v
}

// GetName returns the Name field value
func (o *Task) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Task) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Task) SetName(v string) {
	o.Name = v
}

// GetStartDate returns the StartDate field value if set, zero value otherwise.
func (o *Task) GetStartDate() string {
	if o == nil || o.StartDate == nil {
		var ret string
		return ret
	}
	return *o.StartDate
}

// GetStartDateOk returns a tuple with the StartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetStartDateOk() (*string, bool) {
	if o == nil || o.StartDate == nil {
		return nil, false
	}
	return o.StartDate, true
}

// HasStartDate returns a boolean if a field has been set.
func (o *Task) HasStartDate() bool {
	if o != nil && o.StartDate != nil {
		return true
	}

	return false
}

// SetStartDate gets a reference to the given string and assigns it to the StartDate field.
func (o *Task) SetStartDate(v string) {
	o.StartDate = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *Task) GetTags() []TagLabel {
	if o == nil || o.Tags == nil {
		var ret []TagLabel
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetTagsOk() ([]TagLabel, bool) {
	if o == nil || o.Tags == nil {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *Task) HasTags() bool {
	if o != nil && o.Tags != nil {
		return true
	}

	return false
}

// SetTags gets a reference to the given []TagLabel and assigns it to the Tags field.
func (o *Task) SetTags(v []TagLabel) {
	o.Tags = v
}

// GetTaskSQL returns the TaskSQL field value if set, zero value otherwise.
func (o *Task) GetTaskSQL() string {
	if o == nil || o.TaskSQL == nil {
		var ret string
		return ret
	}
	return *o.TaskSQL
}

// GetTaskSQLOk returns a tuple with the TaskSQL field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetTaskSQLOk() (*string, bool) {
	if o == nil || o.TaskSQL == nil {
		return nil, false
	}
	return o.TaskSQL, true
}

// HasTaskSQL returns a boolean if a field has been set.
func (o *Task) HasTaskSQL() bool {
	if o != nil && o.TaskSQL != nil {
		return true
	}

	return false
}

// SetTaskSQL gets a reference to the given string and assigns it to the TaskSQL field.
func (o *Task) SetTaskSQL(v string) {
	o.TaskSQL = &v
}

// GetTaskType returns the TaskType field value if set, zero value otherwise.
func (o *Task) GetTaskType() string {
	if o == nil || o.TaskType == nil {
		var ret string
		return ret
	}
	return *o.TaskType
}

// GetTaskTypeOk returns a tuple with the TaskType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetTaskTypeOk() (*string, bool) {
	if o == nil || o.TaskType == nil {
		return nil, false
	}
	return o.TaskType, true
}

// HasTaskType returns a boolean if a field has been set.
func (o *Task) HasTaskType() bool {
	if o != nil && o.TaskType != nil {
		return true
	}

	return false
}

// SetTaskType gets a reference to the given string and assigns it to the TaskType field.
func (o *Task) SetTaskType(v string) {
	o.TaskType = &v
}

// GetTaskUrl returns the TaskUrl field value if set, zero value otherwise.
func (o *Task) GetTaskUrl() string {
	if o == nil || o.TaskUrl == nil {
		var ret string
		return ret
	}
	return *o.TaskUrl
}

// GetTaskUrlOk returns a tuple with the TaskUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetTaskUrlOk() (*string, bool) {
	if o == nil || o.TaskUrl == nil {
		return nil, false
	}
	return o.TaskUrl, true
}

// HasTaskUrl returns a boolean if a field has been set.
func (o *Task) HasTaskUrl() bool {
	if o != nil && o.TaskUrl != nil {
		return true
	}

	return false
}

// SetTaskUrl gets a reference to the given string and assigns it to the TaskUrl field.
func (o *Task) SetTaskUrl(v string) {
	o.TaskUrl = &v
}

func (o Task) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.DisplayName != nil {
		toSerialize["displayName"] = o.DisplayName
	}
	if o.DownstreamTasks != nil {
		toSerialize["downstreamTasks"] = o.DownstreamTasks
	}
	if o.EndDate != nil {
		toSerialize["endDate"] = o.EndDate
	}
	if o.FullyQualifiedName != nil {
		toSerialize["fullyQualifiedName"] = o.FullyQualifiedName
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if o.StartDate != nil {
		toSerialize["startDate"] = o.StartDate
	}
	if o.Tags != nil {
		toSerialize["tags"] = o.Tags
	}
	if o.TaskSQL != nil {
		toSerialize["taskSQL"] = o.TaskSQL
	}
	if o.TaskType != nil {
		toSerialize["taskType"] = o.TaskType
	}
	if o.TaskUrl != nil {
		toSerialize["taskUrl"] = o.TaskUrl
	}
	return json.Marshal(toSerialize)
}

type NullableTask struct {
	value *Task
	isSet bool
}

func (v NullableTask) Get() *Task {
	return v.value
}

func (v *NullableTask) Set(val *Task) {
	v.value = val
	v.isSet = true
}

func (v NullableTask) IsSet() bool {
	return v.isSet
}

func (v *NullableTask) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTask(val *Task) *NullableTask {
	return &NullableTask{value: val, isSet: true}
}

func (v NullableTask) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTask) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
