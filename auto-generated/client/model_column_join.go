/*
OpenMetadata Apis

# Overview  OpenMetadata supports REST APIs for getting metadata in and out of metadata store. The API resources are grouped under following categories: - **Data assets** - includes resources for data entities, such as `databases`, `tables`, and `topics`. Resources for data assets created from data, such as `dashboards`, `reports`, `metrics`, and `ML Features` are part of this collection. `pipelines`, `notebooks`, etc. that are used for creating data assets are also available as resources as of this collection. - **Teams and Users** - includes `users`, `teams`, a special type of user called `bots` that performs many automated tasks such as ingestion. - **Services** - are services that OpenMetadata integrates with. Currently `databaseService` is the only service under this collection that represents data sources. In the future, services related to Dashboards, Reports, ETL pipelines will be added under this collection. - **Glossary** - OpenMetadata supports hierarchical tags that can be used to build business vocabulary to describe and classify data available under `tags` resource.

API version: 0.11.0
Contact: openmetadata-dev@googlegroups.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ColumnJoin struct for ColumnJoin
type ColumnJoin struct {
	ColumnName *string      `json:"columnName,omitempty"`
	JoinedWith []JoinedWith `json:"joinedWith,omitempty"`
}

// NewColumnJoin instantiates a new ColumnJoin object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewColumnJoin() *ColumnJoin {
	this := ColumnJoin{}
	return &this
}

// NewColumnJoinWithDefaults instantiates a new ColumnJoin object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewColumnJoinWithDefaults() *ColumnJoin {
	this := ColumnJoin{}
	return &this
}

// GetColumnName returns the ColumnName field value if set, zero value otherwise.
func (o *ColumnJoin) GetColumnName() string {
	if o == nil || o.ColumnName == nil {
		var ret string
		return ret
	}
	return *o.ColumnName
}

// GetColumnNameOk returns a tuple with the ColumnName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ColumnJoin) GetColumnNameOk() (*string, bool) {
	if o == nil || o.ColumnName == nil {
		return nil, false
	}
	return o.ColumnName, true
}

// HasColumnName returns a boolean if a field has been set.
func (o *ColumnJoin) HasColumnName() bool {
	if o != nil && o.ColumnName != nil {
		return true
	}

	return false
}

// SetColumnName gets a reference to the given string and assigns it to the ColumnName field.
func (o *ColumnJoin) SetColumnName(v string) {
	o.ColumnName = &v
}

// GetJoinedWith returns the JoinedWith field value if set, zero value otherwise.
func (o *ColumnJoin) GetJoinedWith() []JoinedWith {
	if o == nil || o.JoinedWith == nil {
		var ret []JoinedWith
		return ret
	}
	return o.JoinedWith
}

// GetJoinedWithOk returns a tuple with the JoinedWith field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ColumnJoin) GetJoinedWithOk() ([]JoinedWith, bool) {
	if o == nil || o.JoinedWith == nil {
		return nil, false
	}
	return o.JoinedWith, true
}

// HasJoinedWith returns a boolean if a field has been set.
func (o *ColumnJoin) HasJoinedWith() bool {
	if o != nil && o.JoinedWith != nil {
		return true
	}

	return false
}

// SetJoinedWith gets a reference to the given []JoinedWith and assigns it to the JoinedWith field.
func (o *ColumnJoin) SetJoinedWith(v []JoinedWith) {
	o.JoinedWith = v
}

func (o ColumnJoin) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ColumnName != nil {
		toSerialize["columnName"] = o.ColumnName
	}
	if o.JoinedWith != nil {
		toSerialize["joinedWith"] = o.JoinedWith
	}
	return json.Marshal(toSerialize)
}

type NullableColumnJoin struct {
	value *ColumnJoin
	isSet bool
}

func (v NullableColumnJoin) Get() *ColumnJoin {
	return v.value
}

func (v *NullableColumnJoin) Set(val *ColumnJoin) {
	v.value = val
	v.isSet = true
}

func (v NullableColumnJoin) IsSet() bool {
	return v.isSet
}

func (v *NullableColumnJoin) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableColumnJoin(val *ColumnJoin) *NullableColumnJoin {
	return &NullableColumnJoin{value: val, isSet: true}
}

func (v NullableColumnJoin) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableColumnJoin) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
