/*
OpenMetadata Apis

# Overview  OpenMetadata supports REST APIs for getting metadata in and out of metadata store. The API resources are grouped under following categories: - **Data assets** - includes resources for data entities, such as `databases`, `tables`, and `topics`. Resources for data assets created from data, such as `dashboards`, `reports`, `metrics`, and `ML Features` are part of this collection. `pipelines`, `notebooks`, etc. that are used for creating data assets are also available as resources as of this collection. - **Teams and Users** - includes `users`, `teams`, a special type of user called `bots` that performs many automated tasks such as ingestion. - **Services** - are services that OpenMetadata integrates with. Currently `databaseService` is the only service under this collection that represents data sources. In the future, services related to Dashboards, Reports, ETL pipelines will be added under this collection. - **Glossary** - OpenMetadata supports hierarchical tags that can be used to build business vocabulary to describe and classify data available under `tags` resource.

API version: 0.11.0
Contact: openmetadata-dev@googlegroups.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Suggest struct for Suggest
type Suggest struct {
	Fragment *bool `json:"fragment,omitempty"`
}

// NewSuggest instantiates a new Suggest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSuggest() *Suggest {
	this := Suggest{}
	return &this
}

// NewSuggestWithDefaults instantiates a new Suggest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSuggestWithDefaults() *Suggest {
	this := Suggest{}
	return &this
}

// GetFragment returns the Fragment field value if set, zero value otherwise.
func (o *Suggest) GetFragment() bool {
	if o == nil || o.Fragment == nil {
		var ret bool
		return ret
	}
	return *o.Fragment
}

// GetFragmentOk returns a tuple with the Fragment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Suggest) GetFragmentOk() (*bool, bool) {
	if o == nil || o.Fragment == nil {
		return nil, false
	}
	return o.Fragment, true
}

// HasFragment returns a boolean if a field has been set.
func (o *Suggest) HasFragment() bool {
	if o != nil && o.Fragment != nil {
		return true
	}

	return false
}

// SetFragment gets a reference to the given bool and assigns it to the Fragment field.
func (o *Suggest) SetFragment(v bool) {
	o.Fragment = &v
}

func (o Suggest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Fragment != nil {
		toSerialize["fragment"] = o.Fragment
	}
	return json.Marshal(toSerialize)
}

type NullableSuggest struct {
	value *Suggest
	isSet bool
}

func (v NullableSuggest) Get() *Suggest {
	return v.value
}

func (v *NullableSuggest) Set(val *Suggest) {
	v.value = val
	v.isSet = true
}

func (v NullableSuggest) IsSet() bool {
	return v.isSet
}

func (v *NullableSuggest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSuggest(val *Suggest) *NullableSuggest {
	return &NullableSuggest{value: val, isSet: true}
}

func (v NullableSuggest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSuggest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
