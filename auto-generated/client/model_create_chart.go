/*
OpenMetadata Apis

# Overview  OpenMetadata supports REST APIs for getting metadata in and out of metadata store. The API resources are grouped under following categories: - **Data assets** - includes resources for data entities, such as `databases`, `tables`, and `topics`. Resources for data assets created from data, such as `dashboards`, `reports`, `metrics`, and `ML Features` are part of this collection. `pipelines`, `notebooks`, etc. that are used for creating data assets are also available as resources as of this collection. - **Teams and Users** - includes `users`, `teams`, a special type of user called `bots` that performs many automated tasks such as ingestion. - **Services** - are services that OpenMetadata integrates with. Currently `databaseService` is the only service under this collection that represents data sources. In the future, services related to Dashboards, Reports, ETL pipelines will be added under this collection. - **Glossary** - OpenMetadata supports hierarchical tags that can be used to build business vocabulary to describe and classify data available under `tags` resource.

API version: 0.11.0
Contact: openmetadata-dev@googlegroups.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// CreateChart struct for CreateChart
type CreateChart struct {
	ChartType   *string                `json:"chartType,omitempty"`
	ChartUrl    *string                `json:"chartUrl,omitempty"`
	Description *string                `json:"description,omitempty"`
	DisplayName *string                `json:"displayName,omitempty"`
	Extension   map[string]interface{} `json:"extension,omitempty"`
	Name        string                 `json:"name"`
	Owner       *EntityReference       `json:"owner,omitempty"`
	Service     EntityReference        `json:"service"`
	Tables      []EntityReference      `json:"tables,omitempty"`
	Tags        []TagLabel             `json:"tags,omitempty"`
}

// NewCreateChart instantiates a new CreateChart object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateChart(name string, service EntityReference) *CreateChart {
	this := CreateChart{}
	this.Name = name
	this.Service = service
	return &this
}

// NewCreateChartWithDefaults instantiates a new CreateChart object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateChartWithDefaults() *CreateChart {
	this := CreateChart{}
	return &this
}

// GetChartType returns the ChartType field value if set, zero value otherwise.
func (o *CreateChart) GetChartType() string {
	if o == nil || o.ChartType == nil {
		var ret string
		return ret
	}
	return *o.ChartType
}

// GetChartTypeOk returns a tuple with the ChartType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateChart) GetChartTypeOk() (*string, bool) {
	if o == nil || o.ChartType == nil {
		return nil, false
	}
	return o.ChartType, true
}

// HasChartType returns a boolean if a field has been set.
func (o *CreateChart) HasChartType() bool {
	if o != nil && o.ChartType != nil {
		return true
	}

	return false
}

// SetChartType gets a reference to the given string and assigns it to the ChartType field.
func (o *CreateChart) SetChartType(v string) {
	o.ChartType = &v
}

// GetChartUrl returns the ChartUrl field value if set, zero value otherwise.
func (o *CreateChart) GetChartUrl() string {
	if o == nil || o.ChartUrl == nil {
		var ret string
		return ret
	}
	return *o.ChartUrl
}

// GetChartUrlOk returns a tuple with the ChartUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateChart) GetChartUrlOk() (*string, bool) {
	if o == nil || o.ChartUrl == nil {
		return nil, false
	}
	return o.ChartUrl, true
}

// HasChartUrl returns a boolean if a field has been set.
func (o *CreateChart) HasChartUrl() bool {
	if o != nil && o.ChartUrl != nil {
		return true
	}

	return false
}

// SetChartUrl gets a reference to the given string and assigns it to the ChartUrl field.
func (o *CreateChart) SetChartUrl(v string) {
	o.ChartUrl = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *CreateChart) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateChart) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *CreateChart) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *CreateChart) SetDescription(v string) {
	o.Description = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *CreateChart) GetDisplayName() string {
	if o == nil || o.DisplayName == nil {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateChart) GetDisplayNameOk() (*string, bool) {
	if o == nil || o.DisplayName == nil {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *CreateChart) HasDisplayName() bool {
	if o != nil && o.DisplayName != nil {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *CreateChart) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetExtension returns the Extension field value if set, zero value otherwise.
func (o *CreateChart) GetExtension() map[string]interface{} {
	if o == nil || o.Extension == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateChart) GetExtensionOk() (map[string]interface{}, bool) {
	if o == nil || o.Extension == nil {
		return nil, false
	}
	return o.Extension, true
}

// HasExtension returns a boolean if a field has been set.
func (o *CreateChart) HasExtension() bool {
	if o != nil && o.Extension != nil {
		return true
	}

	return false
}

// SetExtension gets a reference to the given map[string]interface{} and assigns it to the Extension field.
func (o *CreateChart) SetExtension(v map[string]interface{}) {
	o.Extension = v
}

// GetName returns the Name field value
func (o *CreateChart) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CreateChart) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *CreateChart) SetName(v string) {
	o.Name = v
}

// GetOwner returns the Owner field value if set, zero value otherwise.
func (o *CreateChart) GetOwner() EntityReference {
	if o == nil || o.Owner == nil {
		var ret EntityReference
		return ret
	}
	return *o.Owner
}

// GetOwnerOk returns a tuple with the Owner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateChart) GetOwnerOk() (*EntityReference, bool) {
	if o == nil || o.Owner == nil {
		return nil, false
	}
	return o.Owner, true
}

// HasOwner returns a boolean if a field has been set.
func (o *CreateChart) HasOwner() bool {
	if o != nil && o.Owner != nil {
		return true
	}

	return false
}

// SetOwner gets a reference to the given EntityReference and assigns it to the Owner field.
func (o *CreateChart) SetOwner(v EntityReference) {
	o.Owner = &v
}

// GetService returns the Service field value
func (o *CreateChart) GetService() EntityReference {
	if o == nil {
		var ret EntityReference
		return ret
	}

	return o.Service
}

// GetServiceOk returns a tuple with the Service field value
// and a boolean to check if the value has been set.
func (o *CreateChart) GetServiceOk() (*EntityReference, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Service, true
}

// SetService sets field value
func (o *CreateChart) SetService(v EntityReference) {
	o.Service = v
}

// GetTables returns the Tables field value if set, zero value otherwise.
func (o *CreateChart) GetTables() []EntityReference {
	if o == nil || o.Tables == nil {
		var ret []EntityReference
		return ret
	}
	return o.Tables
}

// GetTablesOk returns a tuple with the Tables field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateChart) GetTablesOk() ([]EntityReference, bool) {
	if o == nil || o.Tables == nil {
		return nil, false
	}
	return o.Tables, true
}

// HasTables returns a boolean if a field has been set.
func (o *CreateChart) HasTables() bool {
	if o != nil && o.Tables != nil {
		return true
	}

	return false
}

// SetTables gets a reference to the given []EntityReference and assigns it to the Tables field.
func (o *CreateChart) SetTables(v []EntityReference) {
	o.Tables = v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *CreateChart) GetTags() []TagLabel {
	if o == nil || o.Tags == nil {
		var ret []TagLabel
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateChart) GetTagsOk() ([]TagLabel, bool) {
	if o == nil || o.Tags == nil {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *CreateChart) HasTags() bool {
	if o != nil && o.Tags != nil {
		return true
	}

	return false
}

// SetTags gets a reference to the given []TagLabel and assigns it to the Tags field.
func (o *CreateChart) SetTags(v []TagLabel) {
	o.Tags = v
}

func (o CreateChart) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ChartType != nil {
		toSerialize["chartType"] = o.ChartType
	}
	if o.ChartUrl != nil {
		toSerialize["chartUrl"] = o.ChartUrl
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.DisplayName != nil {
		toSerialize["displayName"] = o.DisplayName
	}
	if o.Extension != nil {
		toSerialize["extension"] = o.Extension
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if o.Owner != nil {
		toSerialize["owner"] = o.Owner
	}
	if true {
		toSerialize["service"] = o.Service
	}
	if o.Tables != nil {
		toSerialize["tables"] = o.Tables
	}
	if o.Tags != nil {
		toSerialize["tags"] = o.Tags
	}
	return json.Marshal(toSerialize)
}

type NullableCreateChart struct {
	value *CreateChart
	isSet bool
}

func (v NullableCreateChart) Get() *CreateChart {
	return v.value
}

func (v *NullableCreateChart) Set(val *CreateChart) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateChart) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateChart) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateChart(val *CreateChart) *NullableCreateChart {
	return &NullableCreateChart{value: val, isSet: true}
}

func (v NullableCreateChart) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateChart) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
