/*
OpenMetadata Apis

# Overview  OpenMetadata supports REST APIs for getting metadata in and out of metadata store. The API resources are grouped under following categories: - **Data assets** - includes resources for data entities, such as `databases`, `tables`, and `topics`. Resources for data assets created from data, such as `dashboards`, `reports`, `metrics`, and `ML Features` are part of this collection. `pipelines`, `notebooks`, etc. that are used for creating data assets are also available as resources as of this collection. - **Teams and Users** - includes `users`, `teams`, a special type of user called `bots` that performs many automated tasks such as ingestion. - **Services** - are services that OpenMetadata integrates with. Currently `databaseService` is the only service under this collection that represents data sources. In the future, services related to Dashboards, Reports, ETL pipelines will be added under this collection. - **Glossary** - OpenMetadata supports hierarchical tags that can be used to build business vocabulary to describe and classify data available under `tags` resource.

API version: 0.11.0
Contact: openmetadata-dev@googlegroups.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ChangeDescription struct for ChangeDescription
type ChangeDescription struct {
	FieldsAdded     []FieldChange `json:"fieldsAdded,omitempty"`
	FieldsDeleted   []FieldChange `json:"fieldsDeleted,omitempty"`
	FieldsUpdated   []FieldChange `json:"fieldsUpdated,omitempty"`
	PreviousVersion *float64      `json:"previousVersion,omitempty"`
}

// NewChangeDescription instantiates a new ChangeDescription object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChangeDescription() *ChangeDescription {
	this := ChangeDescription{}
	return &this
}

// NewChangeDescriptionWithDefaults instantiates a new ChangeDescription object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChangeDescriptionWithDefaults() *ChangeDescription {
	this := ChangeDescription{}
	return &this
}

// GetFieldsAdded returns the FieldsAdded field value if set, zero value otherwise.
func (o *ChangeDescription) GetFieldsAdded() []FieldChange {
	if o == nil || o.FieldsAdded == nil {
		var ret []FieldChange
		return ret
	}
	return o.FieldsAdded
}

// GetFieldsAddedOk returns a tuple with the FieldsAdded field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChangeDescription) GetFieldsAddedOk() ([]FieldChange, bool) {
	if o == nil || o.FieldsAdded == nil {
		return nil, false
	}
	return o.FieldsAdded, true
}

// HasFieldsAdded returns a boolean if a field has been set.
func (o *ChangeDescription) HasFieldsAdded() bool {
	if o != nil && o.FieldsAdded != nil {
		return true
	}

	return false
}

// SetFieldsAdded gets a reference to the given []FieldChange and assigns it to the FieldsAdded field.
func (o *ChangeDescription) SetFieldsAdded(v []FieldChange) {
	o.FieldsAdded = v
}

// GetFieldsDeleted returns the FieldsDeleted field value if set, zero value otherwise.
func (o *ChangeDescription) GetFieldsDeleted() []FieldChange {
	if o == nil || o.FieldsDeleted == nil {
		var ret []FieldChange
		return ret
	}
	return o.FieldsDeleted
}

// GetFieldsDeletedOk returns a tuple with the FieldsDeleted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChangeDescription) GetFieldsDeletedOk() ([]FieldChange, bool) {
	if o == nil || o.FieldsDeleted == nil {
		return nil, false
	}
	return o.FieldsDeleted, true
}

// HasFieldsDeleted returns a boolean if a field has been set.
func (o *ChangeDescription) HasFieldsDeleted() bool {
	if o != nil && o.FieldsDeleted != nil {
		return true
	}

	return false
}

// SetFieldsDeleted gets a reference to the given []FieldChange and assigns it to the FieldsDeleted field.
func (o *ChangeDescription) SetFieldsDeleted(v []FieldChange) {
	o.FieldsDeleted = v
}

// GetFieldsUpdated returns the FieldsUpdated field value if set, zero value otherwise.
func (o *ChangeDescription) GetFieldsUpdated() []FieldChange {
	if o == nil || o.FieldsUpdated == nil {
		var ret []FieldChange
		return ret
	}
	return o.FieldsUpdated
}

// GetFieldsUpdatedOk returns a tuple with the FieldsUpdated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChangeDescription) GetFieldsUpdatedOk() ([]FieldChange, bool) {
	if o == nil || o.FieldsUpdated == nil {
		return nil, false
	}
	return o.FieldsUpdated, true
}

// HasFieldsUpdated returns a boolean if a field has been set.
func (o *ChangeDescription) HasFieldsUpdated() bool {
	if o != nil && o.FieldsUpdated != nil {
		return true
	}

	return false
}

// SetFieldsUpdated gets a reference to the given []FieldChange and assigns it to the FieldsUpdated field.
func (o *ChangeDescription) SetFieldsUpdated(v []FieldChange) {
	o.FieldsUpdated = v
}

// GetPreviousVersion returns the PreviousVersion field value if set, zero value otherwise.
func (o *ChangeDescription) GetPreviousVersion() float64 {
	if o == nil || o.PreviousVersion == nil {
		var ret float64
		return ret
	}
	return *o.PreviousVersion
}

// GetPreviousVersionOk returns a tuple with the PreviousVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChangeDescription) GetPreviousVersionOk() (*float64, bool) {
	if o == nil || o.PreviousVersion == nil {
		return nil, false
	}
	return o.PreviousVersion, true
}

// HasPreviousVersion returns a boolean if a field has been set.
func (o *ChangeDescription) HasPreviousVersion() bool {
	if o != nil && o.PreviousVersion != nil {
		return true
	}

	return false
}

// SetPreviousVersion gets a reference to the given float64 and assigns it to the PreviousVersion field.
func (o *ChangeDescription) SetPreviousVersion(v float64) {
	o.PreviousVersion = &v
}

func (o ChangeDescription) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.FieldsAdded != nil {
		toSerialize["fieldsAdded"] = o.FieldsAdded
	}
	if o.FieldsDeleted != nil {
		toSerialize["fieldsDeleted"] = o.FieldsDeleted
	}
	if o.FieldsUpdated != nil {
		toSerialize["fieldsUpdated"] = o.FieldsUpdated
	}
	if o.PreviousVersion != nil {
		toSerialize["previousVersion"] = o.PreviousVersion
	}
	return json.Marshal(toSerialize)
}

type NullableChangeDescription struct {
	value *ChangeDescription
	isSet bool
}

func (v NullableChangeDescription) Get() *ChangeDescription {
	return v.value
}

func (v *NullableChangeDescription) Set(val *ChangeDescription) {
	v.value = val
	v.isSet = true
}

func (v NullableChangeDescription) IsSet() bool {
	return v.isSet
}

func (v *NullableChangeDescription) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChangeDescription(val *ChangeDescription) *NullableChangeDescription {
	return &NullableChangeDescription{value: val, isSet: true}
}

func (v NullableChangeDescription) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChangeDescription) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
