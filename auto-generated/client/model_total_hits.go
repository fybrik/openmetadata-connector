/*
OpenMetadata Apis

# Overview  OpenMetadata supports REST APIs for getting metadata in and out of metadata store. The API resources are grouped under following categories: - **Data assets** - includes resources for data entities, such as `databases`, `tables`, and `topics`. Resources for data assets created from data, such as `dashboards`, `reports`, `metrics`, and `ML Features` are part of this collection. `pipelines`, `notebooks`, etc. that are used for creating data assets are also available as resources as of this collection. - **Teams and Users** - includes `users`, `teams`, a special type of user called `bots` that performs many automated tasks such as ingestion. - **Services** - are services that OpenMetadata integrates with. Currently `databaseService` is the only service under this collection that represents data sources. In the future, services related to Dashboards, Reports, ETL pipelines will be added under this collection. - **Glossary** - OpenMetadata supports hierarchical tags that can be used to build business vocabulary to describe and classify data available under `tags` resource.

API version: 0.11.0
Contact: openmetadata-dev@googlegroups.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// TotalHits struct for TotalHits
type TotalHits struct {
	Relation *string `json:"relation,omitempty"`
	Value    *int64  `json:"value,omitempty"`
}

// NewTotalHits instantiates a new TotalHits object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTotalHits() *TotalHits {
	this := TotalHits{}
	return &this
}

// NewTotalHitsWithDefaults instantiates a new TotalHits object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTotalHitsWithDefaults() *TotalHits {
	this := TotalHits{}
	return &this
}

// GetRelation returns the Relation field value if set, zero value otherwise.
func (o *TotalHits) GetRelation() string {
	if o == nil || o.Relation == nil {
		var ret string
		return ret
	}
	return *o.Relation
}

// GetRelationOk returns a tuple with the Relation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TotalHits) GetRelationOk() (*string, bool) {
	if o == nil || o.Relation == nil {
		return nil, false
	}
	return o.Relation, true
}

// HasRelation returns a boolean if a field has been set.
func (o *TotalHits) HasRelation() bool {
	if o != nil && o.Relation != nil {
		return true
	}

	return false
}

// SetRelation gets a reference to the given string and assigns it to the Relation field.
func (o *TotalHits) SetRelation(v string) {
	o.Relation = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *TotalHits) GetValue() int64 {
	if o == nil || o.Value == nil {
		var ret int64
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TotalHits) GetValueOk() (*int64, bool) {
	if o == nil || o.Value == nil {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *TotalHits) HasValue() bool {
	if o != nil && o.Value != nil {
		return true
	}

	return false
}

// SetValue gets a reference to the given int64 and assigns it to the Value field.
func (o *TotalHits) SetValue(v int64) {
	o.Value = &v
}

func (o TotalHits) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Relation != nil {
		toSerialize["relation"] = o.Relation
	}
	if o.Value != nil {
		toSerialize["value"] = o.Value
	}
	return json.Marshal(toSerialize)
}

type NullableTotalHits struct {
	value *TotalHits
	isSet bool
}

func (v NullableTotalHits) Get() *TotalHits {
	return v.value
}

func (v *NullableTotalHits) Set(val *TotalHits) {
	v.value = val
	v.isSet = true
}

func (v NullableTotalHits) IsSet() bool {
	return v.isSet
}

func (v *NullableTotalHits) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTotalHits(val *TotalHits) *NullableTotalHits {
	return &NullableTotalHits{value: val, isSet: true}
}

func (v NullableTotalHits) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTotalHits) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
