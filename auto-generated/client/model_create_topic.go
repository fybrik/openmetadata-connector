/*
OpenMetadata Apis

# Overview  OpenMetadata supports REST APIs for getting metadata in and out of metadata store. The API resources are grouped under following categories: - **Data assets** - includes resources for data entities, such as `databases`, `tables`, and `topics`. Resources for data assets created from data, such as `dashboards`, `reports`, `metrics`, and `ML Features` are part of this collection. `pipelines`, `notebooks`, etc. that are used for creating data assets are also available as resources as of this collection. - **Teams and Users** - includes `users`, `teams`, a special type of user called `bots` that performs many automated tasks such as ingestion. - **Services** - are services that OpenMetadata integrates with. Currently `databaseService` is the only service under this collection that represents data sources. In the future, services related to Dashboards, Reports, ETL pipelines will be added under this collection. - **Glossary** - OpenMetadata supports hierarchical tags that can be used to build business vocabulary to describe and classify data available under `tags` resource.

API version: 0.11.0
Contact: openmetadata-dev@googlegroups.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// CreateTopic struct for CreateTopic
type CreateTopic struct {
	CleanupPolicies       []string               `json:"cleanupPolicies,omitempty"`
	Description           *string                `json:"description,omitempty"`
	DisplayName           *string                `json:"displayName,omitempty"`
	Extension             map[string]interface{} `json:"extension,omitempty"`
	MaximumMessageSize    *int32                 `json:"maximumMessageSize,omitempty"`
	MinimumInSyncReplicas *int32                 `json:"minimumInSyncReplicas,omitempty"`
	Name                  string                 `json:"name"`
	Owner                 *EntityReference       `json:"owner,omitempty"`
	Partitions            int32                  `json:"partitions"`
	ReplicationFactor     *int32                 `json:"replicationFactor,omitempty"`
	RetentionSize         *float64               `json:"retentionSize,omitempty"`
	RetentionTime         *float64               `json:"retentionTime,omitempty"`
	SchemaText            *string                `json:"schemaText,omitempty"`
	SchemaType            *string                `json:"schemaType,omitempty"`
	Service               EntityReference        `json:"service"`
	Tags                  []TagLabel             `json:"tags,omitempty"`
	TopicConfig           map[string]interface{} `json:"topicConfig,omitempty"`
}

// NewCreateTopic instantiates a new CreateTopic object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateTopic(name string, partitions int32, service EntityReference) *CreateTopic {
	this := CreateTopic{}
	this.Name = name
	this.Partitions = partitions
	this.Service = service
	return &this
}

// NewCreateTopicWithDefaults instantiates a new CreateTopic object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateTopicWithDefaults() *CreateTopic {
	this := CreateTopic{}
	return &this
}

// GetCleanupPolicies returns the CleanupPolicies field value if set, zero value otherwise.
func (o *CreateTopic) GetCleanupPolicies() []string {
	if o == nil || o.CleanupPolicies == nil {
		var ret []string
		return ret
	}
	return o.CleanupPolicies
}

// GetCleanupPoliciesOk returns a tuple with the CleanupPolicies field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateTopic) GetCleanupPoliciesOk() ([]string, bool) {
	if o == nil || o.CleanupPolicies == nil {
		return nil, false
	}
	return o.CleanupPolicies, true
}

// HasCleanupPolicies returns a boolean if a field has been set.
func (o *CreateTopic) HasCleanupPolicies() bool {
	if o != nil && o.CleanupPolicies != nil {
		return true
	}

	return false
}

// SetCleanupPolicies gets a reference to the given []string and assigns it to the CleanupPolicies field.
func (o *CreateTopic) SetCleanupPolicies(v []string) {
	o.CleanupPolicies = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *CreateTopic) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateTopic) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *CreateTopic) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *CreateTopic) SetDescription(v string) {
	o.Description = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *CreateTopic) GetDisplayName() string {
	if o == nil || o.DisplayName == nil {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateTopic) GetDisplayNameOk() (*string, bool) {
	if o == nil || o.DisplayName == nil {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *CreateTopic) HasDisplayName() bool {
	if o != nil && o.DisplayName != nil {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *CreateTopic) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetExtension returns the Extension field value if set, zero value otherwise.
func (o *CreateTopic) GetExtension() map[string]interface{} {
	if o == nil || o.Extension == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateTopic) GetExtensionOk() (map[string]interface{}, bool) {
	if o == nil || o.Extension == nil {
		return nil, false
	}
	return o.Extension, true
}

// HasExtension returns a boolean if a field has been set.
func (o *CreateTopic) HasExtension() bool {
	if o != nil && o.Extension != nil {
		return true
	}

	return false
}

// SetExtension gets a reference to the given map[string]interface{} and assigns it to the Extension field.
func (o *CreateTopic) SetExtension(v map[string]interface{}) {
	o.Extension = v
}

// GetMaximumMessageSize returns the MaximumMessageSize field value if set, zero value otherwise.
func (o *CreateTopic) GetMaximumMessageSize() int32 {
	if o == nil || o.MaximumMessageSize == nil {
		var ret int32
		return ret
	}
	return *o.MaximumMessageSize
}

// GetMaximumMessageSizeOk returns a tuple with the MaximumMessageSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateTopic) GetMaximumMessageSizeOk() (*int32, bool) {
	if o == nil || o.MaximumMessageSize == nil {
		return nil, false
	}
	return o.MaximumMessageSize, true
}

// HasMaximumMessageSize returns a boolean if a field has been set.
func (o *CreateTopic) HasMaximumMessageSize() bool {
	if o != nil && o.MaximumMessageSize != nil {
		return true
	}

	return false
}

// SetMaximumMessageSize gets a reference to the given int32 and assigns it to the MaximumMessageSize field.
func (o *CreateTopic) SetMaximumMessageSize(v int32) {
	o.MaximumMessageSize = &v
}

// GetMinimumInSyncReplicas returns the MinimumInSyncReplicas field value if set, zero value otherwise.
func (o *CreateTopic) GetMinimumInSyncReplicas() int32 {
	if o == nil || o.MinimumInSyncReplicas == nil {
		var ret int32
		return ret
	}
	return *o.MinimumInSyncReplicas
}

// GetMinimumInSyncReplicasOk returns a tuple with the MinimumInSyncReplicas field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateTopic) GetMinimumInSyncReplicasOk() (*int32, bool) {
	if o == nil || o.MinimumInSyncReplicas == nil {
		return nil, false
	}
	return o.MinimumInSyncReplicas, true
}

// HasMinimumInSyncReplicas returns a boolean if a field has been set.
func (o *CreateTopic) HasMinimumInSyncReplicas() bool {
	if o != nil && o.MinimumInSyncReplicas != nil {
		return true
	}

	return false
}

// SetMinimumInSyncReplicas gets a reference to the given int32 and assigns it to the MinimumInSyncReplicas field.
func (o *CreateTopic) SetMinimumInSyncReplicas(v int32) {
	o.MinimumInSyncReplicas = &v
}

// GetName returns the Name field value
func (o *CreateTopic) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CreateTopic) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *CreateTopic) SetName(v string) {
	o.Name = v
}

// GetOwner returns the Owner field value if set, zero value otherwise.
func (o *CreateTopic) GetOwner() EntityReference {
	if o == nil || o.Owner == nil {
		var ret EntityReference
		return ret
	}
	return *o.Owner
}

// GetOwnerOk returns a tuple with the Owner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateTopic) GetOwnerOk() (*EntityReference, bool) {
	if o == nil || o.Owner == nil {
		return nil, false
	}
	return o.Owner, true
}

// HasOwner returns a boolean if a field has been set.
func (o *CreateTopic) HasOwner() bool {
	if o != nil && o.Owner != nil {
		return true
	}

	return false
}

// SetOwner gets a reference to the given EntityReference and assigns it to the Owner field.
func (o *CreateTopic) SetOwner(v EntityReference) {
	o.Owner = &v
}

// GetPartitions returns the Partitions field value
func (o *CreateTopic) GetPartitions() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Partitions
}

// GetPartitionsOk returns a tuple with the Partitions field value
// and a boolean to check if the value has been set.
func (o *CreateTopic) GetPartitionsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Partitions, true
}

// SetPartitions sets field value
func (o *CreateTopic) SetPartitions(v int32) {
	o.Partitions = v
}

// GetReplicationFactor returns the ReplicationFactor field value if set, zero value otherwise.
func (o *CreateTopic) GetReplicationFactor() int32 {
	if o == nil || o.ReplicationFactor == nil {
		var ret int32
		return ret
	}
	return *o.ReplicationFactor
}

// GetReplicationFactorOk returns a tuple with the ReplicationFactor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateTopic) GetReplicationFactorOk() (*int32, bool) {
	if o == nil || o.ReplicationFactor == nil {
		return nil, false
	}
	return o.ReplicationFactor, true
}

// HasReplicationFactor returns a boolean if a field has been set.
func (o *CreateTopic) HasReplicationFactor() bool {
	if o != nil && o.ReplicationFactor != nil {
		return true
	}

	return false
}

// SetReplicationFactor gets a reference to the given int32 and assigns it to the ReplicationFactor field.
func (o *CreateTopic) SetReplicationFactor(v int32) {
	o.ReplicationFactor = &v
}

// GetRetentionSize returns the RetentionSize field value if set, zero value otherwise.
func (o *CreateTopic) GetRetentionSize() float64 {
	if o == nil || o.RetentionSize == nil {
		var ret float64
		return ret
	}
	return *o.RetentionSize
}

// GetRetentionSizeOk returns a tuple with the RetentionSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateTopic) GetRetentionSizeOk() (*float64, bool) {
	if o == nil || o.RetentionSize == nil {
		return nil, false
	}
	return o.RetentionSize, true
}

// HasRetentionSize returns a boolean if a field has been set.
func (o *CreateTopic) HasRetentionSize() bool {
	if o != nil && o.RetentionSize != nil {
		return true
	}

	return false
}

// SetRetentionSize gets a reference to the given float64 and assigns it to the RetentionSize field.
func (o *CreateTopic) SetRetentionSize(v float64) {
	o.RetentionSize = &v
}

// GetRetentionTime returns the RetentionTime field value if set, zero value otherwise.
func (o *CreateTopic) GetRetentionTime() float64 {
	if o == nil || o.RetentionTime == nil {
		var ret float64
		return ret
	}
	return *o.RetentionTime
}

// GetRetentionTimeOk returns a tuple with the RetentionTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateTopic) GetRetentionTimeOk() (*float64, bool) {
	if o == nil || o.RetentionTime == nil {
		return nil, false
	}
	return o.RetentionTime, true
}

// HasRetentionTime returns a boolean if a field has been set.
func (o *CreateTopic) HasRetentionTime() bool {
	if o != nil && o.RetentionTime != nil {
		return true
	}

	return false
}

// SetRetentionTime gets a reference to the given float64 and assigns it to the RetentionTime field.
func (o *CreateTopic) SetRetentionTime(v float64) {
	o.RetentionTime = &v
}

// GetSchemaText returns the SchemaText field value if set, zero value otherwise.
func (o *CreateTopic) GetSchemaText() string {
	if o == nil || o.SchemaText == nil {
		var ret string
		return ret
	}
	return *o.SchemaText
}

// GetSchemaTextOk returns a tuple with the SchemaText field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateTopic) GetSchemaTextOk() (*string, bool) {
	if o == nil || o.SchemaText == nil {
		return nil, false
	}
	return o.SchemaText, true
}

// HasSchemaText returns a boolean if a field has been set.
func (o *CreateTopic) HasSchemaText() bool {
	if o != nil && o.SchemaText != nil {
		return true
	}

	return false
}

// SetSchemaText gets a reference to the given string and assigns it to the SchemaText field.
func (o *CreateTopic) SetSchemaText(v string) {
	o.SchemaText = &v
}

// GetSchemaType returns the SchemaType field value if set, zero value otherwise.
func (o *CreateTopic) GetSchemaType() string {
	if o == nil || o.SchemaType == nil {
		var ret string
		return ret
	}
	return *o.SchemaType
}

// GetSchemaTypeOk returns a tuple with the SchemaType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateTopic) GetSchemaTypeOk() (*string, bool) {
	if o == nil || o.SchemaType == nil {
		return nil, false
	}
	return o.SchemaType, true
}

// HasSchemaType returns a boolean if a field has been set.
func (o *CreateTopic) HasSchemaType() bool {
	if o != nil && o.SchemaType != nil {
		return true
	}

	return false
}

// SetSchemaType gets a reference to the given string and assigns it to the SchemaType field.
func (o *CreateTopic) SetSchemaType(v string) {
	o.SchemaType = &v
}

// GetService returns the Service field value
func (o *CreateTopic) GetService() EntityReference {
	if o == nil {
		var ret EntityReference
		return ret
	}

	return o.Service
}

// GetServiceOk returns a tuple with the Service field value
// and a boolean to check if the value has been set.
func (o *CreateTopic) GetServiceOk() (*EntityReference, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Service, true
}

// SetService sets field value
func (o *CreateTopic) SetService(v EntityReference) {
	o.Service = v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *CreateTopic) GetTags() []TagLabel {
	if o == nil || o.Tags == nil {
		var ret []TagLabel
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateTopic) GetTagsOk() ([]TagLabel, bool) {
	if o == nil || o.Tags == nil {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *CreateTopic) HasTags() bool {
	if o != nil && o.Tags != nil {
		return true
	}

	return false
}

// SetTags gets a reference to the given []TagLabel and assigns it to the Tags field.
func (o *CreateTopic) SetTags(v []TagLabel) {
	o.Tags = v
}

// GetTopicConfig returns the TopicConfig field value if set, zero value otherwise.
func (o *CreateTopic) GetTopicConfig() map[string]interface{} {
	if o == nil || o.TopicConfig == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.TopicConfig
}

// GetTopicConfigOk returns a tuple with the TopicConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateTopic) GetTopicConfigOk() (map[string]interface{}, bool) {
	if o == nil || o.TopicConfig == nil {
		return nil, false
	}
	return o.TopicConfig, true
}

// HasTopicConfig returns a boolean if a field has been set.
func (o *CreateTopic) HasTopicConfig() bool {
	if o != nil && o.TopicConfig != nil {
		return true
	}

	return false
}

// SetTopicConfig gets a reference to the given map[string]interface{} and assigns it to the TopicConfig field.
func (o *CreateTopic) SetTopicConfig(v map[string]interface{}) {
	o.TopicConfig = v
}

func (o CreateTopic) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CleanupPolicies != nil {
		toSerialize["cleanupPolicies"] = o.CleanupPolicies
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.DisplayName != nil {
		toSerialize["displayName"] = o.DisplayName
	}
	if o.Extension != nil {
		toSerialize["extension"] = o.Extension
	}
	if o.MaximumMessageSize != nil {
		toSerialize["maximumMessageSize"] = o.MaximumMessageSize
	}
	if o.MinimumInSyncReplicas != nil {
		toSerialize["minimumInSyncReplicas"] = o.MinimumInSyncReplicas
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if o.Owner != nil {
		toSerialize["owner"] = o.Owner
	}
	if true {
		toSerialize["partitions"] = o.Partitions
	}
	if o.ReplicationFactor != nil {
		toSerialize["replicationFactor"] = o.ReplicationFactor
	}
	if o.RetentionSize != nil {
		toSerialize["retentionSize"] = o.RetentionSize
	}
	if o.RetentionTime != nil {
		toSerialize["retentionTime"] = o.RetentionTime
	}
	if o.SchemaText != nil {
		toSerialize["schemaText"] = o.SchemaText
	}
	if o.SchemaType != nil {
		toSerialize["schemaType"] = o.SchemaType
	}
	if true {
		toSerialize["service"] = o.Service
	}
	if o.Tags != nil {
		toSerialize["tags"] = o.Tags
	}
	if o.TopicConfig != nil {
		toSerialize["topicConfig"] = o.TopicConfig
	}
	return json.Marshal(toSerialize)
}

type NullableCreateTopic struct {
	value *CreateTopic
	isSet bool
}

func (v NullableCreateTopic) Get() *CreateTopic {
	return v.value
}

func (v *NullableCreateTopic) Set(val *CreateTopic) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateTopic) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateTopic) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateTopic(val *CreateTopic) *NullableCreateTopic {
	return &NullableCreateTopic{value: val, isSet: true}
}

func (v NullableCreateTopic) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateTopic) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
