/*
OpenMetadata Apis

# Overview  OpenMetadata supports REST APIs for getting metadata in and out of metadata store. The API resources are grouped under following categories: - **Data assets** - includes resources for data entities, such as `databases`, `tables`, and `topics`. Resources for data assets created from data, such as `dashboards`, `reports`, `metrics`, and `ML Features` are part of this collection. `pipelines`, `notebooks`, etc. that are used for creating data assets are also available as resources as of this collection. - **Teams and Users** - includes `users`, `teams`, a special type of user called `bots` that performs many automated tasks such as ingestion. - **Services** - are services that OpenMetadata integrates with. Currently `databaseService` is the only service under this collection that represents data sources. In the future, services related to Dashboards, Reports, ETL pipelines will be added under this collection. - **Glossary** - OpenMetadata supports hierarchical tags that can be used to build business vocabulary to describe and classify data available under `tags` resource.

API version: 0.11.0
Contact: openmetadata-dev@googlegroups.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// CreatePost struct for CreatePost
type CreatePost struct {
	From    string `json:"from"`
	Message string `json:"message"`
}

// NewCreatePost instantiates a new CreatePost object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreatePost(from string, message string) *CreatePost {
	this := CreatePost{}
	this.From = from
	this.Message = message
	return &this
}

// NewCreatePostWithDefaults instantiates a new CreatePost object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreatePostWithDefaults() *CreatePost {
	this := CreatePost{}
	return &this
}

// GetFrom returns the From field value
func (o *CreatePost) GetFrom() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.From
}

// GetFromOk returns a tuple with the From field value
// and a boolean to check if the value has been set.
func (o *CreatePost) GetFromOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.From, true
}

// SetFrom sets field value
func (o *CreatePost) SetFrom(v string) {
	o.From = v
}

// GetMessage returns the Message field value
func (o *CreatePost) GetMessage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Message
}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
func (o *CreatePost) GetMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Message, true
}

// SetMessage sets field value
func (o *CreatePost) SetMessage(v string) {
	o.Message = v
}

func (o CreatePost) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["from"] = o.From
	}
	if true {
		toSerialize["message"] = o.Message
	}
	return json.Marshal(toSerialize)
}

type NullableCreatePost struct {
	value *CreatePost
	isSet bool
}

func (v NullableCreatePost) Get() *CreatePost {
	return v.value
}

func (v *NullableCreatePost) Set(val *CreatePost) {
	v.value = val
	v.isSet = true
}

func (v NullableCreatePost) IsSet() bool {
	return v.isSet
}

func (v *NullableCreatePost) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreatePost(val *CreatePost) *NullableCreatePost {
	return &NullableCreatePost{value: val, isSet: true}
}

func (v NullableCreatePost) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreatePost) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
