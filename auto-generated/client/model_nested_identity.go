/*
OpenMetadata Apis

# Overview  OpenMetadata supports REST APIs for getting metadata in and out of metadata store. The API resources are grouped under following categories: - **Data assets** - includes resources for data entities, such as `databases`, `tables`, and `topics`. Resources for data assets created from data, such as `dashboards`, `reports`, `metrics`, and `ML Features` are part of this collection. `pipelines`, `notebooks`, etc. that are used for creating data assets are also available as resources as of this collection. - **Teams and Users** - includes `users`, `teams`, a special type of user called `bots` that performs many automated tasks such as ingestion. - **Services** - are services that OpenMetadata integrates with. Currently `databaseService` is the only service under this collection that represents data sources. In the future, services related to Dashboards, Reports, ETL pipelines will be added under this collection. - **Glossary** - OpenMetadata supports hierarchical tags that can be used to build business vocabulary to describe and classify data available under `tags` resource.

API version: 0.11.0
Contact: openmetadata-dev@googlegroups.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// NestedIdentity struct for NestedIdentity
type NestedIdentity struct {
	Child    *NestedIdentity `json:"child,omitempty"`
	Field    *Text           `json:"field,omitempty"`
	Fragment *bool           `json:"fragment,omitempty"`
	Offset   *int32          `json:"offset,omitempty"`
}

// NewNestedIdentity instantiates a new NestedIdentity object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNestedIdentity() *NestedIdentity {
	this := NestedIdentity{}
	return &this
}

// NewNestedIdentityWithDefaults instantiates a new NestedIdentity object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNestedIdentityWithDefaults() *NestedIdentity {
	this := NestedIdentity{}
	return &this
}

// GetChild returns the Child field value if set, zero value otherwise.
func (o *NestedIdentity) GetChild() NestedIdentity {
	if o == nil || o.Child == nil {
		var ret NestedIdentity
		return ret
	}
	return *o.Child
}

// GetChildOk returns a tuple with the Child field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NestedIdentity) GetChildOk() (*NestedIdentity, bool) {
	if o == nil || o.Child == nil {
		return nil, false
	}
	return o.Child, true
}

// HasChild returns a boolean if a field has been set.
func (o *NestedIdentity) HasChild() bool {
	if o != nil && o.Child != nil {
		return true
	}

	return false
}

// SetChild gets a reference to the given NestedIdentity and assigns it to the Child field.
func (o *NestedIdentity) SetChild(v NestedIdentity) {
	o.Child = &v
}

// GetField returns the Field field value if set, zero value otherwise.
func (o *NestedIdentity) GetField() Text {
	if o == nil || o.Field == nil {
		var ret Text
		return ret
	}
	return *o.Field
}

// GetFieldOk returns a tuple with the Field field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NestedIdentity) GetFieldOk() (*Text, bool) {
	if o == nil || o.Field == nil {
		return nil, false
	}
	return o.Field, true
}

// HasField returns a boolean if a field has been set.
func (o *NestedIdentity) HasField() bool {
	if o != nil && o.Field != nil {
		return true
	}

	return false
}

// SetField gets a reference to the given Text and assigns it to the Field field.
func (o *NestedIdentity) SetField(v Text) {
	o.Field = &v
}

// GetFragment returns the Fragment field value if set, zero value otherwise.
func (o *NestedIdentity) GetFragment() bool {
	if o == nil || o.Fragment == nil {
		var ret bool
		return ret
	}
	return *o.Fragment
}

// GetFragmentOk returns a tuple with the Fragment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NestedIdentity) GetFragmentOk() (*bool, bool) {
	if o == nil || o.Fragment == nil {
		return nil, false
	}
	return o.Fragment, true
}

// HasFragment returns a boolean if a field has been set.
func (o *NestedIdentity) HasFragment() bool {
	if o != nil && o.Fragment != nil {
		return true
	}

	return false
}

// SetFragment gets a reference to the given bool and assigns it to the Fragment field.
func (o *NestedIdentity) SetFragment(v bool) {
	o.Fragment = &v
}

// GetOffset returns the Offset field value if set, zero value otherwise.
func (o *NestedIdentity) GetOffset() int32 {
	if o == nil || o.Offset == nil {
		var ret int32
		return ret
	}
	return *o.Offset
}

// GetOffsetOk returns a tuple with the Offset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NestedIdentity) GetOffsetOk() (*int32, bool) {
	if o == nil || o.Offset == nil {
		return nil, false
	}
	return o.Offset, true
}

// HasOffset returns a boolean if a field has been set.
func (o *NestedIdentity) HasOffset() bool {
	if o != nil && o.Offset != nil {
		return true
	}

	return false
}

// SetOffset gets a reference to the given int32 and assigns it to the Offset field.
func (o *NestedIdentity) SetOffset(v int32) {
	o.Offset = &v
}

func (o NestedIdentity) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Child != nil {
		toSerialize["child"] = o.Child
	}
	if o.Field != nil {
		toSerialize["field"] = o.Field
	}
	if o.Fragment != nil {
		toSerialize["fragment"] = o.Fragment
	}
	if o.Offset != nil {
		toSerialize["offset"] = o.Offset
	}
	return json.Marshal(toSerialize)
}

type NullableNestedIdentity struct {
	value *NestedIdentity
	isSet bool
}

func (v NullableNestedIdentity) Get() *NestedIdentity {
	return v.value
}

func (v *NullableNestedIdentity) Set(val *NestedIdentity) {
	v.value = val
	v.isSet = true
}

func (v NullableNestedIdentity) IsSet() bool {
	return v.isSet
}

func (v *NullableNestedIdentity) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNestedIdentity(val *NestedIdentity) *NullableNestedIdentity {
	return &NullableNestedIdentity{value: val, isSet: true}
}

func (v NullableNestedIdentity) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNestedIdentity) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
