/*
OpenMetadata Apis

# Overview  OpenMetadata supports REST APIs for getting metadata in and out of metadata store. The API resources are grouped under following categories: - **Data assets** - includes resources for data entities, such as `databases`, `tables`, and `topics`. Resources for data assets created from data, such as `dashboards`, `reports`, `metrics`, and `ML Features` are part of this collection. `pipelines`, `notebooks`, etc. that are used for creating data assets are also available as resources as of this collection. - **Teams and Users** - includes `users`, `teams`, a special type of user called `bots` that performs many automated tasks such as ingestion. - **Services** - are services that OpenMetadata integrates with. Currently `databaseService` is the only service under this collection that represents data sources. In the future, services related to Dashboards, Reports, ETL pipelines will be added under this collection. - **Glossary** - OpenMetadata supports hierarchical tags that can be used to build business vocabulary to describe and classify data available under `tags` resource.

API version: 0.11.0
Contact: openmetadata-dev@googlegroups.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ImageList struct for ImageList
type ImageList struct {
	Image    *string `json:"image,omitempty"`
	Image192 *string `json:"image192,omitempty"`
	Image24  *string `json:"image24,omitempty"`
	Image32  *string `json:"image32,omitempty"`
	Image48  *string `json:"image48,omitempty"`
	Image512 *string `json:"image512,omitempty"`
	Image72  *string `json:"image72,omitempty"`
}

// NewImageList instantiates a new ImageList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewImageList() *ImageList {
	this := ImageList{}
	return &this
}

// NewImageListWithDefaults instantiates a new ImageList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewImageListWithDefaults() *ImageList {
	this := ImageList{}
	return &this
}

// GetImage returns the Image field value if set, zero value otherwise.
func (o *ImageList) GetImage() string {
	if o == nil || o.Image == nil {
		var ret string
		return ret
	}
	return *o.Image
}

// GetImageOk returns a tuple with the Image field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImageList) GetImageOk() (*string, bool) {
	if o == nil || o.Image == nil {
		return nil, false
	}
	return o.Image, true
}

// HasImage returns a boolean if a field has been set.
func (o *ImageList) HasImage() bool {
	if o != nil && o.Image != nil {
		return true
	}

	return false
}

// SetImage gets a reference to the given string and assigns it to the Image field.
func (o *ImageList) SetImage(v string) {
	o.Image = &v
}

// GetImage192 returns the Image192 field value if set, zero value otherwise.
func (o *ImageList) GetImage192() string {
	if o == nil || o.Image192 == nil {
		var ret string
		return ret
	}
	return *o.Image192
}

// GetImage192Ok returns a tuple with the Image192 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImageList) GetImage192Ok() (*string, bool) {
	if o == nil || o.Image192 == nil {
		return nil, false
	}
	return o.Image192, true
}

// HasImage192 returns a boolean if a field has been set.
func (o *ImageList) HasImage192() bool {
	if o != nil && o.Image192 != nil {
		return true
	}

	return false
}

// SetImage192 gets a reference to the given string and assigns it to the Image192 field.
func (o *ImageList) SetImage192(v string) {
	o.Image192 = &v
}

// GetImage24 returns the Image24 field value if set, zero value otherwise.
func (o *ImageList) GetImage24() string {
	if o == nil || o.Image24 == nil {
		var ret string
		return ret
	}
	return *o.Image24
}

// GetImage24Ok returns a tuple with the Image24 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImageList) GetImage24Ok() (*string, bool) {
	if o == nil || o.Image24 == nil {
		return nil, false
	}
	return o.Image24, true
}

// HasImage24 returns a boolean if a field has been set.
func (o *ImageList) HasImage24() bool {
	if o != nil && o.Image24 != nil {
		return true
	}

	return false
}

// SetImage24 gets a reference to the given string and assigns it to the Image24 field.
func (o *ImageList) SetImage24(v string) {
	o.Image24 = &v
}

// GetImage32 returns the Image32 field value if set, zero value otherwise.
func (o *ImageList) GetImage32() string {
	if o == nil || o.Image32 == nil {
		var ret string
		return ret
	}
	return *o.Image32
}

// GetImage32Ok returns a tuple with the Image32 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImageList) GetImage32Ok() (*string, bool) {
	if o == nil || o.Image32 == nil {
		return nil, false
	}
	return o.Image32, true
}

// HasImage32 returns a boolean if a field has been set.
func (o *ImageList) HasImage32() bool {
	if o != nil && o.Image32 != nil {
		return true
	}

	return false
}

// SetImage32 gets a reference to the given string and assigns it to the Image32 field.
func (o *ImageList) SetImage32(v string) {
	o.Image32 = &v
}

// GetImage48 returns the Image48 field value if set, zero value otherwise.
func (o *ImageList) GetImage48() string {
	if o == nil || o.Image48 == nil {
		var ret string
		return ret
	}
	return *o.Image48
}

// GetImage48Ok returns a tuple with the Image48 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImageList) GetImage48Ok() (*string, bool) {
	if o == nil || o.Image48 == nil {
		return nil, false
	}
	return o.Image48, true
}

// HasImage48 returns a boolean if a field has been set.
func (o *ImageList) HasImage48() bool {
	if o != nil && o.Image48 != nil {
		return true
	}

	return false
}

// SetImage48 gets a reference to the given string and assigns it to the Image48 field.
func (o *ImageList) SetImage48(v string) {
	o.Image48 = &v
}

// GetImage512 returns the Image512 field value if set, zero value otherwise.
func (o *ImageList) GetImage512() string {
	if o == nil || o.Image512 == nil {
		var ret string
		return ret
	}
	return *o.Image512
}

// GetImage512Ok returns a tuple with the Image512 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImageList) GetImage512Ok() (*string, bool) {
	if o == nil || o.Image512 == nil {
		return nil, false
	}
	return o.Image512, true
}

// HasImage512 returns a boolean if a field has been set.
func (o *ImageList) HasImage512() bool {
	if o != nil && o.Image512 != nil {
		return true
	}

	return false
}

// SetImage512 gets a reference to the given string and assigns it to the Image512 field.
func (o *ImageList) SetImage512(v string) {
	o.Image512 = &v
}

// GetImage72 returns the Image72 field value if set, zero value otherwise.
func (o *ImageList) GetImage72() string {
	if o == nil || o.Image72 == nil {
		var ret string
		return ret
	}
	return *o.Image72
}

// GetImage72Ok returns a tuple with the Image72 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImageList) GetImage72Ok() (*string, bool) {
	if o == nil || o.Image72 == nil {
		return nil, false
	}
	return o.Image72, true
}

// HasImage72 returns a boolean if a field has been set.
func (o *ImageList) HasImage72() bool {
	if o != nil && o.Image72 != nil {
		return true
	}

	return false
}

// SetImage72 gets a reference to the given string and assigns it to the Image72 field.
func (o *ImageList) SetImage72(v string) {
	o.Image72 = &v
}

func (o ImageList) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Image != nil {
		toSerialize["image"] = o.Image
	}
	if o.Image192 != nil {
		toSerialize["image192"] = o.Image192
	}
	if o.Image24 != nil {
		toSerialize["image24"] = o.Image24
	}
	if o.Image32 != nil {
		toSerialize["image32"] = o.Image32
	}
	if o.Image48 != nil {
		toSerialize["image48"] = o.Image48
	}
	if o.Image512 != nil {
		toSerialize["image512"] = o.Image512
	}
	if o.Image72 != nil {
		toSerialize["image72"] = o.Image72
	}
	return json.Marshal(toSerialize)
}

type NullableImageList struct {
	value *ImageList
	isSet bool
}

func (v NullableImageList) Get() *ImageList {
	return v.value
}

func (v *NullableImageList) Set(val *ImageList) {
	v.value = val
	v.isSet = true
}

func (v NullableImageList) IsSet() bool {
	return v.isSet
}

func (v *NullableImageList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableImageList(val *ImageList) *NullableImageList {
	return &NullableImageList{value: val, isSet: true}
}

func (v NullableImageList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableImageList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
