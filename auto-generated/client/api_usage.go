/*
OpenMetadata Apis

# Overview  OpenMetadata supports REST APIs for getting metadata in and out of metadata store. The API resources are grouped under following categories: - **Data assets** - includes resources for data entities, such as `databases`, `tables`, and `topics`. Resources for data assets created from data, such as `dashboards`, `reports`, `metrics`, and `ML Features` are part of this collection. `pipelines`, `notebooks`, etc. that are used for creating data assets are also available as resources as of this collection. - **Teams and Users** - includes `users`, `teams`, a special type of user called `bots` that performs many automated tasks such as ingestion. - **Services** - are services that OpenMetadata integrates with. Currently `databaseService` is the only service under this collection that represents data sources. In the future, services related to Dashboards, Reports, ETL pipelines will be added under this collection. - **Glossary** - OpenMetadata supports hierarchical tags that can be used to build business vocabulary to describe and classify data available under `tags` resource.

API version: 0.11.0
Contact: openmetadata-dev@googlegroups.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)

// UsageApiService UsageApi service
type UsageApiService service

type ApiGetEntityUsageByFQNRequest struct {
	ctx        context.Context
	ApiService *UsageApiService
	entity     string
	fqn        string
	days       *int32
	date       *string
}

// Usage for number of days going back from the given date (default&#x3D;1, min&#x3D;1, max&#x3D;30)
func (r ApiGetEntityUsageByFQNRequest) Days(days int32) ApiGetEntityUsageByFQNRequest {
	r.days = &days
	return r
}

// Usage for number of days going back from this date in ISO 8601 format (default &#x3D; currentDate)
func (r ApiGetEntityUsageByFQNRequest) Date(date string) ApiGetEntityUsageByFQNRequest {
	r.date = &date
	return r
}

func (r ApiGetEntityUsageByFQNRequest) Execute() (*EntityUsage, *http.Response, error) {
	return r.ApiService.GetEntityUsageByFQNExecute(r)
}

/*
GetEntityUsageByFQN Get usage by name

Get usage details for an entity identified by fully qualified name.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param entity Entity type for which usage is requested
 @param fqn Fully qualified name of the entity that uniquely identifies an entity
 @return ApiGetEntityUsageByFQNRequest
*/
func (a *UsageApiService) GetEntityUsageByFQN(ctx context.Context, entity string, fqn string) ApiGetEntityUsageByFQNRequest {
	return ApiGetEntityUsageByFQNRequest{
		ApiService: a,
		ctx:        ctx,
		entity:     entity,
		fqn:        fqn,
	}
}

// Execute executes the request
//  @return EntityUsage
func (a *UsageApiService) GetEntityUsageByFQNExecute(r ApiGetEntityUsageByFQNRequest) (*EntityUsage, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *EntityUsage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsageApiService.GetEntityUsageByFQN")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/usage/{entity}/name/{fqn}"
	localVarPath = strings.Replace(localVarPath, "{"+"entity"+"}", url.PathEscape(parameterToString(r.entity, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"fqn"+"}", url.PathEscape(parameterToString(r.fqn, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.days != nil {
		localVarQueryParams.Add("days", parameterToString(*r.days, ""))
	}
	if r.date != nil {
		localVarQueryParams.Add("date", parameterToString(*r.date, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetEntityUsageByIDRequest struct {
	ctx        context.Context
	ApiService *UsageApiService
	entity     string
	id         string
	days       *int32
	date       *string
}

// Usage for number of days going back from the given date (default&#x3D;1, min&#x3D;1, max&#x3D;30)
func (r ApiGetEntityUsageByIDRequest) Days(days int32) ApiGetEntityUsageByIDRequest {
	r.days = &days
	return r
}

// Usage for number of days going back from this date in ISO 8601 format. (default &#x3D; currentDate)
func (r ApiGetEntityUsageByIDRequest) Date(date string) ApiGetEntityUsageByIDRequest {
	r.date = &date
	return r
}

func (r ApiGetEntityUsageByIDRequest) Execute() (*EntityUsage, *http.Response, error) {
	return r.ApiService.GetEntityUsageByIDExecute(r)
}

/*
GetEntityUsageByID Get usage

Get usage details for an entity identified by `id`.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param entity Entity type for which usage is requested
 @param id Entity id
 @return ApiGetEntityUsageByIDRequest
*/
func (a *UsageApiService) GetEntityUsageByID(ctx context.Context, entity string, id string) ApiGetEntityUsageByIDRequest {
	return ApiGetEntityUsageByIDRequest{
		ApiService: a,
		ctx:        ctx,
		entity:     entity,
		id:         id,
	}
}

// Execute executes the request
//  @return EntityUsage
func (a *UsageApiService) GetEntityUsageByIDExecute(r ApiGetEntityUsageByIDRequest) (*EntityUsage, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *EntityUsage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsageApiService.GetEntityUsageByID")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/usage/{entity}/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"entity"+"}", url.PathEscape(parameterToString(r.entity, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.days != nil {
		localVarQueryParams.Add("days", parameterToString(*r.days, ""))
	}
	if r.date != nil {
		localVarQueryParams.Add("date", parameterToString(*r.date, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReportEntityUsageWithFQNRequest struct {
	ctx        context.Context
	ApiService *UsageApiService
	entity     string
	fqn        string
	dailyCount *DailyCount
}

// Usage information a given date
func (r ApiReportEntityUsageWithFQNRequest) DailyCount(dailyCount DailyCount) ApiReportEntityUsageWithFQNRequest {
	r.dailyCount = &dailyCount
	return r
}

func (r ApiReportEntityUsageWithFQNRequest) Execute() (*EntityUsage, *http.Response, error) {
	return r.ApiService.ReportEntityUsageWithFQNExecute(r)
}

/*
ReportEntityUsageWithFQN Report usage by name

Report usage information for an entity by name on a given date. System stores last 30 days of usage information. Usage information older than 30 days is deleted.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param entity Entity type for which usage is reported
 @param fqn Fully qualified name of the entity that uniquely identifies an entity
 @return ApiReportEntityUsageWithFQNRequest
*/
func (a *UsageApiService) ReportEntityUsageWithFQN(ctx context.Context, entity string, fqn string) ApiReportEntityUsageWithFQNRequest {
	return ApiReportEntityUsageWithFQNRequest{
		ApiService: a,
		ctx:        ctx,
		entity:     entity,
		fqn:        fqn,
	}
}

// Execute executes the request
//  @return EntityUsage
func (a *UsageApiService) ReportEntityUsageWithFQNExecute(r ApiReportEntityUsageWithFQNRequest) (*EntityUsage, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *EntityUsage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsageApiService.ReportEntityUsageWithFQN")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/usage/{entity}/name/{fqn}"
	localVarPath = strings.Replace(localVarPath, "{"+"entity"+"}", url.PathEscape(parameterToString(r.entity, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"fqn"+"}", url.PathEscape(parameterToString(r.fqn, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.dailyCount
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReportEntityUsageWithIDRequest struct {
	ctx        context.Context
	ApiService *UsageApiService
	entity     string
	id         string
	dailyCount *DailyCount
}

// Usage information a given date
func (r ApiReportEntityUsageWithIDRequest) DailyCount(dailyCount DailyCount) ApiReportEntityUsageWithIDRequest {
	r.dailyCount = &dailyCount
	return r
}

func (r ApiReportEntityUsageWithIDRequest) Execute() (*EntityUsage, *http.Response, error) {
	return r.ApiService.ReportEntityUsageWithIDExecute(r)
}

/*
ReportEntityUsageWithID Report usage

Report usage information for an entity on a given date. System stores last 30 days of usage information. Usage information older than 30 days is deleted.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param entity Entity type for which usage is reported
 @param id Entity id
 @return ApiReportEntityUsageWithIDRequest
*/
func (a *UsageApiService) ReportEntityUsageWithID(ctx context.Context, entity string, id string) ApiReportEntityUsageWithIDRequest {
	return ApiReportEntityUsageWithIDRequest{
		ApiService: a,
		ctx:        ctx,
		entity:     entity,
		id:         id,
	}
}

// Execute executes the request
//  @return EntityUsage
func (a *UsageApiService) ReportEntityUsageWithIDExecute(r ApiReportEntityUsageWithIDRequest) (*EntityUsage, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *EntityUsage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsageApiService.ReportEntityUsageWithID")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/usage/{entity}/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"entity"+"}", url.PathEscape(parameterToString(r.entity, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.dailyCount
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
