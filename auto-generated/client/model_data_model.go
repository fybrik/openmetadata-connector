/*
OpenMetadata Apis

# Overview  OpenMetadata supports REST APIs for getting metadata in and out of metadata store. The API resources are grouped under following categories: - **Data assets** - includes resources for data entities, such as `databases`, `tables`, and `topics`. Resources for data assets created from data, such as `dashboards`, `reports`, `metrics`, and `ML Features` are part of this collection. `pipelines`, `notebooks`, etc. that are used for creating data assets are also available as resources as of this collection. - **Teams and Users** - includes `users`, `teams`, a special type of user called `bots` that performs many automated tasks such as ingestion. - **Services** - are services that OpenMetadata integrates with. Currently `databaseService` is the only service under this collection that represents data sources. In the future, services related to Dashboards, Reports, ETL pipelines will be added under this collection. - **Glossary** - OpenMetadata supports hierarchical tags that can be used to build business vocabulary to describe and classify data available under `tags` resource.

API version: 0.11.0
Contact: openmetadata-dev@googlegroups.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// DataModel struct for DataModel
type DataModel struct {
	Columns     []Column   `json:"columns,omitempty"`
	Description *string    `json:"description,omitempty"`
	GeneratedAt *time.Time `json:"generatedAt,omitempty"`
	ModelType   string     `json:"modelType"`
	Path        *string    `json:"path,omitempty"`
	RawSql      *string    `json:"rawSql,omitempty"`
	Sql         string     `json:"sql"`
	Upstream    []string   `json:"upstream,omitempty"`
}

// NewDataModel instantiates a new DataModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDataModel(modelType string, sql string) *DataModel {
	this := DataModel{}
	this.ModelType = modelType
	this.Sql = sql
	return &this
}

// NewDataModelWithDefaults instantiates a new DataModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDataModelWithDefaults() *DataModel {
	this := DataModel{}
	return &this
}

// GetColumns returns the Columns field value if set, zero value otherwise.
func (o *DataModel) GetColumns() []Column {
	if o == nil || o.Columns == nil {
		var ret []Column
		return ret
	}
	return o.Columns
}

// GetColumnsOk returns a tuple with the Columns field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataModel) GetColumnsOk() ([]Column, bool) {
	if o == nil || o.Columns == nil {
		return nil, false
	}
	return o.Columns, true
}

// HasColumns returns a boolean if a field has been set.
func (o *DataModel) HasColumns() bool {
	if o != nil && o.Columns != nil {
		return true
	}

	return false
}

// SetColumns gets a reference to the given []Column and assigns it to the Columns field.
func (o *DataModel) SetColumns(v []Column) {
	o.Columns = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *DataModel) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataModel) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *DataModel) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *DataModel) SetDescription(v string) {
	o.Description = &v
}

// GetGeneratedAt returns the GeneratedAt field value if set, zero value otherwise.
func (o *DataModel) GetGeneratedAt() time.Time {
	if o == nil || o.GeneratedAt == nil {
		var ret time.Time
		return ret
	}
	return *o.GeneratedAt
}

// GetGeneratedAtOk returns a tuple with the GeneratedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataModel) GetGeneratedAtOk() (*time.Time, bool) {
	if o == nil || o.GeneratedAt == nil {
		return nil, false
	}
	return o.GeneratedAt, true
}

// HasGeneratedAt returns a boolean if a field has been set.
func (o *DataModel) HasGeneratedAt() bool {
	if o != nil && o.GeneratedAt != nil {
		return true
	}

	return false
}

// SetGeneratedAt gets a reference to the given time.Time and assigns it to the GeneratedAt field.
func (o *DataModel) SetGeneratedAt(v time.Time) {
	o.GeneratedAt = &v
}

// GetModelType returns the ModelType field value
func (o *DataModel) GetModelType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ModelType
}

// GetModelTypeOk returns a tuple with the ModelType field value
// and a boolean to check if the value has been set.
func (o *DataModel) GetModelTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ModelType, true
}

// SetModelType sets field value
func (o *DataModel) SetModelType(v string) {
	o.ModelType = v
}

// GetPath returns the Path field value if set, zero value otherwise.
func (o *DataModel) GetPath() string {
	if o == nil || o.Path == nil {
		var ret string
		return ret
	}
	return *o.Path
}

// GetPathOk returns a tuple with the Path field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataModel) GetPathOk() (*string, bool) {
	if o == nil || o.Path == nil {
		return nil, false
	}
	return o.Path, true
}

// HasPath returns a boolean if a field has been set.
func (o *DataModel) HasPath() bool {
	if o != nil && o.Path != nil {
		return true
	}

	return false
}

// SetPath gets a reference to the given string and assigns it to the Path field.
func (o *DataModel) SetPath(v string) {
	o.Path = &v
}

// GetRawSql returns the RawSql field value if set, zero value otherwise.
func (o *DataModel) GetRawSql() string {
	if o == nil || o.RawSql == nil {
		var ret string
		return ret
	}
	return *o.RawSql
}

// GetRawSqlOk returns a tuple with the RawSql field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataModel) GetRawSqlOk() (*string, bool) {
	if o == nil || o.RawSql == nil {
		return nil, false
	}
	return o.RawSql, true
}

// HasRawSql returns a boolean if a field has been set.
func (o *DataModel) HasRawSql() bool {
	if o != nil && o.RawSql != nil {
		return true
	}

	return false
}

// SetRawSql gets a reference to the given string and assigns it to the RawSql field.
func (o *DataModel) SetRawSql(v string) {
	o.RawSql = &v
}

// GetSql returns the Sql field value
func (o *DataModel) GetSql() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Sql
}

// GetSqlOk returns a tuple with the Sql field value
// and a boolean to check if the value has been set.
func (o *DataModel) GetSqlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Sql, true
}

// SetSql sets field value
func (o *DataModel) SetSql(v string) {
	o.Sql = v
}

// GetUpstream returns the Upstream field value if set, zero value otherwise.
func (o *DataModel) GetUpstream() []string {
	if o == nil || o.Upstream == nil {
		var ret []string
		return ret
	}
	return o.Upstream
}

// GetUpstreamOk returns a tuple with the Upstream field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataModel) GetUpstreamOk() ([]string, bool) {
	if o == nil || o.Upstream == nil {
		return nil, false
	}
	return o.Upstream, true
}

// HasUpstream returns a boolean if a field has been set.
func (o *DataModel) HasUpstream() bool {
	if o != nil && o.Upstream != nil {
		return true
	}

	return false
}

// SetUpstream gets a reference to the given []string and assigns it to the Upstream field.
func (o *DataModel) SetUpstream(v []string) {
	o.Upstream = v
}

func (o DataModel) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Columns != nil {
		toSerialize["columns"] = o.Columns
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.GeneratedAt != nil {
		toSerialize["generatedAt"] = o.GeneratedAt
	}
	if true {
		toSerialize["modelType"] = o.ModelType
	}
	if o.Path != nil {
		toSerialize["path"] = o.Path
	}
	if o.RawSql != nil {
		toSerialize["rawSql"] = o.RawSql
	}
	if true {
		toSerialize["sql"] = o.Sql
	}
	if o.Upstream != nil {
		toSerialize["upstream"] = o.Upstream
	}
	return json.Marshal(toSerialize)
}

type NullableDataModel struct {
	value *DataModel
	isSet bool
}

func (v NullableDataModel) Get() *DataModel {
	return v.value
}

func (v *NullableDataModel) Set(val *DataModel) {
	v.value = val
	v.isSet = true
}

func (v NullableDataModel) IsSet() bool {
	return v.isSet
}

func (v *NullableDataModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataModel(val *DataModel) *NullableDataModel {
	return &NullableDataModel{value: val, isSet: true}
}

func (v NullableDataModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
