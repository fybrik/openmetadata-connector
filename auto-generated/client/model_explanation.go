/*
OpenMetadata Apis

# Overview  OpenMetadata supports REST APIs for getting metadata in and out of metadata store. The API resources are grouped under following categories: - **Data assets** - includes resources for data entities, such as `databases`, `tables`, and `topics`. Resources for data assets created from data, such as `dashboards`, `reports`, `metrics`, and `ML Features` are part of this collection. `pipelines`, `notebooks`, etc. that are used for creating data assets are also available as resources as of this collection. - **Teams and Users** - includes `users`, `teams`, a special type of user called `bots` that performs many automated tasks such as ingestion. - **Services** - are services that OpenMetadata integrates with. Currently `databaseService` is the only service under this collection that represents data sources. In the future, services related to Dashboards, Reports, ETL pipelines will be added under this collection. - **Glossary** - OpenMetadata supports hierarchical tags that can be used to build business vocabulary to describe and classify data available under `tags` resource.

API version: 0.11.0
Contact: openmetadata-dev@googlegroups.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Explanation struct for Explanation
type Explanation struct {
	Description *string       `json:"description,omitempty"`
	Details     []Explanation `json:"details,omitempty"`
	Match       *bool         `json:"match,omitempty"`
	Value       *float32      `json:"value,omitempty"`
}

// NewExplanation instantiates a new Explanation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExplanation() *Explanation {
	this := Explanation{}
	return &this
}

// NewExplanationWithDefaults instantiates a new Explanation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExplanationWithDefaults() *Explanation {
	this := Explanation{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *Explanation) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Explanation) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *Explanation) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *Explanation) SetDescription(v string) {
	o.Description = &v
}

// GetDetails returns the Details field value if set, zero value otherwise.
func (o *Explanation) GetDetails() []Explanation {
	if o == nil || o.Details == nil {
		var ret []Explanation
		return ret
	}
	return o.Details
}

// GetDetailsOk returns a tuple with the Details field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Explanation) GetDetailsOk() ([]Explanation, bool) {
	if o == nil || o.Details == nil {
		return nil, false
	}
	return o.Details, true
}

// HasDetails returns a boolean if a field has been set.
func (o *Explanation) HasDetails() bool {
	if o != nil && o.Details != nil {
		return true
	}

	return false
}

// SetDetails gets a reference to the given []Explanation and assigns it to the Details field.
func (o *Explanation) SetDetails(v []Explanation) {
	o.Details = v
}

// GetMatch returns the Match field value if set, zero value otherwise.
func (o *Explanation) GetMatch() bool {
	if o == nil || o.Match == nil {
		var ret bool
		return ret
	}
	return *o.Match
}

// GetMatchOk returns a tuple with the Match field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Explanation) GetMatchOk() (*bool, bool) {
	if o == nil || o.Match == nil {
		return nil, false
	}
	return o.Match, true
}

// HasMatch returns a boolean if a field has been set.
func (o *Explanation) HasMatch() bool {
	if o != nil && o.Match != nil {
		return true
	}

	return false
}

// SetMatch gets a reference to the given bool and assigns it to the Match field.
func (o *Explanation) SetMatch(v bool) {
	o.Match = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *Explanation) GetValue() float32 {
	if o == nil || o.Value == nil {
		var ret float32
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Explanation) GetValueOk() (*float32, bool) {
	if o == nil || o.Value == nil {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *Explanation) HasValue() bool {
	if o != nil && o.Value != nil {
		return true
	}

	return false
}

// SetValue gets a reference to the given float32 and assigns it to the Value field.
func (o *Explanation) SetValue(v float32) {
	o.Value = &v
}

func (o Explanation) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.Details != nil {
		toSerialize["details"] = o.Details
	}
	if o.Match != nil {
		toSerialize["match"] = o.Match
	}
	if o.Value != nil {
		toSerialize["value"] = o.Value
	}
	return json.Marshal(toSerialize)
}

type NullableExplanation struct {
	value *Explanation
	isSet bool
}

func (v NullableExplanation) Get() *Explanation {
	return v.value
}

func (v *NullableExplanation) Set(val *Explanation) {
	v.value = val
	v.isSet = true
}

func (v NullableExplanation) IsSet() bool {
	return v.isSet
}

func (v *NullableExplanation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExplanation(val *Explanation) *NullableExplanation {
	return &NullableExplanation{value: val, isSet: true}
}

func (v NullableExplanation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExplanation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
