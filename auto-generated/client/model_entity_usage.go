/*
OpenMetadata Apis

# Overview  OpenMetadata supports REST APIs for getting metadata in and out of metadata store. The API resources are grouped under following categories: - **Data assets** - includes resources for data entities, such as `databases`, `tables`, and `topics`. Resources for data assets created from data, such as `dashboards`, `reports`, `metrics`, and `ML Features` are part of this collection. `pipelines`, `notebooks`, etc. that are used for creating data assets are also available as resources as of this collection. - **Teams and Users** - includes `users`, `teams`, a special type of user called `bots` that performs many automated tasks such as ingestion. - **Services** - are services that OpenMetadata integrates with. Currently `databaseService` is the only service under this collection that represents data sources. In the future, services related to Dashboards, Reports, ETL pipelines will be added under this collection. - **Glossary** - OpenMetadata supports hierarchical tags that can be used to build business vocabulary to describe and classify data available under `tags` resource.

API version: 0.11.0
Contact: openmetadata-dev@googlegroups.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// EntityUsage struct for EntityUsage
type EntityUsage struct {
	Entity EntityReference `json:"entity"`
	Usage  []UsageDetails  `json:"usage"`
}

// NewEntityUsage instantiates a new EntityUsage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEntityUsage(entity EntityReference, usage []UsageDetails) *EntityUsage {
	this := EntityUsage{}
	this.Entity = entity
	this.Usage = usage
	return &this
}

// NewEntityUsageWithDefaults instantiates a new EntityUsage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEntityUsageWithDefaults() *EntityUsage {
	this := EntityUsage{}
	return &this
}

// GetEntity returns the Entity field value
func (o *EntityUsage) GetEntity() EntityReference {
	if o == nil {
		var ret EntityReference
		return ret
	}

	return o.Entity
}

// GetEntityOk returns a tuple with the Entity field value
// and a boolean to check if the value has been set.
func (o *EntityUsage) GetEntityOk() (*EntityReference, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Entity, true
}

// SetEntity sets field value
func (o *EntityUsage) SetEntity(v EntityReference) {
	o.Entity = v
}

// GetUsage returns the Usage field value
func (o *EntityUsage) GetUsage() []UsageDetails {
	if o == nil {
		var ret []UsageDetails
		return ret
	}

	return o.Usage
}

// GetUsageOk returns a tuple with the Usage field value
// and a boolean to check if the value has been set.
func (o *EntityUsage) GetUsageOk() ([]UsageDetails, bool) {
	if o == nil {
		return nil, false
	}
	return o.Usage, true
}

// SetUsage sets field value
func (o *EntityUsage) SetUsage(v []UsageDetails) {
	o.Usage = v
}

func (o EntityUsage) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["entity"] = o.Entity
	}
	if true {
		toSerialize["usage"] = o.Usage
	}
	return json.Marshal(toSerialize)
}

type NullableEntityUsage struct {
	value *EntityUsage
	isSet bool
}

func (v NullableEntityUsage) Get() *EntityUsage {
	return v.value
}

func (v *NullableEntityUsage) Set(val *EntityUsage) {
	v.value = val
	v.isSet = true
}

func (v NullableEntityUsage) IsSet() bool {
	return v.isSet
}

func (v *NullableEntityUsage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEntityUsage(val *EntityUsage) *NullableEntityUsage {
	return &NullableEntityUsage{value: val, isSet: true}
}

func (v NullableEntityUsage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEntityUsage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
