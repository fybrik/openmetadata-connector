/*
OpenMetadata Apis

# Overview  OpenMetadata supports REST APIs for getting metadata in and out of metadata store. The API resources are grouped under following categories: - **Data assets** - includes resources for data entities, such as `databases`, `tables`, and `topics`. Resources for data assets created from data, such as `dashboards`, `reports`, `metrics`, and `ML Features` are part of this collection. `pipelines`, `notebooks`, etc. that are used for creating data assets are also available as resources as of this collection. - **Teams and Users** - includes `users`, `teams`, a special type of user called `bots` that performs many automated tasks such as ingestion. - **Services** - are services that OpenMetadata integrates with. Currently `databaseService` is the only service under this collection that represents data sources. In the future, services related to Dashboards, Reports, ETL pipelines will be added under this collection. - **Glossary** - OpenMetadata supports hierarchical tags that can be used to build business vocabulary to describe and classify data available under `tags` resource.

API version: 0.11.0
Contact: openmetadata-dev@googlegroups.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Topic struct for Topic
type Topic struct {
	ChangeDescription     *ChangeDescription     `json:"changeDescription,omitempty"`
	CleanupPolicies       []string               `json:"cleanupPolicies,omitempty"`
	Deleted               *bool                  `json:"deleted,omitempty"`
	Description           *string                `json:"description,omitempty"`
	DisplayName           *string                `json:"displayName,omitempty"`
	Extension             map[string]interface{} `json:"extension,omitempty"`
	Followers             []EntityReference      `json:"followers,omitempty"`
	FullyQualifiedName    *string                `json:"fullyQualifiedName,omitempty"`
	Href                  *string                `json:"href,omitempty"`
	Id                    string                 `json:"id"`
	MaximumMessageSize    *int32                 `json:"maximumMessageSize,omitempty"`
	MinimumInSyncReplicas *int32                 `json:"minimumInSyncReplicas,omitempty"`
	Name                  string                 `json:"name"`
	Owner                 *EntityReference       `json:"owner,omitempty"`
	Partitions            int32                  `json:"partitions"`
	ReplicationFactor     *int32                 `json:"replicationFactor,omitempty"`
	RetentionSize         *float64               `json:"retentionSize,omitempty"`
	RetentionTime         *float64               `json:"retentionTime,omitempty"`
	SampleData            *TopicSampleData       `json:"sampleData,omitempty"`
	SchemaText            *string                `json:"schemaText,omitempty"`
	SchemaType            *string                `json:"schemaType,omitempty"`
	Service               EntityReference        `json:"service"`
	ServiceType           *string                `json:"serviceType,omitempty"`
	Tags                  []TagLabel             `json:"tags,omitempty"`
	TopicConfig           map[string]interface{} `json:"topicConfig,omitempty"`
	UpdatedAt             *int64                 `json:"updatedAt,omitempty"`
	UpdatedBy             *string                `json:"updatedBy,omitempty"`
	Version               *float64               `json:"version,omitempty"`
}

// NewTopic instantiates a new Topic object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTopic(id string, name string, partitions int32, service EntityReference) *Topic {
	this := Topic{}
	this.Id = id
	this.Name = name
	this.Partitions = partitions
	this.Service = service
	return &this
}

// NewTopicWithDefaults instantiates a new Topic object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTopicWithDefaults() *Topic {
	this := Topic{}
	return &this
}

// GetChangeDescription returns the ChangeDescription field value if set, zero value otherwise.
func (o *Topic) GetChangeDescription() ChangeDescription {
	if o == nil || o.ChangeDescription == nil {
		var ret ChangeDescription
		return ret
	}
	return *o.ChangeDescription
}

// GetChangeDescriptionOk returns a tuple with the ChangeDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Topic) GetChangeDescriptionOk() (*ChangeDescription, bool) {
	if o == nil || o.ChangeDescription == nil {
		return nil, false
	}
	return o.ChangeDescription, true
}

// HasChangeDescription returns a boolean if a field has been set.
func (o *Topic) HasChangeDescription() bool {
	if o != nil && o.ChangeDescription != nil {
		return true
	}

	return false
}

// SetChangeDescription gets a reference to the given ChangeDescription and assigns it to the ChangeDescription field.
func (o *Topic) SetChangeDescription(v ChangeDescription) {
	o.ChangeDescription = &v
}

// GetCleanupPolicies returns the CleanupPolicies field value if set, zero value otherwise.
func (o *Topic) GetCleanupPolicies() []string {
	if o == nil || o.CleanupPolicies == nil {
		var ret []string
		return ret
	}
	return o.CleanupPolicies
}

// GetCleanupPoliciesOk returns a tuple with the CleanupPolicies field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Topic) GetCleanupPoliciesOk() ([]string, bool) {
	if o == nil || o.CleanupPolicies == nil {
		return nil, false
	}
	return o.CleanupPolicies, true
}

// HasCleanupPolicies returns a boolean if a field has been set.
func (o *Topic) HasCleanupPolicies() bool {
	if o != nil && o.CleanupPolicies != nil {
		return true
	}

	return false
}

// SetCleanupPolicies gets a reference to the given []string and assigns it to the CleanupPolicies field.
func (o *Topic) SetCleanupPolicies(v []string) {
	o.CleanupPolicies = v
}

// GetDeleted returns the Deleted field value if set, zero value otherwise.
func (o *Topic) GetDeleted() bool {
	if o == nil || o.Deleted == nil {
		var ret bool
		return ret
	}
	return *o.Deleted
}

// GetDeletedOk returns a tuple with the Deleted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Topic) GetDeletedOk() (*bool, bool) {
	if o == nil || o.Deleted == nil {
		return nil, false
	}
	return o.Deleted, true
}

// HasDeleted returns a boolean if a field has been set.
func (o *Topic) HasDeleted() bool {
	if o != nil && o.Deleted != nil {
		return true
	}

	return false
}

// SetDeleted gets a reference to the given bool and assigns it to the Deleted field.
func (o *Topic) SetDeleted(v bool) {
	o.Deleted = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *Topic) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Topic) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *Topic) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *Topic) SetDescription(v string) {
	o.Description = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *Topic) GetDisplayName() string {
	if o == nil || o.DisplayName == nil {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Topic) GetDisplayNameOk() (*string, bool) {
	if o == nil || o.DisplayName == nil {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *Topic) HasDisplayName() bool {
	if o != nil && o.DisplayName != nil {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *Topic) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetExtension returns the Extension field value if set, zero value otherwise.
func (o *Topic) GetExtension() map[string]interface{} {
	if o == nil || o.Extension == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Topic) GetExtensionOk() (map[string]interface{}, bool) {
	if o == nil || o.Extension == nil {
		return nil, false
	}
	return o.Extension, true
}

// HasExtension returns a boolean if a field has been set.
func (o *Topic) HasExtension() bool {
	if o != nil && o.Extension != nil {
		return true
	}

	return false
}

// SetExtension gets a reference to the given map[string]interface{} and assigns it to the Extension field.
func (o *Topic) SetExtension(v map[string]interface{}) {
	o.Extension = v
}

// GetFollowers returns the Followers field value if set, zero value otherwise.
func (o *Topic) GetFollowers() []EntityReference {
	if o == nil || o.Followers == nil {
		var ret []EntityReference
		return ret
	}
	return o.Followers
}

// GetFollowersOk returns a tuple with the Followers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Topic) GetFollowersOk() ([]EntityReference, bool) {
	if o == nil || o.Followers == nil {
		return nil, false
	}
	return o.Followers, true
}

// HasFollowers returns a boolean if a field has been set.
func (o *Topic) HasFollowers() bool {
	if o != nil && o.Followers != nil {
		return true
	}

	return false
}

// SetFollowers gets a reference to the given []EntityReference and assigns it to the Followers field.
func (o *Topic) SetFollowers(v []EntityReference) {
	o.Followers = v
}

// GetFullyQualifiedName returns the FullyQualifiedName field value if set, zero value otherwise.
func (o *Topic) GetFullyQualifiedName() string {
	if o == nil || o.FullyQualifiedName == nil {
		var ret string
		return ret
	}
	return *o.FullyQualifiedName
}

// GetFullyQualifiedNameOk returns a tuple with the FullyQualifiedName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Topic) GetFullyQualifiedNameOk() (*string, bool) {
	if o == nil || o.FullyQualifiedName == nil {
		return nil, false
	}
	return o.FullyQualifiedName, true
}

// HasFullyQualifiedName returns a boolean if a field has been set.
func (o *Topic) HasFullyQualifiedName() bool {
	if o != nil && o.FullyQualifiedName != nil {
		return true
	}

	return false
}

// SetFullyQualifiedName gets a reference to the given string and assigns it to the FullyQualifiedName field.
func (o *Topic) SetFullyQualifiedName(v string) {
	o.FullyQualifiedName = &v
}

// GetHref returns the Href field value if set, zero value otherwise.
func (o *Topic) GetHref() string {
	if o == nil || o.Href == nil {
		var ret string
		return ret
	}
	return *o.Href
}

// GetHrefOk returns a tuple with the Href field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Topic) GetHrefOk() (*string, bool) {
	if o == nil || o.Href == nil {
		return nil, false
	}
	return o.Href, true
}

// HasHref returns a boolean if a field has been set.
func (o *Topic) HasHref() bool {
	if o != nil && o.Href != nil {
		return true
	}

	return false
}

// SetHref gets a reference to the given string and assigns it to the Href field.
func (o *Topic) SetHref(v string) {
	o.Href = &v
}

// GetId returns the Id field value
func (o *Topic) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Topic) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Topic) SetId(v string) {
	o.Id = v
}

// GetMaximumMessageSize returns the MaximumMessageSize field value if set, zero value otherwise.
func (o *Topic) GetMaximumMessageSize() int32 {
	if o == nil || o.MaximumMessageSize == nil {
		var ret int32
		return ret
	}
	return *o.MaximumMessageSize
}

// GetMaximumMessageSizeOk returns a tuple with the MaximumMessageSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Topic) GetMaximumMessageSizeOk() (*int32, bool) {
	if o == nil || o.MaximumMessageSize == nil {
		return nil, false
	}
	return o.MaximumMessageSize, true
}

// HasMaximumMessageSize returns a boolean if a field has been set.
func (o *Topic) HasMaximumMessageSize() bool {
	if o != nil && o.MaximumMessageSize != nil {
		return true
	}

	return false
}

// SetMaximumMessageSize gets a reference to the given int32 and assigns it to the MaximumMessageSize field.
func (o *Topic) SetMaximumMessageSize(v int32) {
	o.MaximumMessageSize = &v
}

// GetMinimumInSyncReplicas returns the MinimumInSyncReplicas field value if set, zero value otherwise.
func (o *Topic) GetMinimumInSyncReplicas() int32 {
	if o == nil || o.MinimumInSyncReplicas == nil {
		var ret int32
		return ret
	}
	return *o.MinimumInSyncReplicas
}

// GetMinimumInSyncReplicasOk returns a tuple with the MinimumInSyncReplicas field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Topic) GetMinimumInSyncReplicasOk() (*int32, bool) {
	if o == nil || o.MinimumInSyncReplicas == nil {
		return nil, false
	}
	return o.MinimumInSyncReplicas, true
}

// HasMinimumInSyncReplicas returns a boolean if a field has been set.
func (o *Topic) HasMinimumInSyncReplicas() bool {
	if o != nil && o.MinimumInSyncReplicas != nil {
		return true
	}

	return false
}

// SetMinimumInSyncReplicas gets a reference to the given int32 and assigns it to the MinimumInSyncReplicas field.
func (o *Topic) SetMinimumInSyncReplicas(v int32) {
	o.MinimumInSyncReplicas = &v
}

// GetName returns the Name field value
func (o *Topic) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Topic) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Topic) SetName(v string) {
	o.Name = v
}

// GetOwner returns the Owner field value if set, zero value otherwise.
func (o *Topic) GetOwner() EntityReference {
	if o == nil || o.Owner == nil {
		var ret EntityReference
		return ret
	}
	return *o.Owner
}

// GetOwnerOk returns a tuple with the Owner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Topic) GetOwnerOk() (*EntityReference, bool) {
	if o == nil || o.Owner == nil {
		return nil, false
	}
	return o.Owner, true
}

// HasOwner returns a boolean if a field has been set.
func (o *Topic) HasOwner() bool {
	if o != nil && o.Owner != nil {
		return true
	}

	return false
}

// SetOwner gets a reference to the given EntityReference and assigns it to the Owner field.
func (o *Topic) SetOwner(v EntityReference) {
	o.Owner = &v
}

// GetPartitions returns the Partitions field value
func (o *Topic) GetPartitions() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Partitions
}

// GetPartitionsOk returns a tuple with the Partitions field value
// and a boolean to check if the value has been set.
func (o *Topic) GetPartitionsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Partitions, true
}

// SetPartitions sets field value
func (o *Topic) SetPartitions(v int32) {
	o.Partitions = v
}

// GetReplicationFactor returns the ReplicationFactor field value if set, zero value otherwise.
func (o *Topic) GetReplicationFactor() int32 {
	if o == nil || o.ReplicationFactor == nil {
		var ret int32
		return ret
	}
	return *o.ReplicationFactor
}

// GetReplicationFactorOk returns a tuple with the ReplicationFactor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Topic) GetReplicationFactorOk() (*int32, bool) {
	if o == nil || o.ReplicationFactor == nil {
		return nil, false
	}
	return o.ReplicationFactor, true
}

// HasReplicationFactor returns a boolean if a field has been set.
func (o *Topic) HasReplicationFactor() bool {
	if o != nil && o.ReplicationFactor != nil {
		return true
	}

	return false
}

// SetReplicationFactor gets a reference to the given int32 and assigns it to the ReplicationFactor field.
func (o *Topic) SetReplicationFactor(v int32) {
	o.ReplicationFactor = &v
}

// GetRetentionSize returns the RetentionSize field value if set, zero value otherwise.
func (o *Topic) GetRetentionSize() float64 {
	if o == nil || o.RetentionSize == nil {
		var ret float64
		return ret
	}
	return *o.RetentionSize
}

// GetRetentionSizeOk returns a tuple with the RetentionSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Topic) GetRetentionSizeOk() (*float64, bool) {
	if o == nil || o.RetentionSize == nil {
		return nil, false
	}
	return o.RetentionSize, true
}

// HasRetentionSize returns a boolean if a field has been set.
func (o *Topic) HasRetentionSize() bool {
	if o != nil && o.RetentionSize != nil {
		return true
	}

	return false
}

// SetRetentionSize gets a reference to the given float64 and assigns it to the RetentionSize field.
func (o *Topic) SetRetentionSize(v float64) {
	o.RetentionSize = &v
}

// GetRetentionTime returns the RetentionTime field value if set, zero value otherwise.
func (o *Topic) GetRetentionTime() float64 {
	if o == nil || o.RetentionTime == nil {
		var ret float64
		return ret
	}
	return *o.RetentionTime
}

// GetRetentionTimeOk returns a tuple with the RetentionTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Topic) GetRetentionTimeOk() (*float64, bool) {
	if o == nil || o.RetentionTime == nil {
		return nil, false
	}
	return o.RetentionTime, true
}

// HasRetentionTime returns a boolean if a field has been set.
func (o *Topic) HasRetentionTime() bool {
	if o != nil && o.RetentionTime != nil {
		return true
	}

	return false
}

// SetRetentionTime gets a reference to the given float64 and assigns it to the RetentionTime field.
func (o *Topic) SetRetentionTime(v float64) {
	o.RetentionTime = &v
}

// GetSampleData returns the SampleData field value if set, zero value otherwise.
func (o *Topic) GetSampleData() TopicSampleData {
	if o == nil || o.SampleData == nil {
		var ret TopicSampleData
		return ret
	}
	return *o.SampleData
}

// GetSampleDataOk returns a tuple with the SampleData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Topic) GetSampleDataOk() (*TopicSampleData, bool) {
	if o == nil || o.SampleData == nil {
		return nil, false
	}
	return o.SampleData, true
}

// HasSampleData returns a boolean if a field has been set.
func (o *Topic) HasSampleData() bool {
	if o != nil && o.SampleData != nil {
		return true
	}

	return false
}

// SetSampleData gets a reference to the given TopicSampleData and assigns it to the SampleData field.
func (o *Topic) SetSampleData(v TopicSampleData) {
	o.SampleData = &v
}

// GetSchemaText returns the SchemaText field value if set, zero value otherwise.
func (o *Topic) GetSchemaText() string {
	if o == nil || o.SchemaText == nil {
		var ret string
		return ret
	}
	return *o.SchemaText
}

// GetSchemaTextOk returns a tuple with the SchemaText field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Topic) GetSchemaTextOk() (*string, bool) {
	if o == nil || o.SchemaText == nil {
		return nil, false
	}
	return o.SchemaText, true
}

// HasSchemaText returns a boolean if a field has been set.
func (o *Topic) HasSchemaText() bool {
	if o != nil && o.SchemaText != nil {
		return true
	}

	return false
}

// SetSchemaText gets a reference to the given string and assigns it to the SchemaText field.
func (o *Topic) SetSchemaText(v string) {
	o.SchemaText = &v
}

// GetSchemaType returns the SchemaType field value if set, zero value otherwise.
func (o *Topic) GetSchemaType() string {
	if o == nil || o.SchemaType == nil {
		var ret string
		return ret
	}
	return *o.SchemaType
}

// GetSchemaTypeOk returns a tuple with the SchemaType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Topic) GetSchemaTypeOk() (*string, bool) {
	if o == nil || o.SchemaType == nil {
		return nil, false
	}
	return o.SchemaType, true
}

// HasSchemaType returns a boolean if a field has been set.
func (o *Topic) HasSchemaType() bool {
	if o != nil && o.SchemaType != nil {
		return true
	}

	return false
}

// SetSchemaType gets a reference to the given string and assigns it to the SchemaType field.
func (o *Topic) SetSchemaType(v string) {
	o.SchemaType = &v
}

// GetService returns the Service field value
func (o *Topic) GetService() EntityReference {
	if o == nil {
		var ret EntityReference
		return ret
	}

	return o.Service
}

// GetServiceOk returns a tuple with the Service field value
// and a boolean to check if the value has been set.
func (o *Topic) GetServiceOk() (*EntityReference, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Service, true
}

// SetService sets field value
func (o *Topic) SetService(v EntityReference) {
	o.Service = v
}

// GetServiceType returns the ServiceType field value if set, zero value otherwise.
func (o *Topic) GetServiceType() string {
	if o == nil || o.ServiceType == nil {
		var ret string
		return ret
	}
	return *o.ServiceType
}

// GetServiceTypeOk returns a tuple with the ServiceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Topic) GetServiceTypeOk() (*string, bool) {
	if o == nil || o.ServiceType == nil {
		return nil, false
	}
	return o.ServiceType, true
}

// HasServiceType returns a boolean if a field has been set.
func (o *Topic) HasServiceType() bool {
	if o != nil && o.ServiceType != nil {
		return true
	}

	return false
}

// SetServiceType gets a reference to the given string and assigns it to the ServiceType field.
func (o *Topic) SetServiceType(v string) {
	o.ServiceType = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *Topic) GetTags() []TagLabel {
	if o == nil || o.Tags == nil {
		var ret []TagLabel
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Topic) GetTagsOk() ([]TagLabel, bool) {
	if o == nil || o.Tags == nil {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *Topic) HasTags() bool {
	if o != nil && o.Tags != nil {
		return true
	}

	return false
}

// SetTags gets a reference to the given []TagLabel and assigns it to the Tags field.
func (o *Topic) SetTags(v []TagLabel) {
	o.Tags = v
}

// GetTopicConfig returns the TopicConfig field value if set, zero value otherwise.
func (o *Topic) GetTopicConfig() map[string]interface{} {
	if o == nil || o.TopicConfig == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.TopicConfig
}

// GetTopicConfigOk returns a tuple with the TopicConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Topic) GetTopicConfigOk() (map[string]interface{}, bool) {
	if o == nil || o.TopicConfig == nil {
		return nil, false
	}
	return o.TopicConfig, true
}

// HasTopicConfig returns a boolean if a field has been set.
func (o *Topic) HasTopicConfig() bool {
	if o != nil && o.TopicConfig != nil {
		return true
	}

	return false
}

// SetTopicConfig gets a reference to the given map[string]interface{} and assigns it to the TopicConfig field.
func (o *Topic) SetTopicConfig(v map[string]interface{}) {
	o.TopicConfig = v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *Topic) GetUpdatedAt() int64 {
	if o == nil || o.UpdatedAt == nil {
		var ret int64
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Topic) GetUpdatedAtOk() (*int64, bool) {
	if o == nil || o.UpdatedAt == nil {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *Topic) HasUpdatedAt() bool {
	if o != nil && o.UpdatedAt != nil {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given int64 and assigns it to the UpdatedAt field.
func (o *Topic) SetUpdatedAt(v int64) {
	o.UpdatedAt = &v
}

// GetUpdatedBy returns the UpdatedBy field value if set, zero value otherwise.
func (o *Topic) GetUpdatedBy() string {
	if o == nil || o.UpdatedBy == nil {
		var ret string
		return ret
	}
	return *o.UpdatedBy
}

// GetUpdatedByOk returns a tuple with the UpdatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Topic) GetUpdatedByOk() (*string, bool) {
	if o == nil || o.UpdatedBy == nil {
		return nil, false
	}
	return o.UpdatedBy, true
}

// HasUpdatedBy returns a boolean if a field has been set.
func (o *Topic) HasUpdatedBy() bool {
	if o != nil && o.UpdatedBy != nil {
		return true
	}

	return false
}

// SetUpdatedBy gets a reference to the given string and assigns it to the UpdatedBy field.
func (o *Topic) SetUpdatedBy(v string) {
	o.UpdatedBy = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *Topic) GetVersion() float64 {
	if o == nil || o.Version == nil {
		var ret float64
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Topic) GetVersionOk() (*float64, bool) {
	if o == nil || o.Version == nil {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *Topic) HasVersion() bool {
	if o != nil && o.Version != nil {
		return true
	}

	return false
}

// SetVersion gets a reference to the given float64 and assigns it to the Version field.
func (o *Topic) SetVersion(v float64) {
	o.Version = &v
}

func (o Topic) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ChangeDescription != nil {
		toSerialize["changeDescription"] = o.ChangeDescription
	}
	if o.CleanupPolicies != nil {
		toSerialize["cleanupPolicies"] = o.CleanupPolicies
	}
	if o.Deleted != nil {
		toSerialize["deleted"] = o.Deleted
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.DisplayName != nil {
		toSerialize["displayName"] = o.DisplayName
	}
	if o.Extension != nil {
		toSerialize["extension"] = o.Extension
	}
	if o.Followers != nil {
		toSerialize["followers"] = o.Followers
	}
	if o.FullyQualifiedName != nil {
		toSerialize["fullyQualifiedName"] = o.FullyQualifiedName
	}
	if o.Href != nil {
		toSerialize["href"] = o.Href
	}
	if true {
		toSerialize["id"] = o.Id
	}
	if o.MaximumMessageSize != nil {
		toSerialize["maximumMessageSize"] = o.MaximumMessageSize
	}
	if o.MinimumInSyncReplicas != nil {
		toSerialize["minimumInSyncReplicas"] = o.MinimumInSyncReplicas
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if o.Owner != nil {
		toSerialize["owner"] = o.Owner
	}
	if true {
		toSerialize["partitions"] = o.Partitions
	}
	if o.ReplicationFactor != nil {
		toSerialize["replicationFactor"] = o.ReplicationFactor
	}
	if o.RetentionSize != nil {
		toSerialize["retentionSize"] = o.RetentionSize
	}
	if o.RetentionTime != nil {
		toSerialize["retentionTime"] = o.RetentionTime
	}
	if o.SampleData != nil {
		toSerialize["sampleData"] = o.SampleData
	}
	if o.SchemaText != nil {
		toSerialize["schemaText"] = o.SchemaText
	}
	if o.SchemaType != nil {
		toSerialize["schemaType"] = o.SchemaType
	}
	if true {
		toSerialize["service"] = o.Service
	}
	if o.ServiceType != nil {
		toSerialize["serviceType"] = o.ServiceType
	}
	if o.Tags != nil {
		toSerialize["tags"] = o.Tags
	}
	if o.TopicConfig != nil {
		toSerialize["topicConfig"] = o.TopicConfig
	}
	if o.UpdatedAt != nil {
		toSerialize["updatedAt"] = o.UpdatedAt
	}
	if o.UpdatedBy != nil {
		toSerialize["updatedBy"] = o.UpdatedBy
	}
	if o.Version != nil {
		toSerialize["version"] = o.Version
	}
	return json.Marshal(toSerialize)
}

type NullableTopic struct {
	value *Topic
	isSet bool
}

func (v NullableTopic) Get() *Topic {
	return v.value
}

func (v *NullableTopic) Set(val *Topic) {
	v.value = val
	v.isSet = true
}

func (v NullableTopic) IsSet() bool {
	return v.isSet
}

func (v *NullableTopic) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTopic(val *Topic) *NullableTopic {
	return &NullableTopic{value: val, isSet: true}
}

func (v NullableTopic) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTopic) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
