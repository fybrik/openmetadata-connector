/*
 * Data Catalog Service - Asset Details
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"
)

// DefaultApiController binds http requests to an api service and writes the service results to the http response
type DefaultApiController struct {
	service      DefaultApiServicer
	errorHandler ErrorHandler
}

// DefaultApiOption for how the controller is set up.
type DefaultApiOption func(*DefaultApiController)

// WithDefaultApiErrorHandler inject ErrorHandler into controller
func WithDefaultApiErrorHandler(h ErrorHandler) DefaultApiOption {
	return func(c *DefaultApiController) {
		c.errorHandler = h
	}
}

// NewDefaultApiController creates a default api controller
func NewDefaultApiController(s DefaultApiServicer, opts ...DefaultApiOption) Router {
	controller := &DefaultApiController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the DefaultApiController
func (c *DefaultApiController) Routes() Routes {
	return Routes{
		{
			"CreateAsset",
			strings.ToUpper("Post"),
			"/createAsset",
			c.CreateAsset,
		},
		{
			"DeleteAsset",
			strings.ToUpper("Delete"),
			"/deleteAsset",
			c.DeleteAsset,
		},
		{
			"GetAssetInfo",
			strings.ToUpper("Post"),
			"/getAssetInfo",
			c.GetAssetInfo,
		},
		{
			"UpdateAsset",
			strings.ToUpper("Patch"),
			"/updateAsset",
			c.UpdateAsset,
		},
	}
}

// CreateAsset - This REST API writes data asset information to the data catalog configured in fybrik
func (c *DefaultApiController) CreateAsset(w http.ResponseWriter, r *http.Request) {
	xRequestDatacatalogWriteCredParam := r.Header.Get("X-Request-Datacatalog-Write-Cred")
	createAssetRequestParam := CreateAssetRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&createAssetRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertCreateAssetRequestRequired(createAssetRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CreateAsset(r.Context(), xRequestDatacatalogWriteCredParam, createAssetRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// DeleteAsset - This REST API deletes data asset
func (c *DefaultApiController) DeleteAsset(w http.ResponseWriter, r *http.Request) {
	xRequestDatacatalogCredParam := r.Header.Get("X-Request-Datacatalog-Cred")
	deleteAssetRequestParam := DeleteAssetRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&deleteAssetRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertDeleteAssetRequestRequired(deleteAssetRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.DeleteAsset(r.Context(), xRequestDatacatalogCredParam, deleteAssetRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// GetAssetInfo - This REST API gets data asset information from the data catalog configured in fybrik for the data sets indicated in FybrikApplication yaml
func (c *DefaultApiController) GetAssetInfo(w http.ResponseWriter, r *http.Request) {
	xRequestDatacatalogCredParam := r.Header.Get("X-Request-Datacatalog-Cred")
	getAssetRequestParam := GetAssetRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&getAssetRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertGetAssetRequestRequired(getAssetRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.GetAssetInfo(r.Context(), xRequestDatacatalogCredParam, getAssetRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// UpdateAsset - This REST API updates data asset information in the data catalog configured in fybrik
func (c *DefaultApiController) UpdateAsset(w http.ResponseWriter, r *http.Request) {
	xRequestDatacatalogUpdateCredParam := r.Header.Get("X-Request-Datacatalog-Update-Cred")
	updateAssetRequestParam := UpdateAssetRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&updateAssetRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertUpdateAssetRequestRequired(updateAssetRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateAsset(r.Context(), xRequestDatacatalogUpdateCredParam, updateAssetRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}
