/*
Data Catalog Service - Asset Details

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ResourceMetadata ResourceMetadata defines model for resource metadata
type ResourceMetadata struct {
	// Columns associated with the asset
	Columns []ResourceColumn `json:"columns,omitempty"`
	// Geography of the resource
	Geography *string `json:"geography,omitempty"`
	// Name of the resource
	Name *string `json:"name,omitempty"`
	// Owner of the resource
	Owner *string                `json:"owner,omitempty"`
	Tags  map[string]interface{} `json:"tags,omitempty"`
}

// NewResourceMetadata instantiates a new ResourceMetadata object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResourceMetadata() *ResourceMetadata {
	this := ResourceMetadata{}
	return &this
}

// NewResourceMetadataWithDefaults instantiates a new ResourceMetadata object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResourceMetadataWithDefaults() *ResourceMetadata {
	this := ResourceMetadata{}
	return &this
}

// GetColumns returns the Columns field value if set, zero value otherwise.
func (o *ResourceMetadata) GetColumns() []ResourceColumn {
	if o == nil || o.Columns == nil {
		var ret []ResourceColumn
		return ret
	}
	return o.Columns
}

// GetColumnsOk returns a tuple with the Columns field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceMetadata) GetColumnsOk() ([]ResourceColumn, bool) {
	if o == nil || o.Columns == nil {
		return nil, false
	}
	return o.Columns, true
}

// HasColumns returns a boolean if a field has been set.
func (o *ResourceMetadata) HasColumns() bool {
	if o != nil && o.Columns != nil {
		return true
	}

	return false
}

// SetColumns gets a reference to the given []ResourceColumn and assigns it to the Columns field.
func (o *ResourceMetadata) SetColumns(v []ResourceColumn) {
	o.Columns = v
}

// GetGeography returns the Geography field value if set, zero value otherwise.
func (o *ResourceMetadata) GetGeography() string {
	if o == nil || o.Geography == nil {
		var ret string
		return ret
	}
	return *o.Geography
}

// GetGeographyOk returns a tuple with the Geography field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceMetadata) GetGeographyOk() (*string, bool) {
	if o == nil || o.Geography == nil {
		return nil, false
	}
	return o.Geography, true
}

// HasGeography returns a boolean if a field has been set.
func (o *ResourceMetadata) HasGeography() bool {
	if o != nil && o.Geography != nil {
		return true
	}

	return false
}

// SetGeography gets a reference to the given string and assigns it to the Geography field.
func (o *ResourceMetadata) SetGeography(v string) {
	o.Geography = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ResourceMetadata) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceMetadata) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ResourceMetadata) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ResourceMetadata) SetName(v string) {
	o.Name = &v
}

// GetOwner returns the Owner field value if set, zero value otherwise.
func (o *ResourceMetadata) GetOwner() string {
	if o == nil || o.Owner == nil {
		var ret string
		return ret
	}
	return *o.Owner
}

// GetOwnerOk returns a tuple with the Owner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceMetadata) GetOwnerOk() (*string, bool) {
	if o == nil || o.Owner == nil {
		return nil, false
	}
	return o.Owner, true
}

// HasOwner returns a boolean if a field has been set.
func (o *ResourceMetadata) HasOwner() bool {
	if o != nil && o.Owner != nil {
		return true
	}

	return false
}

// SetOwner gets a reference to the given string and assigns it to the Owner field.
func (o *ResourceMetadata) SetOwner(v string) {
	o.Owner = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *ResourceMetadata) GetTags() map[string]interface{} {
	if o == nil || o.Tags == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceMetadata) GetTagsOk() (map[string]interface{}, bool) {
	if o == nil || o.Tags == nil {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *ResourceMetadata) HasTags() bool {
	if o != nil && o.Tags != nil {
		return true
	}

	return false
}

// SetTags gets a reference to the given map[string]interface{} and assigns it to the Tags field.
func (o *ResourceMetadata) SetTags(v map[string]interface{}) {
	o.Tags = v
}

func (o ResourceMetadata) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Columns != nil {
		toSerialize["columns"] = o.Columns
	}
	if o.Geography != nil {
		toSerialize["geography"] = o.Geography
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Owner != nil {
		toSerialize["owner"] = o.Owner
	}
	if o.Tags != nil {
		toSerialize["tags"] = o.Tags
	}
	return json.Marshal(toSerialize)
}

type NullableResourceMetadata struct {
	value *ResourceMetadata
	isSet bool
}

func (v NullableResourceMetadata) Get() *ResourceMetadata {
	return v.value
}

func (v *NullableResourceMetadata) Set(val *ResourceMetadata) {
	v.value = val
	v.isSet = true
}

func (v NullableResourceMetadata) IsSet() bool {
	return v.isSet
}

func (v *NullableResourceMetadata) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResourceMetadata(val *ResourceMetadata) *NullableResourceMetadata {
	return &NullableResourceMetadata{value: val, isSet: true}
}

func (v NullableResourceMetadata) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResourceMetadata) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
